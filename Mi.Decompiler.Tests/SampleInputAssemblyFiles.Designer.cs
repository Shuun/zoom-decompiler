//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.431
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mi.Decompiler.Tests {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class SampleInputAssemblyFiles {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal SampleInputAssemblyFiles() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Mi.Decompiler.Tests.SampleInputAssemblyFiles", typeof(SampleInputAssemblyFiles).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Copyright (c) AlphaSierraPapa for the SharpDevelop Team (for details please see \doc\copyright.txt)
        ///// This code is distributed under MIT X11 license (for details please see \doc\license.txt)
        ///
        ///using System;
        ///using System.Collections.Generic;
        ///
        ///public class CallOverloadedMethod
        ///{
        ///	public void OverloadedMethod(object a)
        ///	{
        ///	}
        ///	
        ///	public void OverloadedMethod(int? a)
        ///	{
        ///	}
        ///	
        ///	public void OverloadedMethod(string a)
        ///	{
        ///	}
        ///	
        ///	public void Call()
        ///	{
        ///		this.OverloadedMethod(&quot;(string)&quot;);
        ///		this.OverloadedMethod((obje [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CallOverloadedMethod {
            get {
                return ResourceManager.GetString("CallOverloadedMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Copyright (c) AlphaSierraPapa for the SharpDevelop Team (for details please see \doc\copyright.txt)
        ///// This code is distributed under MIT X11 license (for details please see \doc\license.txt)
        ///
        ///public class CheckedUnchecked
        ///{
        ///	public int Operators(int a, int b)
        ///	{
        ///		int num = checked(a + b);
        ///		int num2 = a + b;
        ///		int num3 = checked(a - b);
        ///		int num4 = a - b;
        ///		int num5 = checked(a * b);
        ///		int num6 = a * b;
        ///		int num7 = a / b;
        ///		int num8 = a % b;
        ///		// The division operators / and % only exist in one form  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CheckedUnchecked {
            get {
                return ResourceManager.GetString("CheckedUnchecked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Copyright (c) AlphaSierraPapa for the SharpDevelop Team (for details please see \doc\copyright.txt)
        ///// This code is distributed under MIT X11 license (for details please see \doc\license.txt)
        ///
        ///using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///
        ///public static class DelegateConstruction
        ///{
        ///	class InstanceTests
        ///	{
        ///		public Action CaptureOfThis()
        ///		{
        ///			return delegate {
        ///				CaptureOfThis();
        ///			};
        ///		}
        ///		
        ///		public Action CaptureOfThisAndParameter(int a)
        ///		{
        ///			return delegate {
        ///				CaptureOfThi [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DelegateConstruction {
            get {
                return ResourceManager.GetString("DelegateConstruction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using Microsoft.VisualStudio.TestTools.UnitTesting;
        ///
        ///namespace Mi.Decompiler.Tests.Types
        ///{
        ///	[TestClass]
        ///	public class EnumTests : DecompilerTestBase
        ///	{
        ///		[TestMethod]
        ///		public void EnumSamples()
        ///		{
        ///			ValidateFileRoundtrip(@&quot;S_EnumSamples.cs&quot;);
        ///		}
        ///	}
        ///}
        ///.
        /// </summary>
        internal static string EnumTests {
            get {
                return ResourceManager.GetString("EnumTests", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Copyright (c) AlphaSierraPapa for the SharpDevelop Team (for details please see \doc\copyright.txt)
        ///// This code is distributed under MIT X11 license (for details please see \doc\license.txt)
        ///
        ///using System;
        ///
        ///public class ExceptionHandling
        ///{
        ///	public void MethodEndingWithEndFinally()
        ///	{
        ///		try
        ///		{
        ///			throw null;
        ///		}
        ///		finally
        ///		{
        ///			Console.WriteLine();
        ///		}
        ///	}
        ///	
        ///	public void MethodEndingWithRethrow()
        ///	{
        ///		try
        ///		{
        ///			throw null;
        ///		}
        ///		catch
        ///		{
        ///			throw;
        ///		}
        ///	}
        ///	
        ///	public void TryCatchFinally()
        ///	{
        ///		try
        ///		{
        ///	 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ExceptionHandling {
            get {
                return ResourceManager.GetString("ExceptionHandling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Copyright (c) AlphaSierraPapa for the SharpDevelop Team (for details please see \doc\copyright.txt)
        ///// This code is distributed under MIT X11 license (for details please see \doc\license.txt)
        ///
        ///using System;
        ///using System.Collections.Generic;
        ///
        ///public static class Generics
        ///{
        ///	public class MyArray&lt;T&gt;
        ///	{
        ///		public class NestedClass&lt;Y&gt;
        ///		{
        ///			public T Item1;
        ///			public Y Item2;
        ///		}
        ///		
        ///		private T[] arr;
        ///		
        ///		public MyArray(int capacity)
        ///		{
        ///			this.arr = new T[capacity];
        ///		}
        ///		
        ///		public void Size(int capacity)
        ///	 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Generics {
            get {
                return ResourceManager.GetString("Generics", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Copyright (c) AlphaSierraPapa for the SharpDevelop Team (for details please see \doc\copyright.txt)
        ///// This code is distributed under MIT X11 license (for details please see \doc\license.txt)
        ///
        ///using System;
        ///
        ///public class IncrementDecrement
        ///{
        ///	[Flags]
        ///	private enum MyEnum
        ///	{
        ///		None = 0,
        ///		One = 1,
        ///		Two = 2,
        ///		Four = 4
        ///	}
        ///	
        ///	public class MutableClass
        ///	{
        ///		public int Field;
        ///		
        ///		public int Property
        ///		{
        ///			get;
        ///			set;
        ///		}
        ///		
        ///		public uint this[string name]
        ///		{
        ///			get
        ///			{
        ///				return 0u;
        ///			}
        ///			set
        ///			{
        ///		 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string IncrementDecrement {
            get {
                return ResourceManager.GetString("IncrementDecrement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Copyright (c) AlphaSierraPapa for the SharpDevelop Team (for details please see \doc\copyright.txt)
        ///// This code is distributed under MIT X11 license (for details please see \doc\license.txt)
        ///
        ///using System;
        ///using System.Collections.Generic;
        ///
        ///public class InitializerTests
        ///{
        ///	enum MyEnum
        ///	{
        ///		a,
        ///		b
        ///	}
        ///	
        ///	enum MyEnum2
        ///	{
        ///		c,
        ///		d
        ///	}
        ///	
        ///	class Data
        ///	{
        ///		public InitializerTests.MyEnum a
        ///		{
        ///			get;
        ///			set;
        ///		}
        ///		public List&lt;InitializerTests.MyEnum2&gt; PropertyList
        ///		{
        ///			get;
        ///			set;
        ///		}
        ///		public List&lt;Initializ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string InitializerTests {
            get {
                return ResourceManager.GetString("InitializerTests", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Copyright (c) AlphaSierraPapa for the SharpDevelop Team (for details please see \doc\copyright.txt)
        ///// This code is distributed under MIT X11 license (for details please see \doc\license.txt)
        ///
        ///using System;
        ///using System.Collections;
        ///using System.Collections.Generic;
        ///
        ///public class Loops
        ///{
        ///	public void ForEach(IEnumerable&lt;string&gt; enumerable)
        ///	{
        ///		foreach (string current in enumerable)
        ///		{
        ///			current.ToLower();
        ///		}
        ///	}
        ///	
        ///	public void ForEachOverList(List&lt;string&gt; list)
        ///	{
        ///		// List has a struct as enumerator, [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Loops {
            get {
                return ResourceManager.GetString("Loops", resourceCulture);
            }
        }
        
        internal static byte[] mscorlib {
            get {
                object obj = ResourceManager.GetObject("mscorlib", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Copyright (c) AlphaSierraPapa for the SharpDevelop Team (for details please see \doc\copyright.txt)
        ///// This code is distributed under MIT X11 license (for details please see \doc\license.txt)
        ///
        ///using System;
        ///
        ///public class MultidimensionalArray
        ///{
        ///	internal class Generic&lt;T, S&gt; where T : new()
        ///	{
        ///		private T[,] a = new T[20, 20];
        ///		private S[,][] b = new S[20, 20][];
        ///
        ///		public T this[int i, int j]
        ///		{
        ///			get
        ///			{
        ///				return this.a[i, j];
        ///			}
        ///			set
        ///			{
        ///				this.a[i, j] = value;
        ///			}
        ///		}
        ///		
        ///		public void Te [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MultidimensionalArray {
            get {
                return ResourceManager.GetString("MultidimensionalArray", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Copyright (c) AlphaSierraPapa for the SharpDevelop Team (for details please see \doc\copyright.txt)
        ///// This code is distributed under MIT X11 license (for details please see \doc\license.txt)
        ///
        ///using System;
        ///using System.Text;
        ///
        ///public class PropertiesAndEvents
        ///{
        ///	public event EventHandler AutomaticEvent;
        ///	
        ///	[field: NonSerialized]
        ///	public event EventHandler AutomaticEventWithInitializer = delegate
        ///	{
        ///	}
        ///	;
        ///	
        ///	public event EventHandler CustomEvent
        ///	{
        ///		add
        ///		{
        ///			this.AutomaticEvent += value;
        ///		}
        ///		remove
        ///	 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PropertiesAndEvents {
            get {
                return ResourceManager.GetString("PropertiesAndEvents", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Copyright (c) AlphaSierraPapa for the SharpDevelop Team (for details please see \doc\copyright.txt)
        ///// This code is distributed under MIT X11 license (for details please see \doc\license.txt)
        ///
        ///using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///
        ///public class QueryExpressions
        ///{
        ///	public class Customer
        ///	{
        ///		public int CustomerID;
        ///		public IEnumerable&lt;QueryExpressions.Order&gt; Orders;
        ///		public string Name;
        ///		public string Country;
        ///		public string City;
        ///	}
        ///	
        ///	public class Order
        ///	{
        ///		public int Or [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string QueryExpressions {
            get {
                return ResourceManager.GetString("QueryExpressions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Copyright (c) AlphaSierraPapa for the SharpDevelop Team (for details please see \doc\copyright.txt)
        ///// This code is distributed under MIT X11 license (for details please see \doc\license.txt)
        ///
        ///using System;
        ///
        ///[assembly: CLSCompliant(false)]
        ///.
        /// </summary>
        internal static string S_AssemblyCustomAttribute {
            get {
                return ResourceManager.GetString("S_AssemblyCustomAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Copyright (c) AlphaSierraPapa for the SharpDevelop Team (for details please see \doc\copyright.txt)
        ///// This code is distributed under MIT X11 license (for details please see \doc\license.txt)
        ///
        ///using System;
        ///
        ///namespace aa
        ///{
        ///	public static class CustomAttributes
        ///	{
        ///		[Flags]
        ///		public enum EnumWithFlag
        ///		{
        ///			All = 15,
        ///			None = 0,
        ///			Item1 = 1,
        ///			Item2 = 2,
        ///			Item3 = 4,
        ///			Item4 = 8
        ///		}
        ///		[AttributeUsage(AttributeTargets.All)]
        ///		public class MyAttribute : Attribute
        ///		{
        ///			public MyAttribute(object val)
        ///	 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string S_CustomAttributes {
            get {
                return ResourceManager.GetString("S_CustomAttributes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Copyright (c) AlphaSierraPapa for the SharpDevelop Team (for details please see \doc\copyright.txt)
        ///// This code is distributed under MIT X11 license (for details please see \doc\license.txt)
        ///
        /////$CS
        ///using System;
        /////$CE
        ///
        /////$$ TargetModule (ignored)
        /////[module: CLSCompliantAttribute(false)]
        /////$$ ParameterlessAttributeUsage
        ///namespace ParameterLessAttributeUsage
        ///{
        ///	[Flags]
        ///	public enum EnumWithFlagsAttribute
        ///	{
        ///		None = 0
        ///	}
        ///}
        /////$$ AttributeWithEnumArgument
        ///namespace AttributeWithEnumArgument
        ///{
        ///	[AttributeUsa [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string S_CustomAttributeSamples {
            get {
                return ResourceManager.GetString("S_CustomAttributeSamples", resourceCulture);
            }
        }
        
        internal static byte[] SampleInputAssembly {
            get {
                object obj = ResourceManager.GetObject("SampleInputAssembly", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        internal static byte[] SampleInputAssembly_pdb {
            get {
                object obj = ResourceManager.GetObject("SampleInputAssembly_pdb", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Copyright (c) AlphaSierraPapa for the SharpDevelop Team (for details please see \doc\copyright.txt)
        ///// This code is distributed under MIT X11 license (for details please see \doc\license.txt)
        ///
        ///using System;
        ///
        ///public static class Switch
        ///{
        ///	public static string ShortSwitchOverString(string text)
        ///	{
        ///		switch (text) {
        ///			case &quot;First case&quot;:
        ///				return &quot;Text&quot;;
        ///			default:
        ///				return &quot;Default&quot;;
        ///		}
        ///	}
        ///	
        ///	public static string SwitchOverString1(string text)
        ///	{
        ///		switch (text)
        ///		{
        ///			case &quot;First case&quot;:
        ///				return &quot; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Switch {
            get {
                return ResourceManager.GetString("Switch", resourceCulture);
            }
        }
        
        internal static byte[] System_Core {
            get {
                object obj = ResourceManager.GetObject("System_Core", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.Linq;
        ///using System.Text;
        ///using Microsoft.VisualStudio.TestTools.UnitTesting;
        ///
        ///namespace Mi.Decompiler.Tests.Types
        ///{
        ///	[TestClass]
        ///	public class TypeTests : DecompilerTestBase
        ///	{
        ///		[TestMethod]
        ///		public void TypeMemberDeclarations()
        ///		{
        ///			ValidateFileRoundtrip(@&quot;S_TypeMemberDeclarations.cs&quot;);
        ///		}
        ///	}
        ///}
        ///.
        /// </summary>
        internal static string TypeTests {
            get {
                return ResourceManager.GetString("TypeTests", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Copyright (c) AlphaSierraPapa for the SharpDevelop Team (for details please see \doc\copyright.txt)
        ///// This code is distributed under MIT X11 license (for details please see \doc\license.txt)
        ///
        ///using System;
        ///
        ///public class UndocumentedExpressions
        ///{
        ///	public static int GetArgCount(__arglist)
        ///	{
        ///		ArgIterator argIterator = new ArgIterator(__arglist);
        ///		return argIterator.GetRemainingCount();
        ///	}
        ///	
        ///	public static void MakeTypedRef(object o)
        ///	{
        ///		TypedReference tr = __makeref(o);
        ///		UndocumentedExpressions.Accept [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string UndocumentedExpressions {
            get {
                return ResourceManager.GetString("UndocumentedExpressions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Copyright (c) AlphaSierraPapa for the SharpDevelop Team (for details please see \doc\copyright.txt)
        ///// This code is distributed under MIT X11 license (for details please see \doc\license.txt)
        ///
        ///using System;
        ///
        ///public class UnsafeCode
        ///{
        ///	public unsafe int* NullPointer
        ///	{
        ///		get
        ///		{
        ///			return null;
        ///		}
        ///	}
        ///	
        ///	public unsafe long ConvertDoubleToLong(double d)
        ///	{
        ///		return *(long*)(&amp;d);
        ///	}
        ///	
        ///	public unsafe void PassRefParameterAsPointer(ref int p)
        ///	{
        ///		fixed (int* ptr = &amp;p)
        ///		{
        ///			this.PassPointerAsRefParameter(pt [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string UnsafeCode {
            get {
                return ResourceManager.GetString("UnsafeCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Copyright (c) AlphaSierraPapa for the SharpDevelop Team (for details please see \doc\copyright.txt)
        ///// This code is distributed under MIT X11 license (for details please see \doc\license.txt)
        ///
        ///using System;
        ///
        ///public static class ValueTypes
        ///{
        ///	public struct S
        ///	{
        ///		public int Field;
        ///		
        ///		public S(int field)
        ///		{
        ///			this.Field = field;
        ///		}
        ///		
        ///		public void SetField()
        ///		{
        ///			this.Field = 5;
        ///		}
        ///		
        ///		public void MethodCalls()
        ///		{
        ///			this.SetField();
        ///			ValueTypes.S.Test(this);
        ///			ValueTypes.S.Test(ref this);
        ///		 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ValueTypes {
            get {
                return ResourceManager.GetString("ValueTypes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Copyright (c) AlphaSierraPapa for the SharpDevelop Team (for details please see \doc\copyright.txt)
        ///// This code is distributed under MIT X11 license (for details please see \doc\license.txt)
        ///
        ///using System;
        ///using System.Collections.Generic;
        ///
        ///public static class YieldReturn
        ///{
        ///	public static IEnumerable&lt;string&gt; SimpleYieldReturn()
        ///	{
        ///		yield return &quot;A&quot;;
        ///		yield return &quot;B&quot;;
        ///		yield return &quot;C&quot;;
        ///	}
        ///	
        ///	public static IEnumerable&lt;int&gt; YieldReturnInLoop()
        ///	{
        ///		for (int i = 0; i &lt; 100; i++) {
        ///			yield return i;
        ///		 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string YieldReturn {
            get {
                return ResourceManager.GetString("YieldReturn", resourceCulture);
            }
        }
    }
}
