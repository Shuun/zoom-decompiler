// created by jay 0.7 (c) 1998 Axel.Schreiner@informatik.uni-osnabrueck.de

#line 2 "cs-parser.jay"
//
// cs-parser.jay: The Parser for the C# compiler
//
// Authors: Miguel de Icaza (miguel@gnu.org)
//          Ravi Pratap     (ravi@ximian.com)
//          Marek Safar		(marek.safar@gmail.com)
//
// Dual Licensed under the terms of the GNU GPL and the MIT X11 license
//
// (C) 2001 Ximian, Inc (http://www.ximian.com)
// (C) 2004 Novell, Inc
//
// TODO:
//   (1) Figure out why error productions dont work.  `type-declaration' is a
//       great spot to put an `error' because you can reproduce it with this input:
//	 "public X { }"
//

using System.Text;
using System.IO;
using System;
using System.Collections.Generic;

namespace Mono.CSharp
{
	/// <summary>
	///    The C# Parser
	/// </summary>
	public class CSharpParser
	{
		[Flags]
		enum ParameterModifierType
		{
			Ref		= 1 << 1,
			Out		= 1 << 2,
			This	= 1 << 3,
			Params	= 1 << 4,
			Arglist	= 1 << 5,
			DefaultValue = 1 << 6,
			
			All = Ref | Out | This | Params | Arglist | DefaultValue
		}
		
		static readonly object ModifierNone = 0;
	
		NamespaceContainer  current_namespace;
		TypeContainer   current_container;
		DeclSpace	current_class;
		PropertyBase current_property;
		EventProperty current_event;
		EventField current_event_field;
		FieldBase current_field;
	
		/// <summary>
		///   Current block is used to add statements as we find
		///   them.  
		/// </summary>
		Block      current_block;
		
		BlockVariableDeclaration current_variable;

		Delegate   current_delegate;
		
		AnonymousMethodExpression current_anonymous_method;

		/// <summary>
		///   This is used by the unary_expression code to resolve
		///   a name against a parameter.  
		/// </summary>
		
		// FIXME: This is very ugly and it's very hard to reset it correctly
		// on all places, especially when some parameters are autogenerated.
		ParametersCompiled current_local_parameters;

		bool parsing_anonymous_method;

		///
		/// An out-of-band stack.
		///
		static Stack<object> oob_stack;

		///
		/// Controls the verbosity of the errors produced by the parser
		///
		static public int yacc_verbose_flag;

		/// 
		/// Used by the interactive shell, flags whether EOF was reached
		/// and an error was produced
		///
		public bool UnexpectedEOF;

		///
		/// The current file.
		///
		readonly CompilationSourceFile file;

		///
		/// Temporary Xml documentation cache.
		/// For enum types, we need one more temporary store.
		///
		string tmpComment;
		string enumTypeComment;
	       		
		/// Current attribute target
		string current_attr_target;
		
		ParameterModifierType valid_param_mod;
		
		bool default_parameter_used;

		/// When using the interactive parser, this holds the
		/// resulting expression
		public Class InteractiveResult;

		//
		// Keeps track of global data changes to undo on parser error
		//
		public Undo undo;
		
		Stack<Linq.QueryBlock> linq_clause_blocks;

		ModuleContainer module;
		
		readonly CompilerContext compiler;
		readonly LanguageVersion lang_version;
		readonly bool doc_support;
		readonly CompilerSettings settings;
		readonly Report report;
		
		//
		// Instead of allocating carrier array everytime we
		// share the bucket for very common constructs which can never
		// be recursive
		//
		static List<Parameter> parameters_bucket = new List<Parameter> (6);
		
		//
		// Full AST support members
		//
		LocationsBag lbag;
		UsingsBag ubag;
		List<Tuple<Modifiers, Location>> mod_locations;
		Location parameterModifierLocation, savedLocation, savedOpenLocation, savedCloseLocation;
		Location savedAttrParenOpenLocation, savedAttrParenCloseLocation;
		Stack<List<Location>> locationListStack = new Stack<List<Location>> (); // used for type parameters
		
		object lastYYVal;
		
		// Can be used for code completion to get the last valid expression before an error.
		// needs a hack in yyparse to make it work add 
		// lastYYVal = yyVal;
		// after the big switch/case (somewhere around line 3915)
		public object LastYYVal {
			get {
				return lastYYVal;
			}
		}
		
#line default

  /** error output stream.
      It should be changeable.
    */
  public System.IO.TextWriter ErrorOutput = System.Console.Out;

  /** simplified error message.
      @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
    */
  public void yyerror (string message) {
    yyerror(message, null);
  }

  /* An EOF token */
  public int eof_token;

  /** (syntax) error message.
      Can be overwritten to control message format.
      @param message text to be displayed.
      @param expected vector of acceptable tokens, if available.
    */
  public void yyerror (string message, string[] expected) {
    if ((yacc_verbose_flag > 0) && (expected != null) && (expected.Length  > 0)) {
      ErrorOutput.Write (message+", expecting");
      for (int n = 0; n < expected.Length; ++ n)
        ErrorOutput.Write (" "+expected[n]);
        ErrorOutput.WriteLine ();
    } else
      ErrorOutput.WriteLine (message);
  }

  /** debugging support, requires the package jay.yydebug.
      Set to null to suppress debugging messages.
    */
//t  internal yydebug.yyDebug debug;

  protected const int yyFinal = 7;
//t // Put this array into a separate class so it is only initialized if debugging is actually used
//t // Use MarshalByRefObject to disable inlining
//t class YYRules : MarshalByRefObject {
//t  public static readonly string [] yyRule = {
//t    "$accept : compilation_unit",
//t    "compilation_unit : outer_declaration opt_EOF",
//t    "$$1 :",
//t    "compilation_unit : interactive_parsing $$1 opt_EOF",
//t    "compilation_unit : documentation_parsing",
//t    "outer_declaration : opt_extern_alias_directives opt_using_directives",
//t    "outer_declaration : opt_extern_alias_directives opt_using_directives namespace_or_type_declarations opt_attributes",
//t    "outer_declaration : opt_extern_alias_directives opt_using_directives attribute_sections",
//t    "outer_declaration : error",
//t    "opt_EOF :",
//t    "opt_EOF : EOF",
//t    "extern_alias_directives : extern_alias_directive",
//t    "extern_alias_directives : extern_alias_directives extern_alias_directive",
//t    "extern_alias_directive : EXTERN_ALIAS IDENTIFIER IDENTIFIER SEMICOLON",
//t    "extern_alias_directive : EXTERN_ALIAS error",
//t    "using_directives : using_directive",
//t    "using_directives : using_directives using_directive",
//t    "using_directive : using_alias_directive",
//t    "using_directive : using_namespace_directive",
//t    "using_alias_directive : USING IDENTIFIER ASSIGN namespace_or_type_name SEMICOLON",
//t    "using_alias_directive : USING error",
//t    "using_namespace_directive : USING namespace_name SEMICOLON",
//t    "$$2 :",
//t    "$$3 :",
//t    "namespace_declaration : opt_attributes NAMESPACE qualified_identifier $$2 OPEN_BRACE $$3 opt_extern_alias_directives opt_using_directives opt_namespace_or_type_declarations CLOSE_BRACE opt_semicolon",
//t    "qualified_identifier : IDENTIFIER",
//t    "qualified_identifier : qualified_identifier DOT IDENTIFIER",
//t    "qualified_identifier : error",
//t    "opt_semicolon :",
//t    "opt_semicolon : SEMICOLON",
//t    "opt_comma :",
//t    "opt_comma : COMMA",
//t    "namespace_name : namespace_or_type_name",
//t    "opt_using_directives :",
//t    "opt_using_directives : using_directives",
//t    "opt_extern_alias_directives :",
//t    "opt_extern_alias_directives : extern_alias_directives",
//t    "opt_namespace_or_type_declarations :",
//t    "opt_namespace_or_type_declarations : namespace_or_type_declarations",
//t    "namespace_or_type_declarations : namespace_or_type_declaration",
//t    "namespace_or_type_declarations : namespace_or_type_declarations namespace_or_type_declaration",
//t    "namespace_or_type_declaration : type_declaration",
//t    "namespace_or_type_declaration : namespace_declaration",
//t    "type_declaration : class_declaration",
//t    "type_declaration : struct_declaration",
//t    "type_declaration : interface_declaration",
//t    "type_declaration : enum_declaration",
//t    "type_declaration : delegate_declaration",
//t    "opt_attributes :",
//t    "opt_attributes : attribute_sections",
//t    "attribute_sections : attribute_section",
//t    "attribute_sections : attribute_sections attribute_section",
//t    "$$4 :",
//t    "attribute_section : OPEN_BRACKET $$4 attribute_section_cont",
//t    "$$5 :",
//t    "attribute_section_cont : attribute_target COLON $$5 attribute_list opt_comma CLOSE_BRACKET",
//t    "attribute_section_cont : attribute_list opt_comma CLOSE_BRACKET",
//t    "attribute_target : IDENTIFIER",
//t    "attribute_target : EVENT",
//t    "attribute_target : RETURN",
//t    "attribute_target : error",
//t    "attribute_list : attribute",
//t    "attribute_list : attribute_list COMMA attribute",
//t    "$$6 :",
//t    "attribute : attribute_name $$6 opt_attribute_arguments",
//t    "attribute_name : namespace_or_type_name",
//t    "opt_attribute_arguments :",
//t    "opt_attribute_arguments : OPEN_PARENS attribute_arguments CLOSE_PARENS",
//t    "attribute_arguments :",
//t    "attribute_arguments : positional_or_named_argument",
//t    "attribute_arguments : named_attribute_argument",
//t    "attribute_arguments : attribute_arguments COMMA positional_or_named_argument",
//t    "attribute_arguments : attribute_arguments COMMA named_attribute_argument",
//t    "positional_or_named_argument : expression",
//t    "positional_or_named_argument : named_argument",
//t    "$$7 :",
//t    "named_attribute_argument : IDENTIFIER ASSIGN $$7 expression",
//t    "named_argument : IDENTIFIER COLON opt_named_modifier expression",
//t    "opt_named_modifier :",
//t    "opt_named_modifier : REF",
//t    "opt_named_modifier : OUT",
//t    "opt_class_member_declarations :",
//t    "opt_class_member_declarations : class_member_declarations",
//t    "class_member_declarations : class_member_declaration",
//t    "class_member_declarations : class_member_declarations class_member_declaration",
//t    "class_member_declaration : constant_declaration",
//t    "class_member_declaration : field_declaration",
//t    "class_member_declaration : method_declaration",
//t    "class_member_declaration : property_declaration",
//t    "class_member_declaration : event_declaration",
//t    "class_member_declaration : indexer_declaration",
//t    "class_member_declaration : operator_declaration",
//t    "class_member_declaration : constructor_declaration",
//t    "class_member_declaration : destructor_declaration",
//t    "class_member_declaration : type_declaration",
//t    "class_member_declaration : error",
//t    "$$8 :",
//t    "$$9 :",
//t    "$$10 :",
//t    "$$11 :",
//t    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT $$8 type_declaration_name $$9 opt_class_base opt_type_parameter_constraints_clauses $$10 struct_body $$11 opt_semicolon",
//t    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT error",
//t    "$$12 :",
//t    "struct_body : OPEN_BRACE $$12 opt_struct_member_declarations CLOSE_BRACE",
//t    "opt_struct_member_declarations :",
//t    "opt_struct_member_declarations : struct_member_declarations",
//t    "struct_member_declarations : struct_member_declaration",
//t    "struct_member_declarations : struct_member_declarations struct_member_declaration",
//t    "struct_member_declaration : constant_declaration",
//t    "struct_member_declaration : field_declaration",
//t    "struct_member_declaration : method_declaration",
//t    "struct_member_declaration : property_declaration",
//t    "struct_member_declaration : event_declaration",
//t    "struct_member_declaration : indexer_declaration",
//t    "struct_member_declaration : operator_declaration",
//t    "struct_member_declaration : constructor_declaration",
//t    "struct_member_declaration : type_declaration",
//t    "struct_member_declaration : destructor_declaration",
//t    "$$13 :",
//t    "constant_declaration : opt_attributes opt_modifiers CONST type IDENTIFIER $$13 constant_initializer opt_constant_declarators SEMICOLON",
//t    "opt_constant_declarators :",
//t    "opt_constant_declarators : constant_declarators",
//t    "constant_declarators : constant_declarator",
//t    "constant_declarators : constant_declarators constant_declarator",
//t    "constant_declarator : COMMA IDENTIFIER constant_initializer",
//t    "$$14 :",
//t    "constant_initializer : ASSIGN $$14 constant_initializer_expr",
//t    "constant_initializer : error",
//t    "constant_initializer_expr : constant_expression",
//t    "constant_initializer_expr : array_initializer",
//t    "$$15 :",
//t    "field_declaration : opt_attributes opt_modifiers member_type IDENTIFIER $$15 opt_field_initializer opt_field_declarators SEMICOLON",
//t    "$$16 :",
//t    "field_declaration : opt_attributes opt_modifiers FIXED simple_type IDENTIFIER $$16 fixed_field_size opt_fixed_field_declarators SEMICOLON",
//t    "field_declaration : opt_attributes opt_modifiers FIXED simple_type error SEMICOLON",
//t    "opt_field_initializer :",
//t    "$$17 :",
//t    "opt_field_initializer : ASSIGN $$17 variable_initializer",
//t    "opt_field_declarators :",
//t    "opt_field_declarators : field_declarators",
//t    "field_declarators : field_declarator",
//t    "field_declarators : field_declarators field_declarator",
//t    "field_declarator : COMMA IDENTIFIER",
//t    "$$18 :",
//t    "field_declarator : COMMA IDENTIFIER ASSIGN $$18 variable_initializer",
//t    "opt_fixed_field_declarators :",
//t    "opt_fixed_field_declarators : fixed_field_declarators",
//t    "fixed_field_declarators : fixed_field_declarator",
//t    "fixed_field_declarators : fixed_field_declarators fixed_field_declarator",
//t    "fixed_field_declarator : COMMA IDENTIFIER fixed_field_size",
//t    "$$19 :",
//t    "fixed_field_size : OPEN_BRACKET $$19 expression CLOSE_BRACKET",
//t    "fixed_field_size : OPEN_BRACKET error",
//t    "variable_initializer : expression",
//t    "variable_initializer : array_initializer",
//t    "variable_initializer : error",
//t    "$$20 :",
//t    "method_declaration : method_header $$20 method_body",
//t    "$$21 :",
//t    "$$22 :",
//t    "method_header : opt_attributes opt_modifiers member_type method_declaration_name OPEN_PARENS $$21 opt_formal_parameter_list CLOSE_PARENS $$22 opt_type_parameter_constraints_clauses",
//t    "$$23 :",
//t    "$$24 :",
//t    "$$25 :",
//t    "method_header : opt_attributes opt_modifiers PARTIAL VOID $$23 method_declaration_name OPEN_PARENS $$24 opt_formal_parameter_list CLOSE_PARENS $$25 opt_type_parameter_constraints_clauses",
//t    "method_header : opt_attributes opt_modifiers member_type modifiers method_declaration_name OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS",
//t    "method_body : block",
//t    "method_body : SEMICOLON",
//t    "opt_formal_parameter_list :",
//t    "opt_formal_parameter_list : formal_parameter_list",
//t    "formal_parameter_list : fixed_parameters",
//t    "formal_parameter_list : fixed_parameters COMMA parameter_array",
//t    "formal_parameter_list : fixed_parameters COMMA arglist_modifier",
//t    "formal_parameter_list : parameter_array COMMA error",
//t    "formal_parameter_list : fixed_parameters COMMA parameter_array COMMA error",
//t    "formal_parameter_list : arglist_modifier COMMA error",
//t    "formal_parameter_list : fixed_parameters COMMA ARGLIST COMMA error",
//t    "formal_parameter_list : parameter_array",
//t    "formal_parameter_list : arglist_modifier",
//t    "formal_parameter_list : error",
//t    "fixed_parameters : fixed_parameter",
//t    "fixed_parameters : fixed_parameters COMMA fixed_parameter",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type IDENTIFIER",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type IDENTIFIER OPEN_BRACKET CLOSE_BRACKET",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type error",
//t    "$$26 :",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type IDENTIFIER ASSIGN $$26 constant_expression",
//t    "opt_parameter_modifier :",
//t    "opt_parameter_modifier : parameter_modifiers",
//t    "parameter_modifiers : parameter_modifier",
//t    "parameter_modifiers : parameter_modifiers parameter_modifier",
//t    "parameter_modifier : REF",
//t    "parameter_modifier : OUT",
//t    "parameter_modifier : THIS",
//t    "parameter_array : opt_attributes params_modifier type IDENTIFIER",
//t    "parameter_array : opt_attributes params_modifier type IDENTIFIER ASSIGN constant_expression",
//t    "parameter_array : opt_attributes params_modifier type error",
//t    "params_modifier : PARAMS",
//t    "params_modifier : PARAMS parameter_modifier",
//t    "params_modifier : PARAMS params_modifier",
//t    "arglist_modifier : ARGLIST",
//t    "$$27 :",
//t    "$$28 :",
//t    "$$29 :",
//t    "property_declaration : opt_attributes opt_modifiers member_type member_declaration_name $$27 OPEN_BRACE $$28 accessor_declarations $$29 CLOSE_BRACE",
//t    "$$30 :",
//t    "$$31 :",
//t    "$$32 :",
//t    "indexer_declaration : opt_attributes opt_modifiers member_type indexer_declaration_name OPEN_BRACKET $$30 opt_formal_parameter_list CLOSE_BRACKET OPEN_BRACE $$31 accessor_declarations $$32 CLOSE_BRACE",
//t    "accessor_declarations : get_accessor_declaration",
//t    "accessor_declarations : get_accessor_declaration accessor_declarations",
//t    "accessor_declarations : set_accessor_declaration",
//t    "accessor_declarations : set_accessor_declaration accessor_declarations",
//t    "accessor_declarations : error",
//t    "$$33 :",
//t    "get_accessor_declaration : opt_attributes opt_modifiers GET $$33 accessor_body",
//t    "$$34 :",
//t    "set_accessor_declaration : opt_attributes opt_modifiers SET $$34 accessor_body",
//t    "accessor_body : block",
//t    "accessor_body : SEMICOLON",
//t    "accessor_body : error",
//t    "$$35 :",
//t    "$$36 :",
//t    "$$37 :",
//t    "$$38 :",
//t    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE $$35 type_declaration_name $$36 opt_class_base opt_type_parameter_constraints_clauses $$37 OPEN_BRACE opt_interface_member_declarations CLOSE_BRACE $$38 opt_semicolon",
//t    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE error",
//t    "opt_interface_member_declarations :",
//t    "opt_interface_member_declarations : interface_member_declarations",
//t    "interface_member_declarations : interface_member_declaration",
//t    "interface_member_declarations : interface_member_declarations interface_member_declaration",
//t    "interface_member_declaration : constant_declaration",
//t    "interface_member_declaration : field_declaration",
//t    "interface_member_declaration : method_declaration",
//t    "interface_member_declaration : property_declaration",
//t    "interface_member_declaration : event_declaration",
//t    "interface_member_declaration : indexer_declaration",
//t    "interface_member_declaration : operator_declaration",
//t    "interface_member_declaration : constructor_declaration",
//t    "interface_member_declaration : type_declaration",
//t    "$$39 :",
//t    "operator_declaration : opt_attributes opt_modifiers operator_declarator $$39 operator_body",
//t    "operator_body : block",
//t    "operator_body : SEMICOLON",
//t    "operator_type : type_expression_or_array",
//t    "operator_type : VOID",
//t    "$$40 :",
//t    "operator_declarator : operator_type OPERATOR overloadable_operator OPEN_PARENS $$40 opt_formal_parameter_list CLOSE_PARENS",
//t    "operator_declarator : conversion_operator_declarator",
//t    "overloadable_operator : BANG",
//t    "overloadable_operator : TILDE",
//t    "overloadable_operator : OP_INC",
//t    "overloadable_operator : OP_DEC",
//t    "overloadable_operator : TRUE",
//t    "overloadable_operator : FALSE",
//t    "overloadable_operator : PLUS",
//t    "overloadable_operator : MINUS",
//t    "overloadable_operator : STAR",
//t    "overloadable_operator : DIV",
//t    "overloadable_operator : PERCENT",
//t    "overloadable_operator : BITWISE_AND",
//t    "overloadable_operator : BITWISE_OR",
//t    "overloadable_operator : CARRET",
//t    "overloadable_operator : OP_SHIFT_LEFT",
//t    "overloadable_operator : OP_SHIFT_RIGHT",
//t    "overloadable_operator : OP_EQ",
//t    "overloadable_operator : OP_NE",
//t    "overloadable_operator : OP_GT",
//t    "overloadable_operator : OP_LT",
//t    "overloadable_operator : OP_GE",
//t    "overloadable_operator : OP_LE",
//t    "$$41 :",
//t    "conversion_operator_declarator : IMPLICIT OPERATOR type OPEN_PARENS $$41 opt_formal_parameter_list CLOSE_PARENS",
//t    "$$42 :",
//t    "conversion_operator_declarator : EXPLICIT OPERATOR type OPEN_PARENS $$42 opt_formal_parameter_list CLOSE_PARENS",
//t    "conversion_operator_declarator : IMPLICIT error",
//t    "conversion_operator_declarator : EXPLICIT error",
//t    "constructor_declaration : constructor_declarator constructor_body",
//t    "$$43 :",
//t    "$$44 :",
//t    "constructor_declarator : opt_attributes opt_modifiers IDENTIFIER $$43 OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS $$44 opt_constructor_initializer",
//t    "constructor_body : block_prepared",
//t    "constructor_body : SEMICOLON",
//t    "opt_constructor_initializer :",
//t    "opt_constructor_initializer : constructor_initializer",
//t    "$$45 :",
//t    "constructor_initializer : COLON BASE OPEN_PARENS $$45 opt_argument_list CLOSE_PARENS",
//t    "$$46 :",
//t    "constructor_initializer : COLON THIS OPEN_PARENS $$46 opt_argument_list CLOSE_PARENS",
//t    "constructor_initializer : error",
//t    "$$47 :",
//t    "destructor_declaration : opt_attributes opt_modifiers TILDE $$47 IDENTIFIER OPEN_PARENS CLOSE_PARENS method_body",
//t    "$$48 :",
//t    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name $$48 opt_event_initializer opt_event_declarators SEMICOLON",
//t    "$$49 :",
//t    "$$50 :",
//t    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name OPEN_BRACE $$49 event_accessor_declarations $$50 CLOSE_BRACE",
//t    "opt_event_initializer :",
//t    "$$51 :",
//t    "opt_event_initializer : ASSIGN $$51 event_variable_initializer",
//t    "opt_event_declarators :",
//t    "opt_event_declarators : event_declarators",
//t    "event_declarators : event_declarator",
//t    "event_declarators : event_declarators event_declarator",
//t    "event_declarator : COMMA IDENTIFIER",
//t    "$$52 :",
//t    "event_declarator : COMMA IDENTIFIER ASSIGN $$52 event_variable_initializer",
//t    "$$53 :",
//t    "event_variable_initializer : $$53 variable_initializer",
//t    "event_accessor_declarations : add_accessor_declaration remove_accessor_declaration",
//t    "event_accessor_declarations : remove_accessor_declaration add_accessor_declaration",
//t    "event_accessor_declarations : add_accessor_declaration",
//t    "event_accessor_declarations : remove_accessor_declaration",
//t    "event_accessor_declarations : error",
//t    "$$54 :",
//t    "add_accessor_declaration : opt_attributes opt_modifiers ADD $$54 event_accessor_block",
//t    "$$55 :",
//t    "remove_accessor_declaration : opt_attributes opt_modifiers REMOVE $$55 event_accessor_block",
//t    "event_accessor_block : opt_semicolon",
//t    "event_accessor_block : block",
//t    "$$56 :",
//t    "$$57 :",
//t    "$$58 :",
//t    "enum_declaration : opt_attributes opt_modifiers ENUM type_declaration_name opt_enum_base $$56 OPEN_BRACE $$57 opt_enum_member_declarations $$58 CLOSE_BRACE opt_semicolon",
//t    "opt_enum_base :",
//t    "opt_enum_base : COLON type",
//t    "opt_enum_base : COLON error",
//t    "opt_enum_member_declarations :",
//t    "opt_enum_member_declarations : enum_member_declarations",
//t    "opt_enum_member_declarations : enum_member_declarations COMMA",
//t    "enum_member_declarations : enum_member_declaration",
//t    "enum_member_declarations : enum_member_declarations COMMA enum_member_declaration",
//t    "enum_member_declaration : opt_attributes IDENTIFIER",
//t    "$$59 :",
//t    "enum_member_declaration : opt_attributes IDENTIFIER $$59 ASSIGN constant_expression",
//t    "$$60 :",
//t    "$$61 :",
//t    "$$62 :",
//t    "delegate_declaration : opt_attributes opt_modifiers DELEGATE member_type type_declaration_name OPEN_PARENS $$60 opt_formal_parameter_list CLOSE_PARENS $$61 opt_type_parameter_constraints_clauses $$62 SEMICOLON",
//t    "opt_nullable :",
//t    "opt_nullable : INTERR_NULLABLE",
//t    "namespace_or_type_name : member_name",
//t    "namespace_or_type_name : qualified_alias_member IDENTIFIER opt_type_argument_list",
//t    "member_name : type_name",
//t    "member_name : namespace_or_type_name DOT IDENTIFIER opt_type_argument_list",
//t    "type_name : IDENTIFIER opt_type_argument_list",
//t    "opt_type_argument_list :",
//t    "opt_type_argument_list : OP_GENERICS_LT type_arguments OP_GENERICS_GT",
//t    "opt_type_argument_list : OP_GENERICS_LT error",
//t    "type_arguments : type",
//t    "type_arguments : type_arguments COMMA type",
//t    "$$63 :",
//t    "type_declaration_name : IDENTIFIER $$63 opt_type_parameter_list",
//t    "member_declaration_name : method_declaration_name",
//t    "method_declaration_name : type_declaration_name",
//t    "method_declaration_name : explicit_interface IDENTIFIER opt_type_parameter_list",
//t    "indexer_declaration_name : THIS",
//t    "indexer_declaration_name : explicit_interface THIS",
//t    "explicit_interface : IDENTIFIER opt_type_argument_list DOT",
//t    "explicit_interface : qualified_alias_member IDENTIFIER opt_type_argument_list DOT",
//t    "explicit_interface : explicit_interface IDENTIFIER opt_type_argument_list DOT",
//t    "opt_type_parameter_list :",
//t    "opt_type_parameter_list : OP_GENERICS_LT_DECL type_parameters OP_GENERICS_GT",
//t    "type_parameters : type_parameter",
//t    "type_parameters : type_parameters COMMA type_parameter",
//t    "type_parameter : opt_attributes opt_type_parameter_variance IDENTIFIER",
//t    "type_parameter : error",
//t    "type_and_void : type_expression_or_array",
//t    "type_and_void : VOID",
//t    "member_type : type_and_void",
//t    "type : type_expression_or_array",
//t    "type : VOID",
//t    "simple_type : type_expression",
//t    "simple_type : VOID",
//t    "parameter_type : type_expression_or_array",
//t    "parameter_type : VOID",
//t    "type_expression_or_array : type_expression",
//t    "type_expression_or_array : type_expression rank_specifiers",
//t    "type_expression : namespace_or_type_name opt_nullable",
//t    "type_expression : namespace_or_type_name pointer_stars",
//t    "type_expression : builtin_types opt_nullable",
//t    "type_expression : builtin_types pointer_stars",
//t    "type_expression : VOID pointer_stars",
//t    "type_list : base_type_name",
//t    "type_list : type_list COMMA base_type_name",
//t    "base_type_name : type",
//t    "base_type_name : error",
//t    "builtin_types : OBJECT",
//t    "builtin_types : STRING",
//t    "builtin_types : BOOL",
//t    "builtin_types : DECIMAL",
//t    "builtin_types : FLOAT",
//t    "builtin_types : DOUBLE",
//t    "builtin_types : integral_type",
//t    "integral_type : SBYTE",
//t    "integral_type : BYTE",
//t    "integral_type : SHORT",
//t    "integral_type : USHORT",
//t    "integral_type : INT",
//t    "integral_type : UINT",
//t    "integral_type : LONG",
//t    "integral_type : ULONG",
//t    "integral_type : CHAR",
//t    "primary_expression : primary_expression_or_type",
//t    "primary_expression : literal",
//t    "primary_expression : array_creation_expression",
//t    "primary_expression : parenthesized_expression",
//t    "primary_expression : default_value_expression",
//t    "primary_expression : invocation_expression",
//t    "primary_expression : element_access",
//t    "primary_expression : this_access",
//t    "primary_expression : base_access",
//t    "primary_expression : post_increment_expression",
//t    "primary_expression : post_decrement_expression",
//t    "primary_expression : object_or_delegate_creation_expression",
//t    "primary_expression : anonymous_type_expression",
//t    "primary_expression : typeof_expression",
//t    "primary_expression : sizeof_expression",
//t    "primary_expression : checked_expression",
//t    "primary_expression : unchecked_expression",
//t    "primary_expression : pointer_member_access",
//t    "primary_expression : anonymous_method_expression",
//t    "primary_expression : undocumented_expressions",
//t    "primary_expression_or_type : IDENTIFIER opt_type_argument_list",
//t    "primary_expression_or_type : IDENTIFIER GENERATE_COMPLETION",
//t    "primary_expression_or_type : member_access",
//t    "literal : boolean_literal",
//t    "literal : LITERAL",
//t    "literal : NULL",
//t    "boolean_literal : TRUE",
//t    "boolean_literal : FALSE",
//t    "open_parens_any : OPEN_PARENS",
//t    "open_parens_any : OPEN_PARENS_CAST",
//t    "close_parens : CLOSE_PARENS",
//t    "close_parens : COMPLETE_COMPLETION",
//t    "parenthesized_expression : OPEN_PARENS expression CLOSE_PARENS",
//t    "parenthesized_expression : OPEN_PARENS expression COMPLETE_COMPLETION",
//t    "member_access : primary_expression DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : builtin_types DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : BASE DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : qualified_alias_member IDENTIFIER opt_type_argument_list",
//t    "member_access : primary_expression DOT GENERATE_COMPLETION",
//t    "member_access : primary_expression DOT IDENTIFIER GENERATE_COMPLETION",
//t    "member_access : builtin_types DOT GENERATE_COMPLETION",
//t    "member_access : builtin_types DOT IDENTIFIER GENERATE_COMPLETION",
//t    "invocation_expression : primary_expression open_parens_any opt_argument_list close_parens",
//t    "opt_object_or_collection_initializer :",
//t    "opt_object_or_collection_initializer : object_or_collection_initializer",
//t    "object_or_collection_initializer : OPEN_BRACE opt_member_initializer_list close_brace_or_complete_completion",
//t    "object_or_collection_initializer : OPEN_BRACE member_initializer_list COMMA CLOSE_BRACE",
//t    "opt_member_initializer_list :",
//t    "opt_member_initializer_list : member_initializer_list",
//t    "member_initializer_list : member_initializer",
//t    "member_initializer_list : member_initializer_list COMMA member_initializer",
//t    "member_initializer_list : member_initializer_list error",
//t    "member_initializer : IDENTIFIER ASSIGN initializer_value",
//t    "member_initializer : GENERATE_COMPLETION",
//t    "member_initializer : non_assignment_expression opt_COMPLETE_COMPLETION",
//t    "member_initializer : OPEN_BRACE expression_list CLOSE_BRACE",
//t    "member_initializer : OPEN_BRACE CLOSE_BRACE",
//t    "initializer_value : expression",
//t    "initializer_value : object_or_collection_initializer",
//t    "opt_argument_list :",
//t    "opt_argument_list : argument_list",
//t    "argument_list : argument_or_named_argument",
//t    "argument_list : argument_list COMMA argument",
//t    "argument_list : argument_list COMMA named_argument",
//t    "argument_list : argument_list COMMA",
//t    "argument_list : COMMA error",
//t    "argument : expression",
//t    "argument : non_simple_argument",
//t    "argument_or_named_argument : argument",
//t    "argument_or_named_argument : named_argument",
//t    "non_simple_argument : REF variable_reference",
//t    "non_simple_argument : OUT variable_reference",
//t    "non_simple_argument : ARGLIST OPEN_PARENS argument_list CLOSE_PARENS",
//t    "non_simple_argument : ARGLIST OPEN_PARENS CLOSE_PARENS",
//t    "variable_reference : expression",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "expression_list : expression",
//t    "expression_list : expression_list COMMA expression",
//t    "expression_list : expression_list error",
//t    "expression_list_arguments : expression_list_argument",
//t    "expression_list_arguments : expression_list_arguments COMMA expression_list_argument",
//t    "expression_list_argument : expression",
//t    "expression_list_argument : named_argument",
//t    "this_access : THIS",
//t    "base_access : BASE OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "base_access : BASE OPEN_BRACKET error",
//t    "post_increment_expression : primary_expression OP_INC",
//t    "post_decrement_expression : primary_expression OP_DEC",
//t    "object_or_delegate_creation_expression : NEW new_expr_type open_parens_any opt_argument_list CLOSE_PARENS opt_object_or_collection_initializer",
//t    "object_or_delegate_creation_expression : NEW new_expr_type object_or_collection_initializer",
//t    "array_creation_expression : NEW new_expr_type OPEN_BRACKET_EXPR expression_list CLOSE_BRACKET opt_rank_specifier opt_array_initializer",
//t    "array_creation_expression : NEW new_expr_type rank_specifiers opt_array_initializer",
//t    "array_creation_expression : NEW rank_specifier array_initializer",
//t    "array_creation_expression : NEW new_expr_type OPEN_BRACKET CLOSE_BRACKET OPEN_BRACKET_EXPR error CLOSE_BRACKET",
//t    "array_creation_expression : NEW new_expr_type error",
//t    "$$64 :",
//t    "new_expr_type : $$64 simple_type",
//t    "anonymous_type_expression : NEW OPEN_BRACE anonymous_type_parameters_opt_comma CLOSE_BRACE",
//t    "anonymous_type_parameters_opt_comma : anonymous_type_parameters_opt",
//t    "anonymous_type_parameters_opt_comma : anonymous_type_parameters COMMA",
//t    "anonymous_type_parameters_opt :",
//t    "anonymous_type_parameters_opt : anonymous_type_parameters",
//t    "anonymous_type_parameters : anonymous_type_parameter",
//t    "anonymous_type_parameters : anonymous_type_parameters COMMA anonymous_type_parameter",
//t    "anonymous_type_parameter : IDENTIFIER ASSIGN variable_initializer",
//t    "anonymous_type_parameter : IDENTIFIER",
//t    "anonymous_type_parameter : member_access",
//t    "anonymous_type_parameter : error",
//t    "opt_rank_specifier :",
//t    "opt_rank_specifier : rank_specifiers",
//t    "rank_specifiers : rank_specifier",
//t    "rank_specifiers : rank_specifier rank_specifiers",
//t    "rank_specifier : OPEN_BRACKET CLOSE_BRACKET",
//t    "rank_specifier : OPEN_BRACKET dim_separators CLOSE_BRACKET",
//t    "dim_separators : COMMA",
//t    "dim_separators : dim_separators COMMA",
//t    "opt_array_initializer :",
//t    "opt_array_initializer : array_initializer",
//t    "array_initializer : OPEN_BRACE CLOSE_BRACE",
//t    "array_initializer : OPEN_BRACE variable_initializer_list opt_comma CLOSE_BRACE",
//t    "variable_initializer_list : variable_initializer",
//t    "variable_initializer_list : variable_initializer_list COMMA variable_initializer",
//t    "$$65 :",
//t    "typeof_expression : TYPEOF $$65 open_parens_any typeof_type_expression CLOSE_PARENS",
//t    "typeof_type_expression : type_and_void",
//t    "typeof_type_expression : unbound_type_name",
//t    "typeof_type_expression : error",
//t    "unbound_type_name : IDENTIFIER generic_dimension",
//t    "unbound_type_name : qualified_alias_member IDENTIFIER generic_dimension",
//t    "unbound_type_name : unbound_type_name DOT IDENTIFIER",
//t    "unbound_type_name : unbound_type_name DOT IDENTIFIER generic_dimension",
//t    "unbound_type_name : namespace_or_type_name DOT IDENTIFIER generic_dimension",
//t    "generic_dimension : GENERIC_DIMENSION",
//t    "qualified_alias_member : IDENTIFIER DOUBLE_COLON",
//t    "sizeof_expression : SIZEOF open_parens_any type CLOSE_PARENS",
//t    "checked_expression : CHECKED open_parens_any expression CLOSE_PARENS",
//t    "unchecked_expression : UNCHECKED open_parens_any expression CLOSE_PARENS",
//t    "pointer_member_access : primary_expression OP_PTR IDENTIFIER opt_type_argument_list",
//t    "$$66 :",
//t    "anonymous_method_expression : DELEGATE opt_anonymous_method_signature $$66 block",
//t    "$$67 :",
//t    "anonymous_method_expression : ASYNC DELEGATE opt_anonymous_method_signature $$67 block",
//t    "opt_anonymous_method_signature :",
//t    "opt_anonymous_method_signature : anonymous_method_signature",
//t    "$$68 :",
//t    "anonymous_method_signature : OPEN_PARENS $$68 opt_formal_parameter_list CLOSE_PARENS",
//t    "default_value_expression : DEFAULT open_parens_any type CLOSE_PARENS",
//t    "unary_expression : primary_expression",
//t    "unary_expression : BANG prefixed_unary_expression",
//t    "unary_expression : TILDE prefixed_unary_expression",
//t    "unary_expression : cast_expression",
//t    "unary_expression : await_expression",
//t    "cast_expression : OPEN_PARENS_CAST type CLOSE_PARENS prefixed_unary_expression",
//t    "await_expression : AWAIT unary_expression",
//t    "prefixed_unary_expression : unary_expression",
//t    "prefixed_unary_expression : PLUS prefixed_unary_expression",
//t    "prefixed_unary_expression : MINUS prefixed_unary_expression",
//t    "prefixed_unary_expression : OP_INC prefixed_unary_expression",
//t    "prefixed_unary_expression : OP_DEC prefixed_unary_expression",
//t    "prefixed_unary_expression : STAR prefixed_unary_expression",
//t    "prefixed_unary_expression : BITWISE_AND prefixed_unary_expression",
//t    "multiplicative_expression : prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression STAR prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression DIV prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression PERCENT prefixed_unary_expression",
//t    "additive_expression : multiplicative_expression",
//t    "additive_expression : additive_expression PLUS multiplicative_expression",
//t    "additive_expression : additive_expression MINUS multiplicative_expression",
//t    "additive_expression : parenthesized_expression MINUS multiplicative_expression",
//t    "additive_expression : additive_expression AS type",
//t    "additive_expression : additive_expression IS type",
//t    "shift_expression : additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_LEFT additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_RIGHT additive_expression",
//t    "relational_expression : shift_expression",
//t    "relational_expression : relational_expression OP_LT shift_expression",
//t    "relational_expression : relational_expression OP_GT shift_expression",
//t    "relational_expression : relational_expression OP_LE shift_expression",
//t    "relational_expression : relational_expression OP_GE shift_expression",
//t    "equality_expression : relational_expression",
//t    "equality_expression : equality_expression OP_EQ relational_expression",
//t    "equality_expression : equality_expression OP_NE relational_expression",
//t    "and_expression : equality_expression",
//t    "and_expression : and_expression BITWISE_AND equality_expression",
//t    "exclusive_or_expression : and_expression",
//t    "exclusive_or_expression : exclusive_or_expression CARRET and_expression",
//t    "inclusive_or_expression : exclusive_or_expression",
//t    "inclusive_or_expression : inclusive_or_expression BITWISE_OR exclusive_or_expression",
//t    "conditional_and_expression : inclusive_or_expression",
//t    "conditional_and_expression : conditional_and_expression OP_AND inclusive_or_expression",
//t    "conditional_or_expression : conditional_and_expression",
//t    "conditional_or_expression : conditional_or_expression OP_OR conditional_and_expression",
//t    "null_coalescing_expression : conditional_or_expression",
//t    "null_coalescing_expression : conditional_or_expression OP_COALESCING null_coalescing_expression",
//t    "conditional_expression : null_coalescing_expression",
//t    "conditional_expression : null_coalescing_expression INTERR expression COLON expression",
//t    "assignment_expression : prefixed_unary_expression ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_MULT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_DIV_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_MOD_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_ADD_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SUB_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SHIFT_LEFT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SHIFT_RIGHT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_AND_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_OR_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_XOR_ASSIGN expression",
//t    "lambda_parameter_list : lambda_parameter",
//t    "lambda_parameter_list : lambda_parameter_list COMMA lambda_parameter",
//t    "lambda_parameter : parameter_modifier parameter_type IDENTIFIER",
//t    "lambda_parameter : parameter_type IDENTIFIER",
//t    "lambda_parameter : IDENTIFIER",
//t    "opt_lambda_parameter_list :",
//t    "opt_lambda_parameter_list : lambda_parameter_list",
//t    "lambda_expression_body : lambda_expression_body_simple",
//t    "lambda_expression_body : block",
//t    "$$69 :",
//t    "lambda_expression_body_simple : $$69 expression_or_error",
//t    "expression_or_error : expression",
//t    "expression_or_error : error",
//t    "$$70 :",
//t    "lambda_expression : IDENTIFIER ARROW $$70 lambda_expression_body",
//t    "$$71 :",
//t    "lambda_expression : ASYNC IDENTIFIER ARROW $$71 lambda_expression_body",
//t    "$$72 :",
//t    "$$73 :",
//t    "lambda_expression : OPEN_PARENS_LAMBDA $$72 opt_lambda_parameter_list CLOSE_PARENS ARROW $$73 lambda_expression_body",
//t    "$$74 :",
//t    "$$75 :",
//t    "lambda_expression : ASYNC OPEN_PARENS_LAMBDA $$74 opt_lambda_parameter_list CLOSE_PARENS ARROW $$75 lambda_expression_body",
//t    "expression : assignment_expression",
//t    "expression : non_assignment_expression",
//t    "non_assignment_expression : conditional_expression",
//t    "non_assignment_expression : lambda_expression",
//t    "non_assignment_expression : query_expression",
//t    "non_assignment_expression : ARGLIST",
//t    "undocumented_expressions : REFVALUE OPEN_PARENS non_assignment_expression COMMA type CLOSE_PARENS",
//t    "undocumented_expressions : REFTYPE open_parens_any expression CLOSE_PARENS",
//t    "undocumented_expressions : MAKEREF open_parens_any expression CLOSE_PARENS",
//t    "constant_expression : expression",
//t    "boolean_expression : expression",
//t    "$$76 :",
//t    "$$77 :",
//t    "$$78 :",
//t    "$$79 :",
//t    "class_declaration : opt_attributes opt_modifiers opt_partial CLASS $$76 type_declaration_name $$77 opt_class_base opt_type_parameter_constraints_clauses $$78 OPEN_BRACE opt_class_member_declarations CLOSE_BRACE $$79 opt_semicolon",
//t    "opt_partial :",
//t    "opt_partial : PARTIAL",
//t    "opt_modifiers :",
//t    "opt_modifiers : modifiers",
//t    "modifiers : modifier",
//t    "modifiers : modifiers modifier",
//t    "modifier : NEW",
//t    "modifier : PUBLIC",
//t    "modifier : PROTECTED",
//t    "modifier : INTERNAL",
//t    "modifier : PRIVATE",
//t    "modifier : ABSTRACT",
//t    "modifier : SEALED",
//t    "modifier : STATIC",
//t    "modifier : READONLY",
//t    "modifier : VIRTUAL",
//t    "modifier : OVERRIDE",
//t    "modifier : EXTERN",
//t    "modifier : VOLATILE",
//t    "modifier : UNSAFE",
//t    "modifier : ASYNC",
//t    "opt_class_base :",
//t    "opt_class_base : COLON type_list",
//t    "opt_type_parameter_constraints_clauses :",
//t    "opt_type_parameter_constraints_clauses : type_parameter_constraints_clauses",
//t    "opt_type_parameter_constraints_clauses : error",
//t    "type_parameter_constraints_clauses : type_parameter_constraints_clause",
//t    "type_parameter_constraints_clauses : type_parameter_constraints_clauses type_parameter_constraints_clause",
//t    "type_parameter_constraints_clause : WHERE IDENTIFIER COLON type_parameter_constraints",
//t    "type_parameter_constraints : type_parameter_constraint",
//t    "type_parameter_constraints : type_parameter_constraints COMMA type_parameter_constraint",
//t    "type_parameter_constraint : type",
//t    "type_parameter_constraint : NEW OPEN_PARENS CLOSE_PARENS",
//t    "type_parameter_constraint : CLASS",
//t    "type_parameter_constraint : STRUCT",
//t    "opt_type_parameter_variance :",
//t    "opt_type_parameter_variance : type_parameter_variance",
//t    "type_parameter_variance : OUT",
//t    "type_parameter_variance : IN",
//t    "$$80 :",
//t    "block : OPEN_BRACE $$80 opt_statement_list block_end",
//t    "block_end : CLOSE_BRACE",
//t    "block_end : COMPLETE_COMPLETION",
//t    "$$81 :",
//t    "block_prepared : OPEN_BRACE $$81 opt_statement_list CLOSE_BRACE",
//t    "opt_statement_list :",
//t    "opt_statement_list : statement_list",
//t    "statement_list : statement",
//t    "statement_list : statement_list statement",
//t    "statement : block_variable_declaration",
//t    "statement : valid_declaration_statement",
//t    "statement : labeled_statement",
//t    "statement : error",
//t    "interactive_statement_list : interactive_statement",
//t    "interactive_statement_list : interactive_statement_list interactive_statement",
//t    "interactive_statement : block_variable_declaration",
//t    "interactive_statement : interactive_valid_declaration_statement",
//t    "interactive_statement : labeled_statement",
//t    "valid_declaration_statement : block",
//t    "valid_declaration_statement : empty_statement",
//t    "valid_declaration_statement : expression_statement",
//t    "valid_declaration_statement : selection_statement",
//t    "valid_declaration_statement : iteration_statement",
//t    "valid_declaration_statement : jump_statement",
//t    "valid_declaration_statement : try_statement",
//t    "valid_declaration_statement : checked_statement",
//t    "valid_declaration_statement : unchecked_statement",
//t    "valid_declaration_statement : lock_statement",
//t    "valid_declaration_statement : using_statement",
//t    "valid_declaration_statement : unsafe_statement",
//t    "valid_declaration_statement : fixed_statement",
//t    "interactive_valid_declaration_statement : block",
//t    "interactive_valid_declaration_statement : empty_statement",
//t    "interactive_valid_declaration_statement : interactive_expression_statement",
//t    "interactive_valid_declaration_statement : selection_statement",
//t    "interactive_valid_declaration_statement : iteration_statement",
//t    "interactive_valid_declaration_statement : jump_statement",
//t    "interactive_valid_declaration_statement : try_statement",
//t    "interactive_valid_declaration_statement : checked_statement",
//t    "interactive_valid_declaration_statement : unchecked_statement",
//t    "interactive_valid_declaration_statement : lock_statement",
//t    "interactive_valid_declaration_statement : using_statement",
//t    "interactive_valid_declaration_statement : unsafe_statement",
//t    "interactive_valid_declaration_statement : fixed_statement",
//t    "embedded_statement : valid_declaration_statement",
//t    "embedded_statement : block_variable_declaration",
//t    "embedded_statement : labeled_statement",
//t    "embedded_statement : error",
//t    "empty_statement : SEMICOLON",
//t    "$$82 :",
//t    "labeled_statement : IDENTIFIER COLON $$82 statement",
//t    "variable_type : variable_type_simple",
//t    "variable_type : variable_type_simple rank_specifiers",
//t    "variable_type_simple : primary_expression_or_type opt_nullable",
//t    "variable_type_simple : primary_expression_or_type pointer_stars",
//t    "variable_type_simple : builtin_types opt_nullable",
//t    "variable_type_simple : builtin_types pointer_stars",
//t    "variable_type_simple : VOID pointer_stars",
//t    "variable_type_simple : VOID",
//t    "pointer_stars : pointer_star",
//t    "pointer_stars : pointer_star pointer_stars",
//t    "pointer_star : STAR",
//t    "$$83 :",
//t    "block_variable_declaration : variable_type IDENTIFIER $$83 opt_local_variable_initializer opt_variable_declarators SEMICOLON",
//t    "$$84 :",
//t    "block_variable_declaration : CONST variable_type IDENTIFIER $$84 const_variable_initializer opt_const_declarators SEMICOLON",
//t    "opt_local_variable_initializer :",
//t    "opt_local_variable_initializer : ASSIGN block_variable_initializer",
//t    "opt_local_variable_initializer : error",
//t    "opt_variable_declarators :",
//t    "opt_variable_declarators : variable_declarators",
//t    "variable_declarators : variable_declarator",
//t    "variable_declarators : variable_declarators variable_declarator",
//t    "variable_declarator : COMMA IDENTIFIER",
//t    "variable_declarator : COMMA IDENTIFIER ASSIGN block_variable_initializer",
//t    "const_variable_initializer :",
//t    "const_variable_initializer : ASSIGN constant_initializer_expr",
//t    "opt_const_declarators :",
//t    "opt_const_declarators : const_declarators",
//t    "const_declarators : const_declarator",
//t    "const_declarators : const_declarators const_declarator",
//t    "const_declarator : COMMA IDENTIFIER ASSIGN constant_initializer_expr",
//t    "block_variable_initializer : variable_initializer",
//t    "block_variable_initializer : STACKALLOC simple_type OPEN_BRACKET_EXPR expression CLOSE_BRACKET",
//t    "block_variable_initializer : STACKALLOC simple_type",
//t    "expression_statement : statement_expression SEMICOLON",
//t    "expression_statement : statement_expression COMPLETE_COMPLETION",
//t    "interactive_expression_statement : interactive_statement_expression SEMICOLON",
//t    "interactive_expression_statement : interactive_statement_expression COMPLETE_COMPLETION",
//t    "statement_expression : expression",
//t    "interactive_statement_expression : expression",
//t    "interactive_statement_expression : error",
//t    "selection_statement : if_statement",
//t    "selection_statement : switch_statement",
//t    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
//t    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement ELSE embedded_statement",
//t    "$$85 :",
//t    "switch_statement : SWITCH open_parens_any expression CLOSE_PARENS OPEN_BRACE $$85 opt_switch_sections CLOSE_BRACE",
//t    "opt_switch_sections :",
//t    "opt_switch_sections : switch_sections",
//t    "switch_sections : switch_section",
//t    "switch_sections : switch_sections switch_section",
//t    "switch_sections : error",
//t    "$$86 :",
//t    "switch_section : switch_labels $$86 statement_list",
//t    "switch_labels : switch_label",
//t    "switch_labels : switch_labels switch_label",
//t    "switch_label : CASE constant_expression COLON",
//t    "switch_label : DEFAULT_COLON",
//t    "iteration_statement : while_statement",
//t    "iteration_statement : do_statement",
//t    "iteration_statement : for_statement",
//t    "iteration_statement : foreach_statement",
//t    "while_statement : WHILE open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
//t    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression CLOSE_PARENS SEMICOLON",
//t    "$$87 :",
//t    "for_statement : FOR open_parens_any $$87 for_statement_cont",
//t    "for_statement_cont : opt_for_initializer SEMICOLON opt_for_condition SEMICOLON opt_for_iterator CLOSE_PARENS embedded_statement",
//t    "for_statement_cont : error",
//t    "opt_for_initializer :",
//t    "opt_for_initializer : for_initializer",
//t    "$$88 :",
//t    "for_initializer : variable_type IDENTIFIER $$88 opt_local_variable_initializer opt_variable_declarators",
//t    "for_initializer : statement_expression_list",
//t    "opt_for_condition :",
//t    "opt_for_condition : boolean_expression",
//t    "opt_for_iterator :",
//t    "opt_for_iterator : for_iterator",
//t    "for_iterator : statement_expression_list",
//t    "statement_expression_list : statement_expression",
//t    "statement_expression_list : statement_expression_list COMMA statement_expression",
//t    "foreach_statement : FOREACH open_parens_any type IN expression CLOSE_PARENS",
//t    "$$89 :",
//t    "foreach_statement : FOREACH open_parens_any type IDENTIFIER IN expression CLOSE_PARENS $$89 embedded_statement",
//t    "jump_statement : break_statement",
//t    "jump_statement : continue_statement",
//t    "jump_statement : goto_statement",
//t    "jump_statement : return_statement",
//t    "jump_statement : throw_statement",
//t    "jump_statement : yield_statement",
//t    "break_statement : BREAK SEMICOLON",
//t    "continue_statement : CONTINUE SEMICOLON",
//t    "goto_statement : GOTO IDENTIFIER SEMICOLON",
//t    "goto_statement : GOTO CASE constant_expression SEMICOLON",
//t    "goto_statement : GOTO DEFAULT SEMICOLON",
//t    "return_statement : RETURN opt_expression SEMICOLON",
//t    "throw_statement : THROW opt_expression SEMICOLON",
//t    "yield_statement : IDENTIFIER RETURN opt_expression SEMICOLON",
//t    "yield_statement : IDENTIFIER BREAK SEMICOLON",
//t    "opt_expression :",
//t    "opt_expression : expression",
//t    "try_statement : TRY block catch_clauses",
//t    "try_statement : TRY block FINALLY block",
//t    "try_statement : TRY block catch_clauses FINALLY block",
//t    "try_statement : TRY block error",
//t    "catch_clauses : catch_clause",
//t    "catch_clauses : catch_clauses catch_clause",
//t    "opt_identifier :",
//t    "opt_identifier : IDENTIFIER",
//t    "catch_clause : CATCH block",
//t    "$$90 :",
//t    "catch_clause : CATCH open_parens_any type opt_identifier CLOSE_PARENS $$90 block_prepared",
//t    "catch_clause : CATCH open_parens_any error",
//t    "checked_statement : CHECKED block",
//t    "unchecked_statement : UNCHECKED block",
//t    "$$91 :",
//t    "unsafe_statement : UNSAFE $$91 block",
//t    "lock_statement : LOCK open_parens_any expression CLOSE_PARENS embedded_statement",
//t    "$$92 :",
//t    "$$93 :",
//t    "fixed_statement : FIXED open_parens_any variable_type IDENTIFIER $$92 using_or_fixed_variable_initializer opt_variable_declarators CLOSE_PARENS $$93 embedded_statement",
//t    "$$94 :",
//t    "$$95 :",
//t    "using_statement : USING open_parens_any variable_type IDENTIFIER $$94 using_or_fixed_variable_initializer opt_variable_declarators CLOSE_PARENS $$95 embedded_statement",
//t    "using_statement : USING open_parens_any expression CLOSE_PARENS embedded_statement",
//t    "using_or_fixed_variable_initializer :",
//t    "using_or_fixed_variable_initializer : ASSIGN variable_initializer",
//t    "query_expression : first_from_clause query_body",
//t    "query_expression : nested_from_clause query_body",
//t    "query_expression : first_from_clause COMPLETE_COMPLETION",
//t    "query_expression : nested_from_clause COMPLETE_COMPLETION",
//t    "first_from_clause : FROM_FIRST IDENTIFIER IN expression",
//t    "first_from_clause : FROM_FIRST type IDENTIFIER IN expression",
//t    "nested_from_clause : FROM IDENTIFIER IN expression",
//t    "nested_from_clause : FROM type IDENTIFIER IN expression",
//t    "$$96 :",
//t    "from_clause : FROM IDENTIFIER IN $$96 expression",
//t    "$$97 :",
//t    "from_clause : FROM type IDENTIFIER IN $$97 expression",
//t    "query_body : opt_query_body_clauses select_or_group_clause opt_query_continuation",
//t    "query_body : opt_query_body_clauses COMPLETE_COMPLETION",
//t    "query_body : error",
//t    "$$98 :",
//t    "select_or_group_clause : SELECT $$98 expression",
//t    "$$99 :",
//t    "$$100 :",
//t    "select_or_group_clause : GROUP $$99 expression $$100 BY expression",
//t    "opt_query_body_clauses :",
//t    "opt_query_body_clauses : query_body_clauses",
//t    "query_body_clauses : query_body_clause",
//t    "query_body_clauses : query_body_clauses query_body_clause",
//t    "query_body_clause : from_clause",
//t    "query_body_clause : let_clause",
//t    "query_body_clause : where_clause",
//t    "query_body_clause : join_clause",
//t    "query_body_clause : orderby_clause",
//t    "$$101 :",
//t    "let_clause : LET IDENTIFIER ASSIGN $$101 expression",
//t    "$$102 :",
//t    "where_clause : WHERE $$102 expression",
//t    "$$103 :",
//t    "$$104 :",
//t    "$$105 :",
//t    "join_clause : JOIN IDENTIFIER IN $$103 expression ON $$104 expression EQUALS $$105 expression opt_join_into",
//t    "$$106 :",
//t    "$$107 :",
//t    "$$108 :",
//t    "join_clause : JOIN type IDENTIFIER IN $$106 expression ON $$107 expression EQUALS $$108 expression opt_join_into",
//t    "opt_join_into :",
//t    "opt_join_into : INTO IDENTIFIER",
//t    "$$109 :",
//t    "orderby_clause : ORDERBY $$109 orderings",
//t    "orderings : order_by",
//t    "$$110 :",
//t    "orderings : order_by COMMA $$110 orderings_then_by",
//t    "orderings_then_by : then_by",
//t    "$$111 :",
//t    "orderings_then_by : orderings_then_by COMMA $$111 then_by",
//t    "order_by : expression",
//t    "order_by : expression ASCENDING",
//t    "order_by : expression DESCENDING",
//t    "then_by : expression",
//t    "then_by : expression ASCENDING",
//t    "then_by : expression DESCENDING",
//t    "opt_query_continuation :",
//t    "$$112 :",
//t    "opt_query_continuation : INTO IDENTIFIER $$112 query_body",
//t    "interactive_parsing : EVAL_STATEMENT_PARSER EOF",
//t    "interactive_parsing : EVAL_USING_DECLARATIONS_UNIT_PARSER using_directives opt_COMPLETE_COMPLETION",
//t    "$$113 :",
//t    "interactive_parsing : EVAL_STATEMENT_PARSER $$113 interactive_statement_list opt_COMPLETE_COMPLETION",
//t    "interactive_parsing : EVAL_COMPILATION_UNIT_PARSER interactive_compilation_unit",
//t    "interactive_compilation_unit : opt_extern_alias_directives opt_using_directives",
//t    "interactive_compilation_unit : opt_extern_alias_directives opt_using_directives namespace_or_type_declarations",
//t    "opt_COMPLETE_COMPLETION :",
//t    "opt_COMPLETE_COMPLETION : COMPLETE_COMPLETION",
//t    "close_brace_or_complete_completion : CLOSE_BRACE",
//t    "close_brace_or_complete_completion : COMPLETE_COMPLETION",
//t    "documentation_parsing : DOC_SEE doc_cref",
//t    "doc_cref : doc_type_declaration_name opt_doc_method_sig",
//t    "doc_cref : builtin_types opt_doc_method_sig",
//t    "doc_cref : builtin_types DOT IDENTIFIER opt_doc_method_sig",
//t    "doc_cref : doc_type_declaration_name DOT THIS",
//t    "$$114 :",
//t    "doc_cref : doc_type_declaration_name DOT THIS OPEN_BRACKET $$114 opt_doc_parameters CLOSE_BRACKET",
//t    "doc_cref : EXPLICIT OPERATOR type opt_doc_method_sig",
//t    "doc_cref : IMPLICIT OPERATOR type opt_doc_method_sig",
//t    "doc_cref : OPERATOR overloadable_operator opt_doc_method_sig",
//t    "doc_type_declaration_name : type_declaration_name",
//t    "doc_type_declaration_name : doc_type_declaration_name DOT type_declaration_name",
//t    "opt_doc_method_sig :",
//t    "$$115 :",
//t    "opt_doc_method_sig : OPEN_PARENS $$115 opt_doc_parameters CLOSE_PARENS",
//t    "opt_doc_parameters :",
//t    "opt_doc_parameters : doc_parameters",
//t    "doc_parameters : doc_parameter",
//t    "doc_parameters : doc_parameters COMMA doc_parameter",
//t    "doc_parameter : opt_parameter_modifier parameter_type",
//t  };
//t public static string getRule (int index) {
//t    return yyRule [index];
//t }
//t}
  protected static readonly string [] yyNames = {    
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"EOF","NONE","ERROR",
    "FIRST_KEYWORD","ABSTRACT","AS","ADD","BASE","BOOL","BREAK","BYTE",
    "CASE","CATCH","CHAR","CHECKED","CLASS","CONST","CONTINUE","DECIMAL",
    "DEFAULT","DELEGATE","DO","DOUBLE","ELSE","ENUM","EVENT","EXPLICIT",
    "EXTERN","FALSE","FINALLY","FIXED","FLOAT","FOR","FOREACH","GOTO",
    "IF","IMPLICIT","IN","INT","INTERFACE","INTERNAL","IS","LOCK","LONG",
    "NAMESPACE","NEW","NULL","OBJECT","OPERATOR","OUT","OVERRIDE",
    "PARAMS","PRIVATE","PROTECTED","PUBLIC","READONLY","REF","RETURN",
    "REMOVE","SBYTE","SEALED","SHORT","SIZEOF","STACKALLOC","STATIC",
    "STRING","STRUCT","SWITCH","THIS","THROW","TRUE","TRY","TYPEOF",
    "UINT","ULONG","UNCHECKED","UNSAFE","USHORT","USING","VIRTUAL","VOID",
    "VOLATILE","WHERE","WHILE","ARGLIST","PARTIAL","ARROW","FROM",
    "FROM_FIRST","JOIN","ON","EQUALS","SELECT","GROUP","BY","LET",
    "ORDERBY","ASCENDING","DESCENDING","INTO","INTERR_NULLABLE",
    "EXTERN_ALIAS","REFVALUE","REFTYPE","MAKEREF","ASYNC","AWAIT","GET",
    "SET","LAST_KEYWORD","OPEN_BRACE","CLOSE_BRACE","OPEN_BRACKET",
    "CLOSE_BRACKET","OPEN_PARENS","CLOSE_PARENS","DOT","COMMA","COLON",
    "SEMICOLON","TILDE","PLUS","MINUS","BANG","ASSIGN","OP_LT","OP_GT",
    "BITWISE_AND","BITWISE_OR","STAR","PERCENT","DIV","CARRET","INTERR",
    "DOUBLE_COLON","OP_INC","OP_DEC","OP_SHIFT_LEFT","OP_SHIFT_RIGHT",
    "OP_LE","OP_GE","OP_EQ","OP_NE","OP_AND","OP_OR","OP_MULT_ASSIGN",
    "OP_DIV_ASSIGN","OP_MOD_ASSIGN","OP_ADD_ASSIGN","OP_SUB_ASSIGN",
    "OP_SHIFT_LEFT_ASSIGN","OP_SHIFT_RIGHT_ASSIGN","OP_AND_ASSIGN",
    "OP_XOR_ASSIGN","OP_OR_ASSIGN","OP_PTR","OP_COALESCING",
    "OP_GENERICS_LT","OP_GENERICS_LT_DECL","OP_GENERICS_GT","LITERAL",
    "IDENTIFIER","OPEN_PARENS_LAMBDA","OPEN_PARENS_CAST",
    "GENERIC_DIMENSION","DEFAULT_COLON","OPEN_BRACKET_EXPR",
    "EVAL_STATEMENT_PARSER","EVAL_COMPILATION_UNIT_PARSER",
    "EVAL_USING_DECLARATIONS_UNIT_PARSER","DOC_SEE","GENERATE_COMPLETION",
    "COMPLETE_COMPLETION","UMINUS",
  };

  /** index-checked interface to yyNames[].
      @param token single character or %token value.
      @return token name or [illegal] or [unknown].
    */
//t  public static string yyname (int token) {
//t    if ((token < 0) || (token > yyNames.Length)) return "[illegal]";
//t    string name;
//t    if ((name = yyNames[token]) != null) return name;
//t    return "[unknown]";
//t  }

  int yyExpectingState;
  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected int [] yyExpectingTokens (int state){
    int token, n, len = 0;
    bool[] ok = new bool[yyNames.Length];
    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    int [] result = new int [len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = token;
    return result;
  }
  protected string[] yyExpecting (int state) {
    int [] tokens = yyExpectingTokens (state);
    string [] result = new string[tokens.Length];
    for (int n = 0; n < tokens.Length;  n++)
      result[n++] = yyNames[tokens [n]];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @param yydebug debug message writer implementing yyDebug, or null.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex, Object yyd)
				 {
//t    this.debug = (yydebug.yyDebug)yyd;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of yyparse().
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as $$ = yyDefault($1), prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for $1, or null.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

	static int[] global_yyStates;
	static object[] global_yyVals;
	protected bool use_global_stacks;
	object[] yyVals;					// value stack
	object yyVal;						// value stack ptr
	int yyToken;						// current input
	int yyTop;

  /** the generated parser.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex)
  {
    if (yyMax <= 0) yyMax = 256;		// initial size
    int yyState = 0;                   // state stack ptr
    int [] yyStates;               	// state stack 
    yyVal = null;
    yyToken = -1;
    int yyErrorFlag = 0;				// #tks to shift
	if (use_global_stacks && global_yyStates != null) {
		yyVals = global_yyVals;
		yyStates = global_yyStates;
   } else {
		yyVals = new object [yyMax];
		yyStates = new int [yyMax];
		if (use_global_stacks) {
			global_yyVals = yyVals;
			global_yyStates = yyStates;
		}
	}

    /*yyLoop:*/ for (yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.Length) {			// dynamically increase
        global::System.Array.Resize (ref yyStates, yyStates.Length+yyMax);
        global::System.Array.Resize (ref yyVals, yyVals.Length+yyMax);
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
//t      if (debug != null) debug.push(yyState, yyVal);

      /*yyDiscarded:*/ while (true) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t              debug.lex(yyState, yyToken, yyname(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && ((yyN += yyToken) >= 0)
              && (yyN < yyTable.Length) && (yyCheck[yyN] == yyToken)) {
//t            if (debug != null)
//t              debug.shift(yyState, yyTable[yyN], yyErrorFlag-1);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            goto continue_yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.Length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              yyExpectingState = yyState;
              // yyerror(String.Format ("syntax error, got token `{0}'", yyname (yyToken)), yyExpecting(yyState));
//t              if (debug != null) debug.error("syntax error");
              if (yyToken == 0 /*eof*/ || yyToken == eof_token) throw new yyParser.yyUnexpectedEof ();
              goto case 1;
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += Token.yyErrorCode) >= 0 && yyN < yyTable.Length
                    && yyCheck[yyN] == Token.yyErrorCode) {
//t                  if (debug != null)
//t                    debug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  goto continue_yyLoop;
                }
//t                if (debug != null) debug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
//t              if (debug != null) debug.reject();
              throw new yyParser.yyException("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
//t                if (debug != null) debug.reject();
                throw new yyParser.yyException("irrecoverable syntax error at end-of-file");
              }
//t              if (debug != null)
//t                debug.discard(yyState, yyToken, yyname(yyToken),
//t  							yyLex.value());
              yyToken = -1;
              goto continue_yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
//t        if (debug != null)
//t          debug.reduce(yyState, yyStates[yyV-1], yyN, YYRules.getRule (yyN), yyLen[yyN]);
        yyVal = yyV > yyTop ? null : yyVals[yyV]; // yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        switch (yyN) {
case 1:
#line 395 "cs-parser.jay"
  {
		Lexer.check_incorrect_doc_comment ();
	  }
  break;
case 2:
#line 396 "cs-parser.jay"
  { Lexer.CompleteOnEOF = false; }
  break;
case 6:
  case_6();
  break;
case 7:
#line 413 "cs-parser.jay"
  {
		module.AddAttributes ((Attributes) yyVals[0+yyTop], current_namespace);
	  }
  break;
case 8:
  case_8();
  break;
case 13:
  case_13();
  break;
case 14:
#line 451 "cs-parser.jay"
  {
	  	syntax_error (GetLocation (yyVals[-1+yyTop]), "`alias' expected");   /* TODO: better*/
	  }
  break;
case 17:
  case_17();
  break;
case 18:
  case_18();
  break;
case 19:
  case_19();
  break;
case 20:
  case_20();
  break;
case 21:
  case_21();
  break;
case 22:
  case_22();
  break;
case 23:
  case_23();
  break;
case 24:
  case_24();
  break;
case 25:
  case_25();
  break;
case 26:
  case_26();
  break;
case 27:
  case_27();
  break;
case 32:
  case_32();
  break;
case 41:
  case_41();
  break;
case 42:
#line 640 "cs-parser.jay"
  {
		current_namespace.DeclarationFound = true;
	  }
  break;
case 50:
  case_50();
  break;
case 51:
  case_51();
  break;
case 52:
  case_52();
  break;
case 53:
  case_53();
  break;
case 54:
  case_54();
  break;
case 55:
  case_55();
  break;
case 56:
  case_56();
  break;
case 57:
  case_57();
  break;
case 58:
#line 733 "cs-parser.jay"
  { yyVal = "event"; }
  break;
case 59:
#line 734 "cs-parser.jay"
  { yyVal = "return"; }
  break;
case 60:
  case_60();
  break;
case 61:
#line 751 "cs-parser.jay"
  {
		yyVal = new List<Attribute> (4) { (Attribute) yyVals[0+yyTop] };
	  }
  break;
case 62:
  case_62();
  break;
case 63:
#line 765 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 64:
  case_64();
  break;
case 66:
#line 789 "cs-parser.jay"
  { yyVal = null; }
  break;
case 67:
  case_67();
  break;
case 68:
#line 800 "cs-parser.jay"
  { yyVal = null; }
  break;
case 69:
  case_69();
  break;
case 70:
  case_70();
  break;
case 71:
  case_71();
  break;
case 72:
  case_72();
  break;
case 73:
#line 844 "cs-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 75:
#line 852 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 76:
  case_76();
  break;
case 77:
  case_77();
  break;
case 78:
#line 877 "cs-parser.jay"
  { yyVal = null; }
  break;
case 79:
#line 881 "cs-parser.jay"
  { 
		yyVal = Argument.AType.Ref;
	  }
  break;
case 80:
#line 885 "cs-parser.jay"
  { 
		yyVal = Argument.AType.Out;
	  }
  break;
case 95:
  case_95();
  break;
case 96:
#line 926 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 97:
  case_97();
  break;
case 98:
  case_98();
  break;
case 99:
  case_99();
  break;
case 100:
  case_100();
  break;
case 101:
#line 958 "cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 102:
  case_102();
  break;
case 103:
#line 970 "cs-parser.jay"
  {
		lbag.AppendToMember (current_class, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 118:
  case_118();
  break;
case 119:
  case_119();
  break;
case 122:
#line 1039 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 123:
#line 1043 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 124:
  case_124();
  break;
case 125:
#line 1059 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 126:
  case_126();
  break;
case 127:
  case_127();
  break;
case 130:
  case_130();
  break;
case 131:
  case_131();
  break;
case 132:
  case_132();
  break;
case 133:
  case_133();
  break;
case 134:
#line 1138 "cs-parser.jay"
  {
		report.Error (1641, GetLocation (yyVals[-1+yyTop]), "A fixed size buffer field must have the array size specifier after the field name");
	  }
  break;
case 136:
  case_136();
  break;
case 137:
  case_137();
  break;
case 140:
#line 1168 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 141:
#line 1172 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 142:
  case_142();
  break;
case 143:
#line 1185 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 144:
  case_144();
  break;
case 147:
#line 1204 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 148:
#line 1208 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 149:
  case_149();
  break;
case 150:
#line 1224 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 151:
  case_151();
  break;
case 152:
  case_152();
  break;
case 155:
  case_155();
  break;
case 156:
  case_156();
  break;
case 157:
  case_157();
  break;
case 158:
#line 1291 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 159:
#line 1295 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 160:
  case_160();
  break;
case 161:
#line 1335 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 162:
  case_162();
  break;
case 163:
#line 1345 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 164:
  case_164();
  break;
case 165:
  case_165();
  break;
case 167:
#line 1419 "cs-parser.jay"
  { yyVal = null; }
  break;
case 168:
#line 1423 "cs-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 170:
  case_170();
  break;
case 171:
  case_171();
  break;
case 172:
  case_172();
  break;
case 173:
  case_173();
  break;
case 174:
  case_174();
  break;
case 175:
  case_175();
  break;
case 176:
  case_176();
  break;
case 177:
#line 1482 "cs-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[0+yyTop] } );
	  }
  break;
case 178:
#line 1486 "cs-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter [] { new ArglistParameter (GetLocation (yyVals[0+yyTop])) }, true);
	  }
  break;
case 179:
  case_179();
  break;
case 180:
  case_180();
  break;
case 181:
  case_181();
  break;
case 182:
  case_182();
  break;
case 183:
  case_183();
  break;
case 184:
  case_184();
  break;
case 185:
#line 1561 "cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 186:
  case_186();
  break;
case 187:
#line 1602 "cs-parser.jay"
  { yyVal = Parameter.Modifier.NONE; }
  break;
case 189:
  case_189();
  break;
case 190:
  case_190();
  break;
case 191:
  case_191();
  break;
case 192:
  case_192();
  break;
case 193:
  case_193();
  break;
case 194:
  case_194();
  break;
case 195:
  case_195();
  break;
case 196:
  case_196();
  break;
case 197:
  case_197();
  break;
case 198:
  case_198();
  break;
case 199:
#line 1700 "cs-parser.jay"
  {
		Error_DuplicateParameterModifier (GetLocation (yyVals[-1+yyTop]), Parameter.Modifier.PARAMS);
	  }
  break;
case 200:
  case_200();
  break;
case 201:
  case_201();
  break;
case 202:
  case_202();
  break;
case 203:
  case_203();
  break;
case 204:
  case_204();
  break;
case 205:
#line 1754 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 206:
  case_206();
  break;
case 207:
#line 1783 "cs-parser.jay"
  {
		lexer.PropertyParsing = false;
	  }
  break;
case 208:
  case_208();
  break;
case 213:
  case_213();
  break;
case 214:
  case_214();
  break;
case 215:
  case_215();
  break;
case 216:
  case_216();
  break;
case 217:
  case_217();
  break;
case 219:
  case_219();
  break;
case 220:
  case_220();
  break;
case 221:
#line 1928 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 222:
  case_222();
  break;
case 223:
  case_223();
  break;
case 224:
  case_224();
  break;
case 225:
  case_225();
  break;
case 226:
#line 1961 "cs-parser.jay"
  {
		Error_SyntaxError (yyToken);	  
	  }
  break;
case 231:
#line 1978 "cs-parser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 232:
#line 1982 "cs-parser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 237:
#line 1990 "cs-parser.jay"
  {
	  	report.Error (567, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain operators");
	  }
  break;
case 238:
#line 1994 "cs-parser.jay"
  {
	  	report.Error (526, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain contructors");
	  }
  break;
case 239:
#line 1998 "cs-parser.jay"
  {
	  	report.Error (524, GetLocation (yyVals[0+yyTop]), "Interfaces cannot declare classes, structs, interfaces, delegates, or enumerations");
	  }
  break;
case 240:
#line 2004 "cs-parser.jay"
  {
	  }
  break;
case 241:
  case_241();
  break;
case 243:
#line 2034 "cs-parser.jay"
  { yyVal = null; }
  break;
case 245:
  case_245();
  break;
case 246:
#line 2050 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 247:
  case_247();
  break;
case 249:
#line 2096 "cs-parser.jay"
  { yyVal = Operator.OpType.LogicalNot; }
  break;
case 250:
#line 2097 "cs-parser.jay"
  { yyVal = Operator.OpType.OnesComplement; }
  break;
case 251:
#line 2098 "cs-parser.jay"
  { yyVal = Operator.OpType.Increment; }
  break;
case 252:
#line 2099 "cs-parser.jay"
  { yyVal = Operator.OpType.Decrement; }
  break;
case 253:
#line 2100 "cs-parser.jay"
  { yyVal = Operator.OpType.True; }
  break;
case 254:
#line 2101 "cs-parser.jay"
  { yyVal = Operator.OpType.False; }
  break;
case 255:
#line 2103 "cs-parser.jay"
  { yyVal = Operator.OpType.Addition; }
  break;
case 256:
#line 2104 "cs-parser.jay"
  { yyVal = Operator.OpType.Subtraction; }
  break;
case 257:
#line 2106 "cs-parser.jay"
  { yyVal = Operator.OpType.Multiply; }
  break;
case 258:
#line 2107 "cs-parser.jay"
  {  yyVal = Operator.OpType.Division; }
  break;
case 259:
#line 2108 "cs-parser.jay"
  { yyVal = Operator.OpType.Modulus; }
  break;
case 260:
#line 2109 "cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseAnd; }
  break;
case 261:
#line 2110 "cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseOr; }
  break;
case 262:
#line 2111 "cs-parser.jay"
  { yyVal = Operator.OpType.ExclusiveOr; }
  break;
case 263:
#line 2112 "cs-parser.jay"
  { yyVal = Operator.OpType.LeftShift; }
  break;
case 264:
#line 2113 "cs-parser.jay"
  { yyVal = Operator.OpType.RightShift; }
  break;
case 265:
#line 2114 "cs-parser.jay"
  { yyVal = Operator.OpType.Equality; }
  break;
case 266:
#line 2115 "cs-parser.jay"
  { yyVal = Operator.OpType.Inequality; }
  break;
case 267:
#line 2116 "cs-parser.jay"
  { yyVal = Operator.OpType.GreaterThan; }
  break;
case 268:
#line 2117 "cs-parser.jay"
  { yyVal = Operator.OpType.LessThan; }
  break;
case 269:
#line 2118 "cs-parser.jay"
  { yyVal = Operator.OpType.GreaterThanOrEqual; }
  break;
case 270:
#line 2119 "cs-parser.jay"
  { yyVal = Operator.OpType.LessThanOrEqual; }
  break;
case 271:
#line 2126 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 272:
  case_272();
  break;
case 273:
#line 2145 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 274:
  case_274();
  break;
case 275:
  case_275();
  break;
case 276:
  case_276();
  break;
case 277:
  case_277();
  break;
case 278:
  case_278();
  break;
case 279:
  case_279();
  break;
case 280:
  case_280();
  break;
case 282:
#line 2248 "cs-parser.jay"
  { current_block = null; yyVal = null; }
  break;
case 285:
#line 2260 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 286:
  case_286();
  break;
case 287:
#line 2270 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 288:
  case_288();
  break;
case 289:
  case_289();
  break;
case 290:
  case_290();
  break;
case 291:
  case_291();
  break;
case 292:
  case_292();
  break;
case 293:
  case_293();
  break;
case 294:
  case_294();
  break;
case 295:
  case_295();
  break;
case 296:
  case_296();
  break;
case 298:
#line 2379 "cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 299:
  case_299();
  break;
case 302:
#line 2396 "cs-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 303:
#line 2400 "cs-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 304:
  case_304();
  break;
case 305:
#line 2413 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 306:
  case_306();
  break;
case 307:
  case_307();
  break;
case 308:
#line 2438 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 311:
  case_311();
  break;
case 312:
  case_312();
  break;
case 313:
  case_313();
  break;
case 314:
  case_314();
  break;
case 315:
  case_315();
  break;
case 316:
  case_316();
  break;
case 317:
  case_317();
  break;
case 318:
  case_318();
  break;
case 320:
  case_320();
  break;
case 321:
  case_321();
  break;
case 322:
  case_322();
  break;
case 323:
  case_323();
  break;
case 325:
  case_325();
  break;
case 326:
  case_326();
  break;
case 329:
#line 2593 "cs-parser.jay"
  {
	  	lbag.AddLocation (yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 331:
  case_331();
  break;
case 332:
  case_332();
  break;
case 333:
  case_333();
  break;
case 334:
  case_334();
  break;
case 335:
#line 2651 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out | ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 336:
  case_336();
  break;
case 337:
#line 2673 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;
	  }
  break;
case 338:
  case_338();
  break;
case 340:
  case_340();
  break;
case 342:
  case_342();
  break;
case 344:
  case_344();
  break;
case 345:
  case_345();
  break;
case 347:
  case_347();
  break;
case 348:
  case_348();
  break;
case 349:
  case_349();
  break;
case 350:
  case_350();
  break;
case 351:
#line 2777 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 352:
  case_352();
  break;
case 353:
  case_353();
  break;
case 355:
  case_355();
  break;
case 356:
  case_356();
  break;
case 357:
  case_357();
  break;
case 358:
  case_358();
  break;
case 359:
  case_359();
  break;
case 360:
  case_360();
  break;
case 362:
  case_362();
  break;
case 363:
  case_363();
  break;
case 364:
  case_364();
  break;
case 365:
  case_365();
  break;
case 366:
  case_366();
  break;
case 368:
#line 2895 "cs-parser.jay"
  {
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 369:
#line 2902 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 371:
  case_371();
  break;
case 373:
  case_373();
  break;
case 375:
  case_375();
  break;
case 377:
#line 2940 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 378:
  case_378();
  break;
case 379:
#line 2960 "cs-parser.jay"
  {
		yyVal = new ComposedCast (((MemberName) yyVals[-1+yyTop]).GetTypeExpression (), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 380:
  case_380();
  break;
case 381:
#line 2969 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 382:
#line 2973 "cs-parser.jay"
  {
		yyVal = new ComposedCast (new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop])), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 383:
  case_383();
  break;
case 384:
  case_384();
  break;
case 385:
  case_385();
  break;
case 386:
  case_386();
  break;
case 387:
#line 3011 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Object, GetLocation (yyVals[0+yyTop])); }
  break;
case 388:
#line 3012 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.String, GetLocation (yyVals[0+yyTop])); }
  break;
case 389:
#line 3013 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Bool, GetLocation (yyVals[0+yyTop])); }
  break;
case 390:
#line 3014 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Decimal, GetLocation (yyVals[0+yyTop])); }
  break;
case 391:
#line 3015 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Float, GetLocation (yyVals[0+yyTop])); }
  break;
case 392:
#line 3016 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Double, GetLocation (yyVals[0+yyTop])); }
  break;
case 394:
#line 3021 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.SByte, GetLocation (yyVals[0+yyTop])); }
  break;
case 395:
#line 3022 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Byte, GetLocation (yyVals[0+yyTop])); }
  break;
case 396:
#line 3023 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Short, GetLocation (yyVals[0+yyTop])); }
  break;
case 397:
#line 3024 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.UShort, GetLocation (yyVals[0+yyTop])); }
  break;
case 398:
#line 3025 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Int, GetLocation (yyVals[0+yyTop])); }
  break;
case 399:
#line 3026 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.UInt, GetLocation (yyVals[0+yyTop])); }
  break;
case 400:
#line 3027 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Long, GetLocation (yyVals[0+yyTop])); }
  break;
case 401:
#line 3028 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.ULong, GetLocation (yyVals[0+yyTop])); }
  break;
case 402:
#line 3029 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Char, GetLocation (yyVals[0+yyTop])); }
  break;
case 423:
  case_423();
  break;
case 424:
  case_424();
  break;
case 428:
#line 3076 "cs-parser.jay"
  { yyVal = new NullLiteral (GetLocation (yyVals[0+yyTop])); }
  break;
case 429:
#line 3080 "cs-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, true, GetLocation (yyVals[0+yyTop])); }
  break;
case 430:
#line 3081 "cs-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, false, GetLocation (yyVals[0+yyTop])); }
  break;
case 435:
  case_435();
  break;
case 436:
#line 3114 "cs-parser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop]);
	  }
  break;
case 437:
  case_437();
  break;
case 438:
  case_438();
  break;
case 439:
  case_439();
  break;
case 440:
  case_440();
  break;
case 441:
#line 3146 "cs-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null,GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 442:
  case_442();
  break;
case 443:
#line 3154 "cs-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null, lexer.Location);
	  }
  break;
case 444:
  case_444();
  break;
case 445:
  case_445();
  break;
case 446:
#line 3170 "cs-parser.jay"
  { yyVal = null; }
  break;
case 448:
  case_448();
  break;
case 449:
  case_449();
  break;
case 450:
#line 3193 "cs-parser.jay"
  { yyVal = null; }
  break;
case 451:
#line 3197 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	}
  break;
case 452:
  case_452();
  break;
case 453:
  case_453();
  break;
case 454:
  case_454();
  break;
case 455:
  case_455();
  break;
case 456:
#line 3229 "cs-parser.jay"
  {
		yyVal = new CompletionElementInitializer (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 457:
  case_457();
  break;
case 458:
  case_458();
  break;
case 459:
  case_459();
  break;
case 462:
#line 3257 "cs-parser.jay"
  { yyVal = null; }
  break;
case 464:
  case_464();
  break;
case 465:
  case_465();
  break;
case 466:
  case_466();
  break;
case 467:
  case_467();
  break;
case 468:
  case_468();
  break;
case 469:
#line 3309 "cs-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 473:
  case_473();
  break;
case 474:
  case_474();
  break;
case 475:
  case_475();
  break;
case 476:
  case_476();
  break;
case 478:
  case_478();
  break;
case 479:
  case_479();
  break;
case 480:
  case_480();
  break;
case 481:
  case_481();
  break;
case 482:
  case_482();
  break;
case 483:
  case_483();
  break;
case 484:
#line 3396 "cs-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 486:
#line 3404 "cs-parser.jay"
  {
		yyVal = new This (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 487:
  case_487();
  break;
case 488:
  case_488();
  break;
case 489:
#line 3424 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostIncrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 490:
#line 3431 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostDecrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 491:
  case_491();
  break;
case 492:
  case_492();
  break;
case 493:
  case_493();
  break;
case 494:
  case_494();
  break;
case 495:
  case_495();
  break;
case 496:
  case_496();
  break;
case 497:
  case_497();
  break;
case 498:
#line 3497 "cs-parser.jay"
  {
		++lexer.parsing_type;
	  }
  break;
case 499:
  case_499();
  break;
case 500:
  case_500();
  break;
case 503:
#line 3524 "cs-parser.jay"
  { yyVal = null; }
  break;
case 505:
  case_505();
  break;
case 506:
  case_506();
  break;
case 507:
  case_507();
  break;
case 508:
  case_508();
  break;
case 509:
  case_509();
  break;
case 510:
  case_510();
  break;
case 514:
  case_514();
  break;
case 515:
  case_515();
  break;
case 516:
  case_516();
  break;
case 517:
#line 3600 "cs-parser.jay"
  {
		yyVal = 2;
	  }
  break;
case 518:
#line 3604 "cs-parser.jay"
  {
		yyVal = ((int) yyVals[-1+yyTop]) + 1;
	  }
  break;
case 519:
#line 3611 "cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 520:
#line 3615 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 521:
  case_521();
  break;
case 522:
  case_522();
  break;
case 523:
  case_523();
  break;
case 524:
  case_524();
  break;
case 525:
#line 3659 "cs-parser.jay"
  {
	  	lexer.TypeOfParsing = true;
	  }
  break;
case 526:
  case_526();
  break;
case 529:
  case_529();
  break;
case 530:
  case_530();
  break;
case 531:
  case_531();
  break;
case 532:
  case_532();
  break;
case 533:
  case_533();
  break;
case 534:
  case_534();
  break;
case 535:
  case_535();
  break;
case 536:
  case_536();
  break;
case 537:
  case_537();
  break;
case 538:
  case_538();
  break;
case 539:
  case_539();
  break;
case 540:
  case_540();
  break;
case 541:
#line 3773 "cs-parser.jay"
  {
		start_anonymous (false, (ParametersCompiled) yyVals[0+yyTop], false, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 542:
  case_542();
  break;
case 543:
#line 3786 "cs-parser.jay"
  {
		start_anonymous (false, (ParametersCompiled) yyVals[0+yyTop], true, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 544:
#line 3790 "cs-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
	  }
  break;
case 545:
#line 3797 "cs-parser.jay"
  {
		yyVal = ParametersCompiled.Undefined;
	  }
  break;
case 547:
#line 3805 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 548:
  case_548();
  break;
case 549:
  case_549();
  break;
case 551:
#line 3831 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.LogicalNot, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 552:
#line 3835 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.OnesComplement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 555:
  case_555();
  break;
case 556:
  case_556();
  break;
case 558:
#line 3865 "cs-parser.jay"
  { 
	  	yyVal = new Unary (Unary.Operator.UnaryPlus, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 559:
#line 3869 "cs-parser.jay"
  { 
		yyVal = new Unary (Unary.Operator.UnaryNegation, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 560:
#line 3873 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreIncrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 561:
#line 3877 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreDecrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 562:
#line 3881 "cs-parser.jay"
  {
		yyVal = new Indirection ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 563:
#line 3885 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.AddressOf, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 565:
  case_565();
  break;
case 566:
  case_566();
  break;
case 567:
  case_567();
  break;
case 569:
  case_569();
  break;
case 570:
#line 3917 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 571:
  case_571();
  break;
case 572:
#line 3926 "cs-parser.jay"
  {
		yyVal = new As ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 573:
#line 3930 "cs-parser.jay"
  {
		yyVal = new Is ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 575:
  case_575();
  break;
case 576:
  case_576();
  break;
case 578:
  case_578();
  break;
case 579:
  case_579();
  break;
case 580:
  case_580();
  break;
case 581:
  case_581();
  break;
case 583:
  case_583();
  break;
case 584:
  case_584();
  break;
case 586:
  case_586();
  break;
case 588:
  case_588();
  break;
case 590:
  case_590();
  break;
case 592:
  case_592();
  break;
case 594:
  case_594();
  break;
case 596:
  case_596();
  break;
case 598:
  case_598();
  break;
case 599:
#line 4054 "cs-parser.jay"
  {
		yyVal = new SimpleAssign ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 600:
  case_600();
  break;
case 601:
  case_601();
  break;
case 602:
  case_602();
  break;
case 603:
  case_603();
  break;
case 604:
  case_604();
  break;
case 605:
  case_605();
  break;
case 606:
  case_606();
  break;
case 607:
  case_607();
  break;
case 608:
  case_608();
  break;
case 609:
  case_609();
  break;
case 610:
  case_610();
  break;
case 611:
  case_611();
  break;
case 612:
  case_612();
  break;
case 613:
  case_613();
  break;
case 614:
  case_614();
  break;
case 615:
#line 4149 "cs-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 616:
  case_616();
  break;
case 619:
#line 4164 "cs-parser.jay"
  {
		start_block (lexer.Location);
	  }
  break;
case 620:
  case_620();
  break;
case 622:
  case_622();
  break;
case 623:
  case_623();
  break;
case 624:
  case_624();
  break;
case 625:
  case_625();
  break;
case 626:
  case_626();
  break;
case 627:
#line 4209 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 628:
  case_628();
  break;
case 629:
  case_629();
  break;
case 630:
#line 4223 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;	  
	  }
  break;
case 631:
  case_631();
  break;
case 632:
  case_632();
  break;
case 638:
#line 4248 "cs-parser.jay"
  {
		yyVal = new ArglistAccess (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 639:
  case_639();
  break;
case 640:
  case_640();
  break;
case 641:
  case_641();
  break;
case 643:
#line 4277 "cs-parser.jay"
  {
		yyVal = new BooleanExpression ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 644:
#line 4290 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 645:
  case_645();
  break;
case 646:
  case_646();
  break;
case 647:
  case_647();
  break;
case 648:
  case_648();
  break;
case 649:
#line 4329 "cs-parser.jay"
  { yyVal = null; }
  break;
case 650:
#line 4331 "cs-parser.jay"
  { yyVal = yyVals[0+yyTop]; StoreModifierLocation (Modifiers.PARTIAL, GetLocation (yyVals[0+yyTop])); }
  break;
case 651:
  case_651();
  break;
case 654:
  case_654();
  break;
case 655:
  case_655();
  break;
case 656:
  case_656();
  break;
case 657:
  case_657();
  break;
case 658:
  case_658();
  break;
case 659:
  case_659();
  break;
case 660:
  case_660();
  break;
case 661:
  case_661();
  break;
case 662:
  case_662();
  break;
case 663:
  case_663();
  break;
case 664:
  case_664();
  break;
case 665:
  case_665();
  break;
case 666:
  case_666();
  break;
case 667:
  case_667();
  break;
case 668:
  case_668();
  break;
case 669:
  case_669();
  break;
case 671:
#line 4451 "cs-parser.jay"
  {
		current_container.AddBasesForPart (current_class, (List<FullNamedExpression>) yyVals[0+yyTop]);
	 }
  break;
case 673:
#line 4459 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 674:
  case_674();
  break;
case 675:
  case_675();
  break;
case 676:
  case_676();
  break;
case 677:
  case_677();
  break;
case 678:
  case_678();
  break;
case 679:
  case_679();
  break;
case 680:
  case_680();
  break;
case 681:
  case_681();
  break;
case 682:
#line 4548 "cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Class, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 683:
#line 4552 "cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Struct, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 684:
#line 4559 "cs-parser.jay"
  {
		yyVal = Variance.None;
	  }
  break;
case 685:
  case_685();
  break;
case 686:
#line 4573 "cs-parser.jay"
  {
		yyVal = Variance.Covariant;
	  }
  break;
case 687:
#line 4577 "cs-parser.jay"
  {
		yyVal = Variance.Contravariant;
	  }
  break;
case 688:
  case_688();
  break;
case 689:
#line 4602 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 690:
  case_690();
  break;
case 691:
  case_691();
  break;
case 692:
  case_692();
  break;
case 693:
  case_693();
  break;
case 698:
#line 4646 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 699:
#line 4650 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 701:
  case_701();
  break;
case 704:
#line 4674 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 705:
#line 4678 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 734:
  case_734();
  break;
case 735:
  case_735();
  break;
case 736:
  case_736();
  break;
case 737:
  case_737();
  break;
case 738:
  case_738();
  break;
case 741:
  case_741();
  break;
case 742:
  case_742();
  break;
case 743:
  case_743();
  break;
case 744:
  case_744();
  break;
case 745:
#line 4822 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 746:
#line 4826 "cs-parser.jay"
  {
		yyVal = new ComposedCast (new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop])), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 747:
  case_747();
  break;
case 749:
  case_749();
  break;
case 750:
#line 4847 "cs-parser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreatePointer (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 751:
  case_751();
  break;
case 752:
  case_752();
  break;
case 753:
  case_753();
  break;
case 754:
  case_754();
  break;
case 756:
  case_756();
  break;
case 757:
  case_757();
  break;
case 762:
  case_762();
  break;
case 763:
  case_763();
  break;
case 764:
#line 4936 "cs-parser.jay"
  {
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
	  }
  break;
case 765:
  case_765();
  break;
case 770:
  case_770();
  break;
case 772:
  case_772();
  break;
case 773:
  case_773();
  break;
case 774:
  case_774();
  break;
case 775:
#line 4986 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 776:
#line 4990 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 777:
#line 4991 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 778:
  case_778();
  break;
case 779:
  case_779();
  break;
case 780:
  case_780();
  break;
case 783:
  case_783();
  break;
case 784:
  case_784();
  break;
case 785:
#line 5059 "cs-parser.jay"
  {
		start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 786:
  case_786();
  break;
case 787:
  case_787();
  break;
case 789:
  case_789();
  break;
case 790:
  case_790();
  break;
case 791:
  case_791();
  break;
case 792:
#line 5103 "cs-parser.jay"
  {
		current_block = current_block.CreateSwitchBlock (lexer.Location);
	  }
  break;
case 793:
#line 5107 "cs-parser.jay"
  {
		yyVal = new SwitchSection ((List<SwitchLabel>) yyVals[-2+yyTop], current_block);
	  }
  break;
case 794:
  case_794();
  break;
case 795:
  case_795();
  break;
case 796:
  case_796();
  break;
case 797:
#line 5136 "cs-parser.jay"
  {
		yyVal = new SwitchLabel (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 802:
  case_802();
  break;
case 803:
  case_803();
  break;
case 804:
  case_804();
  break;
case 805:
#line 5175 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 806:
  case_806();
  break;
case 807:
  case_807();
  break;
case 808:
#line 5203 "cs-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 810:
  case_810();
  break;
case 811:
  case_811();
  break;
case 813:
#line 5224 "cs-parser.jay"
  { yyVal = null; }
  break;
case 815:
#line 5229 "cs-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 819:
  case_819();
  break;
case 820:
  case_820();
  break;
case 821:
  case_821();
  break;
case 822:
  case_822();
  break;
case 829:
  case_829();
  break;
case 830:
  case_830();
  break;
case 831:
  case_831();
  break;
case 832:
  case_832();
  break;
case 833:
  case_833();
  break;
case 834:
  case_834();
  break;
case 835:
  case_835();
  break;
case 836:
  case_836();
  break;
case 837:
  case_837();
  break;
case 840:
#line 5384 "cs-parser.jay"
  {
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], (List<Catch>) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), false);
	  }
  break;
case 841:
  case_841();
  break;
case 842:
  case_842();
  break;
case 843:
  case_843();
  break;
case 844:
  case_844();
  break;
case 845:
  case_845();
  break;
case 848:
#line 5437 "cs-parser.jay"
  {
		yyVal = new Catch ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 849:
  case_849();
  break;
case 850:
#line 5456 "cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 851:
  case_851();
  break;
case 852:
#line 5474 "cs-parser.jay"
  {
		yyVal = new Checked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 853:
#line 5481 "cs-parser.jay"
  {
		yyVal = new Unchecked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 854:
  case_854();
  break;
case 855:
#line 5491 "cs-parser.jay"
  {
		yyVal = new Unsafe ((Block) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 856:
  case_856();
  break;
case 857:
  case_857();
  break;
case 858:
  case_858();
  break;
case 859:
  case_859();
  break;
case 860:
  case_860();
  break;
case 861:
  case_861();
  break;
case 862:
  case_862();
  break;
case 863:
  case_863();
  break;
case 864:
#line 5574 "cs-parser.jay"
  {
		report.Error (210, lexer.Location, "You must provide an initializer in a fixed or using statement declaration");
	  }
  break;
case 865:
  case_865();
  break;
case 866:
  case_866();
  break;
case 867:
  case_867();
  break;
case 868:
  case_868();
  break;
case 869:
  case_869();
  break;
case 870:
  case_870();
  break;
case 871:
  case_871();
  break;
case 872:
  case_872();
  break;
case 873:
  case_873();
  break;
case 874:
#line 5674 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 875:
  case_875();
  break;
case 876:
#line 5689 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 877:
  case_877();
  break;
case 878:
  case_878();
  break;
case 880:
  case_880();
  break;
case 881:
#line 5734 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 882:
  case_882();
  break;
case 883:
  case_883();
  break;
case 884:
  case_884();
  break;
case 885:
  case_885();
  break;
case 889:
  case_889();
  break;
case 895:
#line 5793 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 896:
  case_896();
  break;
case 897:
#line 5812 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 898:
  case_898();
  break;
case 899:
  case_899();
  break;
case 900:
  case_900();
  break;
case 901:
  case_901();
  break;
case 902:
  case_902();
  break;
case 903:
  case_903();
  break;
case 904:
  case_904();
  break;
case 905:
  case_905();
  break;
case 906:
  case_906();
  break;
case 908:
#line 5956 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 909:
#line 5963 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 910:
  case_910();
  break;
case 912:
  case_912();
  break;
case 913:
  case_913();
  break;
case 915:
  case_915();
  break;
case 916:
  case_916();
  break;
case 917:
#line 6009 "cs-parser.jay"
  {
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 918:
  case_918();
  break;
case 919:
  case_919();
  break;
case 920:
#line 6026 "cs-parser.jay"
  {
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 921:
  case_921();
  break;
case 922:
  case_922();
  break;
case 924:
  case_924();
  break;
case 925:
  case_925();
  break;
case 928:
  case_928();
  break;
case 929:
  case_929();
  break;
case 937:
#line 6150 "cs-parser.jay"
  {
		module.DocumentationBuilder.ParsedName = (MemberName) yyVals[0+yyTop];
	  }
  break;
case 938:
#line 6157 "cs-parser.jay"
  {
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
	  }
  break;
case 939:
  case_939();
  break;
case 940:
  case_940();
  break;
case 941:
#line 6174 "cs-parser.jay"
  {
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], new MemberName (MemberCache.IndexerNameAlias));
	  }
  break;
case 942:
#line 6178 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 943:
  case_943();
  break;
case 944:
  case_944();
  break;
case 945:
  case_945();
  break;
case 946:
  case_946();
  break;
case 948:
#line 6214 "cs-parser.jay"
  {
		yyVal = new MemberName (((MemberName) yyVals[-2+yyTop]), (MemberName) yyVals[0+yyTop]);
	  }
  break;
case 950:
#line 6222 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 951:
#line 6226 "cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 952:
#line 6233 "cs-parser.jay"
  {
		yyVal = new List<DocumentationParameter> (0);
	  }
  break;
case 954:
  case_954();
  break;
case 955:
  case_955();
  break;
case 956:
  case_956();
  break;
#line default
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
//t          if (debug != null) debug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t               debug.lex(yyState, yyToken,yyname(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
//t            if (debug != null) debug.accept(yyVal);
            return yyVal;
          }
          goto continue_yyLoop;
        }
        if (((yyN = yyGindex[yyM]) != 0) && ((yyN += yyState) >= 0)
            && (yyN < yyTable.Length) && (yyCheck[yyN] == yyState))
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
//t        if (debug != null) debug.shift(yyStates[yyTop], yyState);
	 goto continue_yyLoop;
      continue_yyDiscarded: ;	// implements the named-loop continue: 'continue yyDiscarded'
      }
    continue_yyLoop: ;		// implements the named-loop continue: 'continue yyLoop'
    }
  }

/*
 All more than 3 lines long rules are wrapped into a method
*/
void case_6()
#line 403 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			Attributes attrs = (Attributes) yyVals[0+yyTop];
			report.Error (1730, attrs.Attrs [0].Location,
				"Assembly and module attributes must precede all other elements except using clauses and extern alias declarations");
		}
	  }

void case_8()
#line 415 "cs-parser.jay"
{
		if (yyToken == Token.EXTERN_ALIAS)
			report.Error (439, lexer.Location, "An extern alias declaration must precede all other elements");
		else
			Error_SyntaxError (yyToken);
	  }

void case_13()
#line 435 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "alias"){
			syntax_error (lt.Location, "`alias' expected");
		} else if (lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (lt.Location, "external alias");
		} else {
			lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop]; 
			current_namespace.AddUsingExternalAlias (lt.Value, lt.Location, report);
			ubag.AddExternAlias  (GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]), lt, GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_17()
#line 461 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_18()
#line 466 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_19()
#line 474 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		if (lang_version != LanguageVersion.ISO_1 && lt.Value == "global") {
			report.Warning (440, 2, lt.Location,
			 "An alias named `global' will not be used when resolving `global::'. The global namespace will be used instead");
		}

		current_namespace.AddUsingAlias (lt.Value, (MemberName) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		ubag.AddUsingAlias (GetLocation (yyVals[-4+yyTop]), lt, GetLocation (yyVals[-2+yyTop]), (MemberName) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
		  }

void case_20()
#line 485 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_21()
#line 493 "cs-parser.jay"
{
		current_namespace.AddUsing ((MemberName) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		ubag.AddUsing (GetLocation (yyVals[-2+yyTop]), (MemberName) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_22()
#line 506 "cs-parser.jay"
{
		Attributes attrs = (Attributes) yyVals[-2+yyTop];
		MemberName name = (MemberName) yyVals[0+yyTop];
		if (attrs != null) {
			bool valid_global_attrs = true;
			if ((current_namespace.DeclarationFound || current_namespace != file.NamespaceContainer)) {
				valid_global_attrs = false;
			} else {
				foreach (var a in attrs.Attrs) {
					if (a.ExplicitTarget == "assembly" || a.ExplicitTarget == "module")
						continue;
						
					valid_global_attrs = false;
					break;
				}
			}
			
			if (!valid_global_attrs)
				report.Error (1671, name.Location, "A namespace declaration cannot have modifiers or attributes");
		}
	
		module.AddAttributes (attrs, current_namespace);
		
		current_namespace = new NamespaceContainer (name, module, current_namespace, file);
		module.AddTypesContainer (current_namespace);
		current_class = current_namespace.SlaveDeclSpace;
		current_container = current_class.PartialContainer;
		
		ubag.DeclareNamespace (GetLocation (yyVals[-1+yyTop]), name);
	  }

void case_23()
#line 537 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
		ubag.OpenNamespace (GetLocation (yyVals[0+yyTop]));
	  }

void case_24()
#line 543 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null)
			lbag.AddLocation (current_namespace, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		else
			lbag.AddLocation (current_namespace, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-1+yyTop]));
		
		current_namespace = current_namespace.Parent;
		current_class = current_namespace.SlaveDeclSpace;
		current_container = current_class.PartialContainer;
		ubag.CloseNamespace (GetLocation (yyVals[-1+yyTop]));
		ubag.EndNamespace (GetLocation (yyVals[-1+yyTop]));
	  }

void case_25()
#line 559 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName (lt.Value, lt.Location);
	  }

void case_26()
#line 564 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, lt.Location);		
	  }

void case_27()
#line 569 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new MemberName ("<invalid>", lexer.Location);
	  }

void case_32()
#line 587 "cs-parser.jay"
{
		MemberName name = (MemberName) yyVals[0+yyTop];

		if (name.TypeArguments != null)
			syntax_error (lexer.Location, "namespace name expected");

		yyVal = name;
	  }

void case_41()
#line 619 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			TypeContainer ds = (TypeContainer)yyVals[0+yyTop];

			if ((ds.ModFlags & (Modifiers.PRIVATE | Modifiers.PROTECTED)) != 0){
				report.Error (1527, ds.Location, 
				"Namespace elements cannot be explicitly declared as private, protected or protected internal");
			}

			/* Here is a trick, for explicit attributes we don't know where they belong to until*/
			/* we parse succeeding declaration hence we parse them as normal and re-attach them*/
			/* when we know whether they are global (assembly:, module:) or local (type:).*/
			if (ds.OptAttributes != null) {
				ds.OptAttributes.ConvertGlobalAttributes (ds, current_namespace, !current_namespace.DeclarationFound && current_namespace == file.NamespaceContainer);
			}
		}
		current_namespace.DeclarationFound = true;
	  }

void case_50()
#line 669 "cs-parser.jay"
{
		var sect = (List<Attribute>) yyVals[0+yyTop];
		yyVal = new Attributes (sect);
		lbag.AddLocation (sect, savedOpenLocation, savedCloseLocation);
	  }

void case_51()
#line 675 "cs-parser.jay"
{
		Attributes attrs = yyVals[-1+yyTop] as Attributes;
		var sect = (List<Attribute>) yyVals[0+yyTop];
		if (attrs == null)
			attrs = new Attributes (sect);
		else
			attrs.AddAttributes (sect);
		lbag.AddLocation (sect, savedOpenLocation, savedCloseLocation);
		yyVal = attrs;
	  }

void case_52()
#line 689 "cs-parser.jay"
{
		lexer.parsing_attribute_section = true;
		savedOpenLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_53()
#line 694 "cs-parser.jay"
{
		lexer.parsing_attribute_section = false;
		yyVal = yyVals[0+yyTop];
	  }

void case_54()
#line 702 "cs-parser.jay"
{
		current_attr_target = (string) yyVals[-1+yyTop];
		if (current_attr_target == "assembly" || current_attr_target == "module") {
			Lexer.check_incorrect_doc_comment ();
		}
	  }

void case_55()
#line 709 "cs-parser.jay"
{
		/* when attribute target is invalid*/
		if (current_attr_target == string.Empty)
			yyVal = new List<Attribute> (0);
		else
			yyVal = yyVals[-2+yyTop];
	  
		current_attr_target = null;
		lexer.parsing_attribute_section = false;
		savedCloseLocation = GetLocation (yyVals[0+yyTop]);
 	  }

void case_56()
#line 721 "cs-parser.jay"
{
		yyVal = yyVals[-2+yyTop];
		savedCloseLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_57()
#line 729 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = CheckAttributeTarget (lt.Value, lt.Location);
	  }

void case_60()
#line 736 "cs-parser.jay"
{
		if (yyToken == Token.IDENTIFIER) {
			Error_SyntaxError (yyToken);
			yyVal = null;
		} else {
			string name = GetTokenName (yyToken);
			yyVal = CheckAttributeTarget (name, GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_62()
#line 753 "cs-parser.jay"
{
		var attrs = (List<Attribute>) yyVals[-2+yyTop];
		attrs.Add ((Attribute) yyVals[0+yyTop]);

		yyVal = attrs;
	  }

void case_64()
#line 767 "cs-parser.jay"
{
		--lexer.parsing_block;
		MemberName mname = (MemberName) yyVals[-2+yyTop];
		if (mname.IsGeneric) {
			report.Error (404, lexer.Location,
				      "'<' unexpected: attributes cannot be generic");
		}

		Arguments [] arguments = (Arguments []) yyVals[0+yyTop];
		ATypeNameExpression expr = mname.GetTypeExpression ();
		yyVal = new Attribute (current_attr_target, expr, arguments, mname.Location, lexer.IsEscapedIdentifier (mname));
		if (arguments != null) {
			lbag.AddLocation (yyVal, savedAttrParenOpenLocation, savedAttrParenCloseLocation);
		}
	  }

void case_67()
#line 791 "cs-parser.jay"
{
		savedAttrParenOpenLocation = GetLocation (yyVals[-2+yyTop]);
		savedAttrParenCloseLocation = GetLocation (yyVals[0+yyTop]);
		yyVal = yyVals[-1+yyTop];
	  }

void case_69()
#line 802 "cs-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);
		yyVal = new Arguments [] { a, null };
	  }

void case_70()
#line 808 "cs-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);  
		yyVal = new Arguments [] { null, a };
	  }

void case_71()
#line 814 "cs-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] != null) {
			report.Error (1016, ((Argument) yyVals[0+yyTop]).Expr.Location, "Named attribute arguments must appear after the positional arguments");
			o [0] = new Arguments (4);
		}
		
		Arguments args = ((Arguments) o [0]);
		if (args.Count > 0 && !(yyVals[0+yyTop] is NamedArgument) && args [args.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
		
		args.Add ((Argument) yyVals[0+yyTop]);
		lbag.AppendTo (args, GetLocation (yyVals[-1+yyTop]));
	  }

void case_72()
#line 829 "cs-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] == null) {
			o [1] = new Arguments (4);
		}

		((Arguments) o [1]).Add ((Argument) yyVals[0+yyTop]);
		lbag.AppendTo (o[1], GetLocation (yyVals[-1+yyTop]));
	  }

void case_76()
#line 854 "cs-parser.jay"
{
	  	--lexer.parsing_block;
	  	var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop]);	  
		lbag.AddLocation (yyVal, GetLocation(yyVals[-2+yyTop]));
	  }

void case_77()
#line 864 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "named argument");
			
		/* Avoid boxing in common case (no modifier)*/
		var arg_mod = yyVals[-1+yyTop] == null ? Argument.AType.None : (Argument.AType) yyVals[-1+yyTop];
			
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop], arg_mod);
	  }

void case_95()
#line 911 "cs-parser.jay"
{
		report.Error (1519, lexer.Location, "Unexpected symbol `{0}' in class, struct, or interface member declaration",
			GetSymbolName (yyToken));
		yyVal = null;
		lexer.parsing_generic_declaration = false;
	  }

void case_97()
#line 928 "cs-parser.jay"
{ 
		MemberName name = MakeName ((MemberName) yyVals[0+yyTop]);
		push_current_class (new Struct (current_namespace, current_class, name, (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
	  }

void case_98()
#line 934 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;

		current_class.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support)
			current_container.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (current_class, GetModifierLocations (), GetLocation (yyVals[-5+yyTop]));
	  }

void case_99()
#line 945 "cs-parser.jay"
{
		--lexer.parsing_declaration;	  
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_100()
#line 951 "cs-parser.jay"
{
		lbag.AppendToMember (current_class, GetLocation (yyVals[0+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_102()
#line 963 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_118()
#line 1005 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var mod = (Modifiers) yyVals[-3+yyTop];
		current_field = new Const (current_class, (FullNamedExpression) yyVals[-1+yyTop], mod, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
		current_container.AddConstant ((Const) current_field);
		
		if ((mod & Modifiers.STATIC) != 0) {
			report.Error (504, current_field.Location, "The constant `{0}' cannot be marked static", current_field.GetSignatureForError ());
		}
		
		yyVal = current_field;
	  }

void case_119()
#line 1018 "cs-parser.jay"
{
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];
		lbag.AddMember (current_field, GetModifierLocations (), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_field = null;
	  }

void case_124()
#line 1048 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_126()
#line 1061 "cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_127()
#line 1067 "cs-parser.jay"
{
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
		yyVal = null;
	  }

void case_130()
#line 1082 "cs-parser.jay"
{
	  	lexer.parsing_generic_declaration = false;

		FullNamedExpression type = (FullNamedExpression) yyVals[-1+yyTop];
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (670, GetLocation (yyVals[-1+yyTop]), "Fields cannot have void type");
			
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		current_field = new Field (current_class, type, (Modifiers) yyVals[-2+yyTop], new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-3+yyTop]);
		current_container.AddField (current_field);
		yyVal = current_field;
	  }

void case_131()
#line 1097 "cs-parser.jay"
{ 
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
			
		lbag.AddMember (current_field, GetModifierLocations (), GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
		current_field = null;
	  }

void case_132()
#line 1110 "cs-parser.jay"
{ 
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "fixed size buffers");

		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		current_field = new FixedField (current_class, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop],
			new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
			
		current_container.AddField (current_field);
	  }

void case_133()
#line 1121 "cs-parser.jay"
{
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
	    }

		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];	    
		lbag.AddMember (current_field, GetModifierLocations (), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
	    current_field = null;
	  }

void case_136()
#line 1144 "cs-parser.jay"
{
	  	++lexer.parsing_block;
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_137()
#line 1150 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		current_field.Initializer = (Expression) yyVals[0+yyTop];
		lbag.AppendToMember (current_field, GetLocation (yyVals[-2+yyTop]));
		end_block (lexer.Location);
		current_local_parameters = null;
	  }

void case_142()
#line 1177 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_144()
#line 1187 "cs-parser.jay"
{
		--lexer.parsing_block;
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_149()
#line 1213 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];	  
		yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_151()
#line 1226 "cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_152()
#line 1232 "cs-parser.jay"
{
		report.Error (443, lexer.Location, "Value or constant expected");
		yyVal = null;
	  }

void case_155()
#line 1242 "cs-parser.jay"
{
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  	yyVal = null;
	  }

void case_156()
#line 1251 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.NotAllowed;

		/* Add it early in the case of body being eof for full aot*/
		current_container.AddMethod ((Method) yyVals[0+yyTop]);
	  }

void case_157()
#line 1259 "cs-parser.jay"
{
		Method method = (Method) yyVals[-2+yyTop];
		method.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (method.Block == null) {
			method.ParameterInfo.CheckParameters (method);

			if ((method.ModFlags & Modifiers.ASYNC) != 0) {
				report.Error (1994, method.Location, "`{0}': The async modifier can only be used with methods that have a body",
					method.GetSignatureForError ());
			}
		} else {
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, method.Location, "`{0}': interface members cannot have a definition",
					method.GetSignatureForError ());
			}
		}

		current_local_parameters = null;

		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_160()
#line 1297 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;
		MemberName name = (MemberName) yyVals[-6+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];

		GenericMethod generic = null;
		if (name.TypeArguments != null) {
			generic = new GenericMethod (current_namespace, current_class, name,
						     (FullNamedExpression) yyVals[-7+yyTop], current_local_parameters);

			generic.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);
		} else if (yyVals[0+yyTop] != null) {
			report.Error (80, GetLocation (yyVals[0+yyTop]),
				"Constraints are not allowed on non-generic declarations");
		}

		Method method = new Method (current_class, generic, (FullNamedExpression) yyVals[-7+yyTop], (Modifiers) yyVals[-8+yyTop],
				     name, current_local_parameters, (Attributes) yyVals[-9+yyTop]);
				     
		if (yyVals[0+yyTop] != null && ((method.ModFlags & Modifiers.OVERRIDE) != 0 || method.IsExplicitImpl)) {
			report.Error (460, method.Location,
				"`{0}': Cannot specify constraints for overrides and explicit interface implementation methods",
				method.GetSignatureForError ());
		}

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (method, GetModifierLocations (), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = method;
	  }

void case_162()
#line 1338 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
	  	valid_param_mod = ParameterModifierType.All;
	  }

void case_164()
#line 1347 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;

		MemberName name = (MemberName) yyVals[-6+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];

		if (yyVals[-1+yyTop] != null && name.TypeArguments == null)
			report.Error (80, lexer.Location,
				      "Constraints are not allowed on non-generic declarations");

		Method method;
		GenericMethod generic = null;
		if (name.TypeArguments != null) {
			generic = new GenericMethod (current_namespace, current_class, name,
				new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-8+yyTop])),
				current_local_parameters);

			generic.SetParameterInfo ((List<Constraints>) yyVals[-1+yyTop]);
		}

		var modifiers = (Modifiers) yyVals[-10+yyTop];

		const Modifiers invalid_partial_mod = Modifiers.AccessibilityMask | Modifiers.ABSTRACT | Modifiers.EXTERN |
			Modifiers.NEW | Modifiers.OVERRIDE | Modifiers.SEALED | Modifiers.VIRTUAL;

		if ((modifiers & invalid_partial_mod) != 0) {
			report.Error (750, name.Location, "A partial method cannot define access modifier or " +
       			"any of abstract, extern, new, override, sealed, or virtual modifiers");
			modifiers &= ~invalid_partial_mod;
		}

		if ((current_class.ModFlags & Modifiers.PARTIAL) == 0) {
			report.Error (751, name.Location, "A partial method must be declared within a " +
       			"partial class or partial struct");
		}
		
		modifiers |= Modifiers.PARTIAL | Modifiers.PRIVATE;
		
		method = new Method (current_class, generic, new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-8+yyTop])),
				     modifiers, name, current_local_parameters, (Attributes) yyVals[-11+yyTop]);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		StoreModifierLocation (Modifiers.PARTIAL, GetLocation (yyVals[-9+yyTop]));
		lbag.AddMember (method, mod_locations, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = method;
	  }

void case_165()
#line 1400 "cs-parser.jay"
{
		MemberName name = (MemberName) yyVals[-3+yyTop];
		report.Error (1585, name.Location, 
			"Member modifier `{0}' must precede the member type and name", ModifiersExtensions.Name ((Modifiers) yyVals[-4+yyTop]));

		Method method = new Method (current_class, null, (FullNamedExpression) yyVals[-5+yyTop],
					    0, name, (ParametersCompiled) yyVals[-1+yyTop], (Attributes) yyVals[-7+yyTop]);

		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }

void case_170()
#line 1429 "cs-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
	  	yyVal = new ParametersCompiled (pars_list.ToArray ());
	  	lbag.AddLocation (yyVal, lbag.GetLocations (pars_list));
	  }

void case_171()
#line 1435 "cs-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = new ParametersCompiled (pars_list.ToArray ()); 
	  }

void case_172()
#line 1442 "cs-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[0+yyTop])));
		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_173()
#line 1448 "cs-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[-2+yyTop] } );			
	  }

void case_174()
#line 1455 "cs-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_175()
#line 1465 "cs-parser.jay"
{
		report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter [] { new ArglistParameter (GetLocation (yyVals[-2+yyTop])) }, true);
	  }

void case_176()
#line 1471 "cs-parser.jay"
{
		report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_179()
#line 1488 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_180()
#line 1496 "cs-parser.jay"
{
		parameters_bucket.Clear ();
		Parameter p = (Parameter) yyVals[0+yyTop];
		parameters_bucket.Add (p);
		
		default_parameter_used = p.HasDefaultValue;
		yyVal = parameters_bucket;
	  }

void case_181()
#line 1505 "cs-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter) yyVals[0+yyTop];
		if (p != null) {
			if (p.HasExtensionMethodModifier)
				report.Error (1100, p.Location, "The parameter modifier `this' can only be used on the first parameter");
			else if (!p.HasDefaultValue && default_parameter_used)
				report.Error (1737, p.Location, "Optional parameter cannot precede required parameters");

			default_parameter_used |= p.HasDefaultValue;
			pars.Add (p);
			
			lbag.AppendTo (pars, GetLocation (yyVals[-1+yyTop]));
		}
		
		yyVal = yyVals[-2+yyTop];
	  }

void case_182()
#line 1529 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], (Attributes) yyVals[-3+yyTop], lt.Location);
		lbag.AddLocation (yyVal, parameterModifierLocation);
	  }

void case_183()
#line 1538 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		report.Error (1552, lt.Location, "Array type specifier, [], must appear before parameter name");
		yyVal = new Parameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Parameter.Modifier) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop], lt.Location);
		lbag.AddLocation (yyVal, parameterModifierLocation);
	  }

void case_184()
#line 1548 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);	  
	  	Location l = GetLocation (yyVals[0+yyTop]);
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], null, (Parameter.Modifier) yyVals[-2+yyTop], (Attributes) yyVals[-3+yyTop], l);
		lbag.AddLocation (yyVal, parameterModifierLocation);
	  }

void case_186()
#line 1563 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		if (lang_version <= LanguageVersion.V_3) {
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "optional parameter");
		}
		
		Parameter.Modifier mod = (Parameter.Modifier) yyVals[-5+yyTop];
		if (mod != Parameter.Modifier.NONE) {
			switch (mod) {
			case Parameter.Modifier.REF:
			case Parameter.Modifier.OUT:
				report.Error (1741, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
				
			case Parameter.Modifier.This:
				report.Error (1743, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
			default:
				throw new NotImplementedException (mod.ToString ());
			}
				
			mod = Parameter.Modifier.NONE;
		}
		
		if ((valid_param_mod & ParameterModifierType.DefaultValue) == 0)
			report.Error (1065, GetLocation (yyVals[-2+yyTop]), "Optional parameter is not valid in this context");
		
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-4+yyTop], lt.Value, mod, (Attributes) yyVals[-6+yyTop], lt.Location);
		lbag.AddLocation (yyVal, parameterModifierLocation, GetLocation (yyVals[-2+yyTop])); /* parameterModifierLocation should be ignored when mod == NONE*/
		
		if (yyVals[0+yyTop] != null)
			((Parameter) yyVal).DefaultValue = new DefaultParameterValueExpression ((Expression) yyVals[0+yyTop]);
	  }

void case_189()
#line 1608 "cs-parser.jay"
{
		yyVal = yyVals[0+yyTop];
		parameterModifierLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_190()
#line 1613 "cs-parser.jay"
{
		Parameter.Modifier p2 = (Parameter.Modifier)yyVals[0+yyTop];
  		Parameter.Modifier mod = (Parameter.Modifier)yyVals[-1+yyTop] | p2;
  		if (((Parameter.Modifier)yyVals[-1+yyTop] & p2) == p2) {
  			Error_DuplicateParameterModifier (lexer.Location, p2);
  		} else {
	  		switch (mod & ~Parameter.Modifier.This) {
  				case Parameter.Modifier.REF:
					report.Error (1101, lexer.Location, "The parameter modifiers `this' and `ref' cannot be used altogether");
  					break;
   				case Parameter.Modifier.OUT:
					report.Error (1102, lexer.Location, "The parameter modifiers `this' and `out' cannot be used altogether");
  					break;
  				default:
 					report.Error (1108, lexer.Location, "A parameter cannot have specified more than one modifier");
 					break;
 			}
  		}
  		yyVal = mod;
	  }

void case_191()
#line 1637 "cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Ref) == 0)
	  		Error_ParameterModifierNotValid ("ref", GetLocation (yyVals[0+yyTop]));
	  		
	  	yyVal = Parameter.Modifier.REF;
	  }

void case_192()
#line 1644 "cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Out) == 0)
	  		Error_ParameterModifierNotValid ("out", GetLocation (yyVals[0+yyTop]));
	  
	  	yyVal = Parameter.Modifier.OUT;
	  }

void case_193()
#line 1651 "cs-parser.jay"
{
		if ((valid_param_mod & ParameterModifierType.This) == 0)
	  		Error_ParameterModifierNotValid ("this", GetLocation (yyVals[0+yyTop]));

	  	if (lang_version <= LanguageVersion.ISO_2)
	  		FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "extension methods");
	  			
		yyVal = Parameter.Modifier.This;
	  }

void case_194()
#line 1664 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Attributes) yyVals[-3+yyTop], lt.Location);
	  }

void case_195()
#line 1669 "cs-parser.jay"
{
		report.Error (1751, GetLocation (yyVals[-4+yyTop]), "Cannot specify a default value for a parameter array");
		
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Attributes) yyVals[-5+yyTop], lt.Location);		
	  }

void case_196()
#line 1676 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_197()
#line 1684 "cs-parser.jay"
{
		if ((valid_param_mod & ParameterModifierType.Params) == 0)
			report.Error (1670, (GetLocation (yyVals[0+yyTop])), "The `params' modifier is not allowed in current context");
	  }

void case_198()
#line 1689 "cs-parser.jay"
{
		Parameter.Modifier mod = (Parameter.Modifier)yyVals[0+yyTop];
		if ((mod & Parameter.Modifier.This) != 0) {
			report.Error (1104, GetLocation (yyVals[-1+yyTop]), "The parameter modifiers `this' and `params' cannot be used altogether");
		} else {
			report.Error (1611, GetLocation (yyVals[-1+yyTop]), "The params parameter cannot be declared as ref or out");
		}	  
	  }

void case_200()
#line 1705 "cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Arglist) == 0)
	  		report.Error (1669, GetLocation (yyVals[0+yyTop]), "__arglist is not valid in this context");
	  }

void case_201()
#line 1716 "cs-parser.jay"
{
		if (doc_support)
			tmpComment = Lexer.consume_doc_comment ();
	  }

void case_202()
#line 1721 "cs-parser.jay"
{
		var type = (FullNamedExpression) yyVals[-3+yyTop];
		current_property = new Property (current_class, type, (Modifiers) yyVals[-4+yyTop],
			(MemberName) yyVals[-2+yyTop], (Attributes) yyVals[-5+yyTop]);
			
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (547, GetLocation (yyVals[-3+yyTop]), "`{0}': property or indexer cannot have void type", current_property.GetSignatureForError ());					
			
		current_container.AddProperty ((Property)current_property);
		lbag.AddMember (current_property, GetModifierLocations (), GetLocation (yyVals[0+yyTop]));
		
		lexer.PropertyParsing = true;
	  }

void case_203()
#line 1735 "cs-parser.jay"
{
		lexer.PropertyParsing = false;
		
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();				
	  }

void case_204()
#line 1742 "cs-parser.jay"
{
		lbag.AppendToMember (current_property, GetLocation (yyVals[0+yyTop]));
		current_property = null;
	  }

void case_206()
#line 1756 "cs-parser.jay"
{
		valid_param_mod = 0;
		var type = (FullNamedExpression) yyVals[-6+yyTop];
		Indexer indexer = new Indexer (current_class, type, (MemberName) yyVals[-5+yyTop], (Modifiers) yyVals[-7+yyTop], (ParametersCompiled) yyVals[-2+yyTop], (Attributes) yyVals[-8+yyTop]);
			
		current_property = indexer;

  		current_container.AddIndexer (indexer);
		lbag.AddMember (current_property, GetModifierLocations (), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
  		
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (620, GetLocation (yyVals[-6+yyTop]), "`{0}': indexer return type cannot be `void'", indexer.GetSignatureForError ());  		

		if (indexer.ParameterInfo.IsEmpty) {
			report.Error (1551, GetLocation (yyVals[-4+yyTop]), "Indexers must have at least one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		lexer.PropertyParsing = true;
	  }

void case_208()
#line 1785 "cs-parser.jay"
{
		if (current_property.AccessorFirst != null && current_property.AccessorFirst.Block == null)
			((Indexer) current_property).ParameterInfo.CheckParameters (current_property);
	  
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();
			
		lbag.AppendToMember (current_property, GetLocation (yyVals[-1+yyTop]));
		current_property = null;		
	  }

void case_213()
#line 1804 "cs-parser.jay"
{
	  	if (yyToken == Token.CLOSE_BRACE) {
	  		report.Error (548, lexer.Location, "`{0}': property or indexer must have at least one accessor", current_property.GetSignatureForError ());
		} else {
			if (yyToken == Token.SEMICOLON)
				report.Error (1597, lexer.Location, "Semicolon after method or accessor block is not valid");
			else
				report.Error (1014, GetLocation (yyVals[0+yyTop]), "A get or set accessor expected");
		}
	  }

void case_214()
#line 1818 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
	  
		if (current_property.Get != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
		
		if (current_property is Indexer) {
			current_property.Get = new Indexer.GetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop], ((Indexer)current_property).ParameterInfo.Clone (),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Get = new Property.GetMethod (current_property,
				(Modifiers) yyVals[-1+yyTop], (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}	
	  
		current_local_parameters = current_property.Get.ParameterInfo;	  
		lbag.AddMember (current_property.Get, GetModifierLocations ());
		lexer.PropertyParsing = false;
	  }

void case_215()
#line 1840 "cs-parser.jay"
{
	  	if (yyVals[0+yyTop] != null) {
	  		current_property.Get.Block = (ToplevelBlock) yyVals[0+yyTop];			
	  	
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, current_property.Get.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Get.GetSignatureForError ());
			}		
		}
	  
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support)
			if (Lexer.doc_state == XmlCommentState.Error)
				Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_216()
#line 1861 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
		
		if (current_property.Set != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
	  
		if (current_property is Indexer) {
			current_property.Set = new Indexer.SetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop],
				ParametersCompiled.MergeGenerated (compiler,
				((Indexer)current_property).ParameterInfo, true, new Parameter (
					current_property.TypeExpression, "value", Parameter.Modifier.NONE, null, GetLocation (yyVals[0+yyTop])),
					null),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Set = new Property.SetMethod (current_property, (Modifiers) yyVals[-1+yyTop], 
				ParametersCompiled.CreateImplicitParameter (current_property.TypeExpression, GetLocation (yyVals[0+yyTop])),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}
		
		current_local_parameters = current_property.Set.ParameterInfo;	
		lbag.AddMember (current_property.Set, GetModifierLocations ());
		lexer.PropertyParsing = false;
	  }

void case_217()
#line 1888 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {		
			current_property.Set.Block = (ToplevelBlock) yyVals[0+yyTop];
		
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, current_property.Set.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Set.GetSignatureForError ());
			}
		}
		
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support
			&& Lexer.doc_state == XmlCommentState.Error)
			Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_219()
#line 1910 "cs-parser.jay"
{
		lbag.AppendToMember (lbag.LastMember, GetLocation (yyVals[0+yyTop]));
	  	yyVal = null;
	  }

void case_220()
#line 1915 "cs-parser.jay"
{
	  	Error_SyntaxError (1043, yyToken, "Invalid accessor body");
	  	yyVal = null;
	  }

void case_222()
#line 1930 "cs-parser.jay"
{
		MemberName name = MakeName ((MemberName) yyVals[0+yyTop]);
		push_current_class (new Interface (current_namespace, current_class, name, (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
		lbag.AddMember (current_class, GetModifierLocations (), GetLocation (yyVals[-2+yyTop]));		
	  }

void case_223()
#line 1937 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;

		current_class.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support) {
			current_container.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  }

void case_224()
#line 1948 "cs-parser.jay"
{
		--lexer.parsing_declaration;	  
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_225()
#line 1954 "cs-parser.jay"
{
	    lbag.AppendToMember (current_class, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_241()
#line 2006 "cs-parser.jay"
{
		OperatorDeclaration decl = (OperatorDeclaration) yyVals[-2+yyTop];
		if (decl != null) {
			Operator op = new Operator (
				current_class, decl.optype, decl.ret_type, (Modifiers) yyVals[-3+yyTop], 
				current_local_parameters,
				(ToplevelBlock) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop], decl.location);
				
			if (op.Block == null)
				op.ParameterInfo.CheckParameters (op);

			if (doc_support) {
				op.DocComment = tmpComment;
				Lexer.doc_state = XmlCommentState.Allowed;
			}

			/* Note again, checking is done in semantic analysis*/
			current_container.AddOperator (op);

			lbag.AddMember (op, GetModifierLocations (), lbag.GetLocations (decl));
		}
		
		current_local_parameters = null;
	  }

void case_245()
#line 2040 "cs-parser.jay"
{
		report.Error (590, GetLocation (yyVals[0+yyTop]), "User-defined operators cannot return void");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_247()
#line 2052 "cs-parser.jay"
{
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		Operator.OpType op = (Operator.OpType) yyVals[-4+yyTop];
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];
		
		int p_count = current_local_parameters.Count;
		if (p_count == 1) {
			if (op == Operator.OpType.Addition)
				op = Operator.OpType.UnaryPlus;
			else if (op == Operator.OpType.Subtraction)
				op = Operator.OpType.UnaryNegation;
		}
		
		if (IsUnaryOperator (op)) {
			if (p_count == 2) {
				report.Error (1020, loc, "Overloadable binary operator expected");
			} else if (p_count != 1) {
				report.Error (1535, loc, "Overloaded unary operator `{0}' takes one parameter",
					Operator.GetName (op));
			}
		} else {
			if (p_count > 2) {
				report.Error (1534, loc, "Overloaded binary operator `{0}' takes two parameters",
					Operator.GetName (op));
			} else if (p_count != 2) {
				report.Error (1019, loc, "Overloadable unary operator expected");
			}
		}
		
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (op, (FullNamedExpression) yyVals[-6+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_272()
#line 2128 "cs-parser.jay"
{
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  
		  
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_274()
#line 2147 "cs-parser.jay"
{
		valid_param_mod = 0;
		
		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  
		  
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Explicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_275()
#line 2162 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_276()
#line 2168 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	yyVal = new OperatorDeclaration (Operator.OpType.Explicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_277()
#line 2178 "cs-parser.jay"
{ 
		Constructor c = (Constructor) yyVals[-1+yyTop];
		c.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (doc_support)
			c.DocComment = ConsumeStoredComment ();

		current_container.AddConstructor (c);

		current_local_parameters = null;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_278()
#line 2197 "cs-parser.jay"
{
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		valid_param_mod = ParameterModifierType.All;
	  }

void case_279()
#line 2206 "cs-parser.jay"
{
		valid_param_mod = 0;
		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];  
		
		/**/
		/* start block here, so possible anonymous methods inside*/
		/* constructor initializer can get correct parent block*/
		/**/
	  	start_block (lexer.Location);
	  }

void case_280()
#line 2217 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-6+yyTop];
		var mods = (Modifiers) yyVals[-7+yyTop];
		ConstructorInitializer ci = (ConstructorInitializer) yyVals[0+yyTop];

		Constructor c = new Constructor (current_class, lt.Value, mods,
			(Attributes) yyVals[-8+yyTop], current_local_parameters, ci, lt.Location);
		
		if (lt.Value != current_container.MemberName.Name) {
			report.Error (1520, c.Location, "Class, struct, or interface method must have a return type");
		} else if ((mods & Modifiers.STATIC) != 0) {
			if ((mods & Modifiers.AccessibilityMask) != 0){
				report.Error (515, c.Location,
					"`{0}': static constructor cannot have an access modifier",
					c.GetSignatureForError ());
			}
			if (ci != null) {
				report.Error (514, c.Location,
					"`{0}': static constructor cannot have an explicit `this' or `base' constructor call",
					c.GetSignatureForError ());
			
			}
		}
		
		lbag.AddMember (c, GetModifierLocations (), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = c;
	  }

void case_286()
#line 2262 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		yyVal = new ConstructorBaseInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_288()
#line 2272 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		yyVal = new ConstructorThisInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_289()
#line 2278 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_290()
#line 2286 "cs-parser.jay"
{
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
		
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_291()
#line 2295 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		if (lt.Value != current_container.MemberName.Name){
			report.Error (574, lt.Location, "Name of destructor must match name of class");
		} else if (current_container.Kind != MemberKind.Class){
			report.Error (575, lt.Location, "Only class types can contain destructor");
		}
		
		Destructor d = new Destructor (current_class, (Modifiers) yyVals[-6+yyTop],
			ParametersCompiled.EmptyReadOnlyParameters, (Attributes) yyVals[-7+yyTop], lt.Location);
		if (doc_support)
			d.DocComment = ConsumeStoredComment ();
		  
		d.Block = (ToplevelBlock) yyVals[0+yyTop];
		current_container.AddMethod (d);
		lbag.AddMember (d, GetModifierLocations (), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[-1+yyTop]));

		current_local_parameters = null;
	  }

void case_292()
#line 2320 "cs-parser.jay"
{
		current_event_field = new EventField (current_class, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], (MemberName) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop]);
		current_container.AddEvent (current_event_field);
		
		if (current_event_field.MemberName.Left != null) {
			report.Error (71, current_event_field.Location, "`{0}': An explicit interface implementation of an event must use property syntax",
			current_event_field.GetSignatureForError ());
		}
		
		yyVal = current_event_field;
	  }

void case_293()
#line 2334 "cs-parser.jay"
{
		if (doc_support) {
			current_event_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AddMember (current_event_field, GetModifierLocations (), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_event_field = null;
	  }

void case_294()
#line 2347 "cs-parser.jay"
{
		current_event = new EventProperty (current_class, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-4+yyTop], (MemberName) yyVals[-1+yyTop], (Attributes) yyVals[-5+yyTop]);
		current_container.AddEvent (current_event);
		lbag.AddMember (current_event, GetModifierLocations (), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		
		lexer.EventParsing = true;
	  }

void case_295()
#line 2355 "cs-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface)
			report.Error (69, GetLocation (yyVals[-2+yyTop]), "Event in interface cannot have add or remove accessors");
	  
		lexer.EventParsing = false;
	  }

void case_296()
#line 2362 "cs-parser.jay"
{
		if (doc_support) {
			current_event.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AppendToMember (current_event, GetLocation (yyVals[-1+yyTop]));
	  	current_event = null;	
		current_local_parameters = null;
	  }

void case_299()
#line 2381 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		current_event_field.Initializer = (Expression) yyVals[0+yyTop];
	  }

void case_304()
#line 2405 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_306()
#line 2415 "cs-parser.jay"
{
		--lexer.parsing_block;
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_307()
#line 2424 "cs-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (68, lexer.Location, "`{0}': event in interface cannot have an initializer",
				current_event_field.GetSignatureForError ());
		}
		
	  	if ((current_event_field.ModFlags & Modifiers.ABSTRACT) != 0) {
			report.Error (74, lexer.Location, "`{0}': abstract event cannot have an initializer",
				current_event_field.GetSignatureForError ());
	  	}		
	  }

void case_311()
#line 2445 "cs-parser.jay"
{
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_312()
#line 2450 "cs-parser.jay"
{
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_313()
#line 2455 "cs-parser.jay"
{ 
		report.Error (1055, GetLocation (yyVals[0+yyTop]), "An add or remove accessor expected");
		yyVal = null;
	  }

void case_314()
#line 2463 "cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Add = new EventProperty.AddDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Add.ParameterInfo;
		
		lbag.AddMember (current_event.Add, GetModifierLocations ());
		lexer.EventParsing = false;		
	  }

void case_315()
#line 2475 "cs-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Add.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, current_event.Add.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Add.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_316()
#line 2491 "cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Remove = new EventProperty.RemoveDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Remove.ParameterInfo;

		lbag.AddMember (current_event.Remove, GetModifierLocations ());
		lexer.EventParsing = false;		
	  }

void case_317()
#line 2503 "cs-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Remove.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, current_event.Remove.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Remove.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_318()
#line 2519 "cs-parser.jay"
{
		report.Error (73, lexer.Location, "An add or remove accessor must have a body");
		yyVal = null;
	  }

void case_320()
#line 2531 "cs-parser.jay"
{
		if (doc_support)
			enumTypeComment = Lexer.consume_doc_comment ();
	  }

void case_321()
#line 2536 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;

		MemberName name = (MemberName) yyVals[-3+yyTop];
		if (name.IsGeneric) {
			report.Error (1675, name.Location, "Enums cannot have type parameters");
		}
		
		push_current_class (new Enum (current_namespace, current_class, (TypeExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-5+yyTop], MakeName (name), (Attributes) yyVals[-6+yyTop]), null);
	  }

void case_322()
#line 2548 "cs-parser.jay"
{
	  	/* here will be evaluated after CLOSE_BLACE is consumed.*/
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_323()
#line 2554 "cs-parser.jay"
{
		if (doc_support)
			current_class.DocComment = enumTypeComment;
			
		--lexer.parsing_declaration;

/*			if (doc_support)*/
/*				em.DocComment = ev.DocComment;*/

		lbag.AddMember (current_class, GetModifierLocations (), GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-1+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_325()
#line 2571 "cs-parser.jay"
{
	 	var te = yyVals[0+yyTop] as TypeExpression;
		if (te == null || !EnumSpec.IsValidUnderlyingType (te.Type)) {
			Enum.Error_1008 (GetLocation (yyVals[0+yyTop]), report);
			yyVal = null;
		} else {
			yyVal = yyVals[0+yyTop];
		}
	 }

void case_326()
#line 2581 "cs-parser.jay"
{
	 	Error_TypeExpected (GetLocation (yyVals[-1+yyTop]));
		yyVal = null;
	 }

void case_331()
#line 2599 "cs-parser.jay"
{
	  	lbag.AddLocation (yyVals[-2+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	yyVal = yyVals[0+yyTop];
	  }

void case_332()
#line 2607 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	var em = new EnumMember ((Enum) current_class, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-1+yyTop]);
	  	((Enum) current_class).AddEnumMember (em);

		if (doc_support) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }

void case_333()
#line 2620 "cs-parser.jay"
{
	  	++lexer.parsing_block;
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
	  }

void case_334()
#line 2628 "cs-parser.jay"
{ 
		--lexer.parsing_block;
		
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
	  	var em = new EnumMember ((Enum) current_class, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
	  	em.Initializer = new ConstInitializer (em, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	((Enum) current_class).AddEnumMember (em);
		
		if (doc_support)
			em.DocComment = ConsumeStoredComment ();

		yyVal = em;
	  }

void case_336()
#line 2653 "cs-parser.jay"
{
		valid_param_mod = 0;

		MemberName name = MakeName ((MemberName) yyVals[-4+yyTop]);
		ParametersCompiled p = (ParametersCompiled) yyVals[-1+yyTop];

		Delegate del = new Delegate (current_namespace, current_class, (FullNamedExpression) yyVals[-5+yyTop],
					     (Modifiers) yyVals[-7+yyTop], name, p, (Attributes) yyVals[-8+yyTop]);
		p.CheckParameters (del);

		ubag.PushTypeDeclaration (del);
		ubag.PopTypeDeclaration ();

		current_container.AddDelegate (del);
		current_delegate = del;
		lexer.ConstraintsParsing = true;
	  }

void case_338()
#line 2675 "cs-parser.jay"
{
		if (doc_support) {
			current_delegate.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  
		current_delegate.SetParameterInfo ((List<Constraints>) yyVals[-2+yyTop]);
		lbag.AddMember (current_delegate, GetModifierLocations (), GetLocation (yyVals[-10+yyTop]), GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));

		yyVal = current_delegate;

		current_delegate = null;
	  }

void case_340()
#line 2693 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "nullable types");
	  
	  	yyVal = ComposedTypeSpecifier.CreateNullable (GetLocation (yyVals[0+yyTop]));
	  }

void case_342()
#line 2704 "cs-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new MemberName (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
	  }

void case_344()
#line 2715 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));		
	  }

void case_345()
#line 2724 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);	  
	  }

void case_347()
#line 2736 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");
		var list = locationListStack.Pop ();
		list.Add (GetLocation (yyVals[-2+yyTop]));
		list.Add (GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVals[-1+yyTop], list);
	
		yyVal = yyVals[-1+yyTop];;
	  }

void case_348()
#line 2747 "cs-parser.jay"
{
		Error_TypeExpected (lexer.Location);
		yyVal = new TypeArguments ();
	  }

void case_349()
#line 2755 "cs-parser.jay"
{
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
		locationListStack.Push (new List<Location> ());
	  }

void case_350()
#line 2762 "cs-parser.jay"
{
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
		locationListStack.Peek ().Add (GetLocation (yyVals[-1+yyTop]));
	  }

void case_352()
#line 2779 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);
	  }

void case_353()
#line 2788 "cs-parser.jay"
{
	  	MemberName mn = (MemberName)yyVals[0+yyTop];
	  	if (mn.TypeArguments != null)
	  		syntax_error (mn.Location, string.Format ("Member `{0}' cannot declare type arguments",
	  			mn.GetSignatureForError ()));
	  }

void case_355()
#line 2799 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }

void case_356()
#line 2808 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		yyVal = new MemberName (TypeContainer.DefaultIndexerName, GetLocation (yyVals[0+yyTop]));
	  }

void case_357()
#line 2813 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		yyVal = new MemberName ((MemberName) yyVals[-1+yyTop], TypeContainer.DefaultIndexerName, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_358()
#line 2821 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_359()
#line 2827 "cs-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		
		yyVal = new MemberName (lt1.Value, lt2.Value, (TypeArguments) yyVals[-1+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_360()
#line 2835 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_362()
#line 2845 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");
	  
		yyVal = yyVals[-1+yyTop];
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_363()
#line 2856 "cs-parser.jay"
{
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression)yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_364()
#line 2862 "cs-parser.jay"
{
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression)yyVals[0+yyTop]);
		yyVal = type_args;
		lbag.AddLocation (yyVals[0+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_365()
#line 2872 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[0+yyTop];
		yyVal = new TypeParameterName (lt.Value, (Attributes)yyVals[-2+yyTop], (Variance) yyVals[-1+yyTop], lt.Location);
  	  }

void case_366()
#line 2877 "cs-parser.jay"
{
  	  	if (GetTokenName (yyToken) == "type")
			report.Error (81, GetLocation (yyVals[0+yyTop]), "Type parameter declaration must be an identifier not a type");
		else
			Error_SyntaxError (yyToken);
			
  	  	yyVal = new TypeParameterName ("", null, lexer.Location);
  	  }

void case_371()
#line 2911 "cs-parser.jay"
{
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_373()
#line 2920 "cs-parser.jay"
{
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_375()
#line 2929 "cs-parser.jay"
{
	  	report.Error (1536, GetLocation (yyVals[0+yyTop]), "Invalid parameter type `void'");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_378()
#line 2945 "cs-parser.jay"
{
		MemberName name = (MemberName) yyVals[-1+yyTop];

		if (yyVals[0+yyTop] != null) {
			yyVal = new ComposedCast (name.GetTypeExpression (), (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			if (name.Left == null && name.Name == "var")
				yyVal = new VarExpr (name.Location);
			else
				yyVal = name.GetTypeExpression ();
		}
	  }

void case_380()
#line 2962 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null)
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_383()
#line 2978 "cs-parser.jay"
{
		var types = new List<FullNamedExpression> (2);
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }

void case_384()
#line 2984 "cs-parser.jay"
{
		var types = (List<FullNamedExpression>) yyVals[-2+yyTop];
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }

void case_385()
#line 2993 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast) {
			report.Error (1521, GetLocation (yyVals[0+yyTop]), "Invalid base type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
		}
		yyVal = yyVals[0+yyTop];
	  }

void case_386()
#line 3000 "cs-parser.jay"
{
	  	Error_TypeExpected (lexer.Location);
		yyVal = null;
	  }

void case_423()
#line 3062 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);	  
	  }

void case_424()
#line 3066 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
	       yyVal = new CompletionSimpleName (MemberName.MakeName (lt.Value, null), lt.Location);
	  }

void case_435()
#line 3107 "cs-parser.jay"
{
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_437()
#line 3119 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_438()
#line 3125 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_439()
#line 3131 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_440()
#line 3137 "cs-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_442()
#line 3147 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
	  }

void case_444()
#line 3155 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
 	  }

void case_445()
#line 3163 "cs-parser.jay"
{
		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_448()
#line 3176 "cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] == null) {
	  		yyVal = CollectionOrObjectInitializers.Empty;
	  		/* TODO: lbag*/
	  	} else {
	  		yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  	}
	  }

void case_449()
#line 3186 "cs-parser.jay"
{
	  	yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_452()
#line 3202 "cs-parser.jay"
{
	  	var a = new List<Expression> ();
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_453()
#line 3208 "cs-parser.jay"
{
	  	var a = (List<Expression>)yyVals[-2+yyTop];
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_454()
#line 3213 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }

void case_455()
#line 3221 "cs-parser.jay"
{
	  	var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
	  	yyVal = new ElementInitializer (lt.Value, (Expression)yyVals[0+yyTop], lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_457()
#line 3230 "cs-parser.jay"
{
		CompletionSimpleName csn = yyVals[-1+yyTop] as CompletionSimpleName;
		if (csn == null)
			yyVal = new CollectionElementInitializer ((Expression)yyVals[-1+yyTop]);
		else
			yyVal = new CompletionElementInitializer (csn.Prefix, csn.Location);
	  }

void case_458()
#line 3238 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] == null)
			yyVal = null;
		else
	  		yyVal = new CollectionElementInitializer ((List<Expression>)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_459()
#line 3245 "cs-parser.jay"
{
	  	report.Error (1920, GetLocation (yyVals[-1+yyTop]), "An element initializer cannot be empty");
		yyVal = null;
	  }

void case_464()
#line 3263 "cs-parser.jay"
{ 
		Arguments list = new Arguments (4);
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_465()
#line 3269 "cs-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		if (list [list.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) list [list.Count - 1]);
		
		list.Add ((Argument) yyVals[0+yyTop]);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }

void case_466()
#line 3279 "cs-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		NamedArgument a = (NamedArgument) yyVals[0+yyTop];
		for (int i = 0; i < list.Count; ++i) {
			NamedArgument na = list [i] as NamedArgument;
			if (na != null && na.Name == a.Name)
				report.Error (1740, na.Location, "Named argument `{0}' specified multiple times",
					na.Name);
		}
		
		list.Add (a);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }

void case_467()
#line 3294 "cs-parser.jay"
{
	  	report.Error (839, GetLocation (yyVals[0+yyTop]), "An argument is missing");
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_468()
#line 3299 "cs-parser.jay"
{
	  	report.Error (839, GetLocation (yyVals[-1+yyTop]), "An argument is missing");
	  	yyVal = null;
	  }

void case_473()
#line 3320 "cs-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Ref);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_474()
#line 3325 "cs-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_475()
#line 3330 "cs-parser.jay"
{
		yyVal = new Argument (new Arglist ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_476()
#line 3335 "cs-parser.jay"
{
		yyVal = new Argument (new Arglist (GetLocation (yyVals[-2+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_478()
#line 3347 "cs-parser.jay"
{
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_479()
#line 3355 "cs-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_480()
#line 3361 "cs-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }

void case_481()
#line 3367 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }

void case_482()
#line 3375 "cs-parser.jay"
{
		Arguments args = new Arguments (4);
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;
	  }

void case_483()
#line 3381 "cs-parser.jay"
{
		Arguments args = (Arguments) yyVals[-2+yyTop];
		if (args [args.Count - 1] is NamedArgument && !(yyVals[0+yyTop] is NamedArgument))
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
	  
		args.Add ((Argument) yyVals[0+yyTop]);
		lbag.AppendTo (args, GetLocation (yyVals[-1+yyTop]));
		yyVal = args;	  
	  }

void case_487()
#line 3409 "cs-parser.jay"
{
	  	yyVal = new ElementAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_488()
#line 3414 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = new ElementAccess (null, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_491()
#line 3436 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			if (lang_version <= LanguageVersion.ISO_2)
				FeatureIsNotAvailable (GetLocation (yyVals[-5+yyTop]), "object initializers");
				
			yyVal = new NewInitialize ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		} else {
			yyVal = new New ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], GetLocation (yyVals[-5+yyTop]));
		}
		
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_492()
#line 3449 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "collection initializers");
	  
		yyVal = new NewInitialize ((FullNamedExpression) yyVals[-1+yyTop], null, (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_493()
#line 3461 "cs-parser.jay"
{
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], (List<Expression>) yyVals[-3+yyTop],
				new ComposedTypeSpecifier (((List<Expression>) yyVals[-3+yyTop]).Count, GetLocation (yyVals[-4+yyTop])) {
	  				Next = (ComposedTypeSpecifier) yyVals[-1+yyTop]
			  	}, (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_494()
#line 3469 "cs-parser.jay"
{
	  	if (yyVals[0+yyTop] == null)
	  		report.Error (1586, GetLocation (yyVals[-3+yyTop]), "Array creation must have array size or array initializer");

		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-2+yyTop], (ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }

void case_495()
#line 3476 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "implicitly typed arrays");
	  
		yyVal = new ImplicitlyTypedArrayCreation ((ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_496()
#line 3483 "cs-parser.jay"
{
		report.Error (178, GetLocation (yyVals[-1+yyTop]), "Invalid rank specifier, expecting `,' or `]'");
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], null, GetLocation (yyVals[-6+yyTop]));
	  }

void case_497()
#line 3488 "cs-parser.jay"
{
		Error_SyntaxError (1526, yyToken, "Unexpected symbol");
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_499()
#line 3499 "cs-parser.jay"
{
		--lexer.parsing_type;
		yyVal = yyVals[0+yyTop];
	  }

void case_500()
#line 3507 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
	  		FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "anonymous types");

		yyVal = new NewAnonymousType ((List<AnonymousTypeParameter>) yyVals[-1+yyTop], current_container, GetLocation (yyVals[-3+yyTop]));
		
		/* TODO: lbag comma location*/
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_505()
#line 3530 "cs-parser.jay"
{
	  	var a = new List<AnonymousTypeParameter> (4);
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_506()
#line 3536 "cs-parser.jay"
{
	  	var a = (List<AnonymousTypeParameter>) yyVals[-2+yyTop];
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_507()
#line 3545 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[-2+yyTop];
	  	yyVal = new AnonymousTypeParameter ((Expression)yyVals[0+yyTop], lt.Value, lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_508()
#line 3551 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (new SimpleName (lt.Value, lt.Location),
	  		lt.Value, lt.Location);
	  }

void case_509()
#line 3557 "cs-parser.jay"
{
	  	MemberAccess ma = (MemberAccess) yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (ma, ma.Name, ma.Location);
	  }

void case_510()
#line 3562 "cs-parser.jay"
{
		report.Error (746, lexer.Location,
			"Invalid anonymous type member declarator. Anonymous type members must be a member assignment, simple name or member access expression");
		yyVal = null;
	  }

void case_514()
#line 3577 "cs-parser.jay"
{
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_515()
#line 3585 "cs-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension (1, GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_516()
#line 3590 "cs-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension ((int)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_521()
#line 3620 "cs-parser.jay"
{
		var ai = new ArrayInitializer (0, GetLocation (yyVals[-1+yyTop]));
		ai.VariableDeclaration = current_variable;
		lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		yyVal = ai;
	  }

void case_522()
#line 3627 "cs-parser.jay"
{
		var ai = new ArrayInitializer ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
		ai.VariableDeclaration = current_variable;
		if (yyVals[-1+yyTop] != null) {
			lbag.AddLocation (ai, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		}
		yyVal = ai;
	  }

void case_523()
#line 3641 "cs-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_524()
#line 3647 "cs-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }

void case_526()
#line 3661 "cs-parser.jay"
{
	  	lexer.TypeOfParsing = false;
		yyVal = new TypeOf ((FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_529()
#line 3672 "cs-parser.jay"
{
	 	Error_TypeExpected (lexer.Location);
	 	yyVal = null;
	 }

void case_530()
#line 3680 "cs-parser.jay"
{  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new SimpleName (lt.Value, (int) yyVals[0+yyTop], lt.Location);
	  }

void case_531()
#line 3686 "cs-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (int) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_532()
#line 3694 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-2+yyTop], lt.Value, lt.Location);		
	  }

void case_533()
#line 3700 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (int) yyVals[0+yyTop], lt.Location);		
	  }

void case_534()
#line 3706 "cs-parser.jay"
{
		var te = ((MemberName) yyVals[-3+yyTop]).GetTypeExpression ();
		if (te.HasTypeArguments)
			Error_TypeExpected (GetLocation (yyVals[0+yyTop]));

		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (te, lt.Value, (int) yyVals[0+yyTop], lt.Location);		
	  }

void case_535()
#line 3718 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "generics");

		yyVal = yyVals[0+yyTop];
	  }

void case_536()
#line 3728 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		if (lang_version == LanguageVersion.ISO_1)
			FeatureIsNotAvailable (lt.Location, "namespace alias qualifier");

		yyVal = lt;		
	  }

void case_537()
#line 3739 "cs-parser.jay"
{ 
		yyVal = new SizeOf ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_538()
#line 3747 "cs-parser.jay"
{
		yyVal = new CheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_539()
#line 3755 "cs-parser.jay"
{
		yyVal = new UnCheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_540()
#line 3763 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new Indirection ((Expression) yyVals[-3+yyTop], GetLocation (yyVals[-2+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }

void case_542()
#line 3775 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		if ((ParametersCompiled) yyVals[-2+yyTop] != ParametersCompiled.Undefined) {
			lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), savedOpenLocation, savedCloseLocation);
		} else {
			lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]));
		}
	  }

void case_548()
#line 3807 "cs-parser.jay"
{
		valid_param_mod = 0;
	  	yyVal = yyVals[-1+yyTop];
	  	savedOpenLocation = GetLocation (yyVals[-3+yyTop]);
	  	savedCloseLocation = GetLocation (yyVals[-2+yyTop]);
	  }

void case_549()
#line 3817 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "default value expression");

		yyVal = new DefaultValueExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_555()
#line 3842 "cs-parser.jay"
{
		yyVal = new Cast ((FullNamedExpression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_556()
#line 3850 "cs-parser.jay"
{
		current_block.ParametersBlock.IsAsync = true;
		yyVal = new Await ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	 }

void case_565()
#line 3891 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Multiply, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_566()
#line 3896 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Division, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_567()
#line 3901 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Modulus, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_569()
#line 3910 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Addition, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_571()
#line 3919 "cs-parser.jay"
{
	  	/* Shift/Reduce conflict*/
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
  	  }

void case_575()
#line 3936 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LeftShift, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_576()
#line 3941 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.RightShift, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_578()
#line 3950 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThan, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_579()
#line 3955 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThan, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_580()
#line 3960 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThanOrEqual, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_581()
#line 3965 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThanOrEqual, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_583()
#line 3974 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Equality, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_584()
#line 3979 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Inequality, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_586()
#line 3988 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseAnd, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_588()
#line 3997 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.ExclusiveOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_590()
#line 4006 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_592()
#line 4015 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalAnd, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_594()
#line 4024 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_596()
#line 4033 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "null coalescing operator");
			
		yyVal = new Nullable.NullCoalescingOperator ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_598()
#line 4044 "cs-parser.jay"
{
		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_600()
#line 4056 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_601()
#line 4061 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_602()
#line 4066 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_603()
#line 4071 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_604()
#line 4076 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_605()
#line 4081 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_606()
#line 4086 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_607()
#line 4091 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_608()
#line 4096 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_609()
#line 4101 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_610()
#line 4109 "cs-parser.jay"
{
		var pars = new List<Parameter> (4);
		pars.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = pars;
	  }

void case_611()
#line 4116 "cs-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter)yyVals[0+yyTop];
		if (pars[0].GetType () != p.GetType ()) {
			report.Error (748, p.Location, "All lambda parameters must be typed either explicitly or implicitly");
		}
		
		pars.Add (p);
		yyVal = pars;
	  }

void case_612()
#line 4130 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], null, lt.Location);
	  }

void case_613()
#line 4136 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, Parameter.Modifier.NONE, null, lt.Location);
	  }

void case_614()
#line 4142 "cs-parser.jay"
{
	  	var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new ImplicitLambdaParameter (lt.Value, lt.Location);
	  }

void case_616()
#line 4150 "cs-parser.jay"
{ 
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
		yyVal = new ParametersCompiled (pars_list.ToArray ());
	  }

void case_620()
#line 4166 "cs-parser.jay"
{
		Block b = end_block (lexer.Location);
		b.IsCompilerGenerated = true;
		b.AddStatement (new ContextualReturn ((Expression) yyVals[0+yyTop]));
		yyVal = b;
	  }

void case_622()
#line 4177 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);	
		yyVal = EmptyExpression.Null;
	  }

void case_623()
#line 4185 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];	
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), false, lt.Location);
	  }

void case_624()
#line 4191 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_625()
#line 4196 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), true, lt.Location);
	  }

void case_626()
#line 4202 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_628()
#line 4211 "cs-parser.jay"
{
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], false, GetLocation (yyVals[-4+yyTop]));
	  }

void case_629()
#line 4216 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_631()
#line 4225 "cs-parser.jay"
{
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], true, GetLocation (yyVals[-5+yyTop]));
	  }

void case_632()
#line 4230 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_639()
#line 4253 "cs-parser.jay"
{
		yyVal = new RefValueExpr ((Expression) yyVals[-3+yyTop], (FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-5+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_640()
#line 4258 "cs-parser.jay"
{
		yyVal = new RefTypeExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_641()
#line 4263 "cs-parser.jay"
{
		yyVal = new MakeRefExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));	  
	  }

void case_645()
#line 4292 "cs-parser.jay"
{
		MemberName name = MakeName ((MemberName) yyVals[0+yyTop]);
		Class c = new Class (current_namespace, current_class, name, (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]);
		if (((c.ModFlags & Modifiers.STATIC) != 0) && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (c.Location, "static classes");
		}
			
		push_current_class (c, yyVals[-3+yyTop]);
	  }

void case_646()
#line 4303 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;

		current_class.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);
		lbag.AddMember (current_class, GetModifierLocations (), GetLocation (yyVals[-5+yyTop]));

		if (doc_support) {
			current_container.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  }

void case_647()
#line 4315 "cs-parser.jay"
{
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_648()
#line 4321 "cs-parser.jay"
{
		lbag.AppendToMember (current_class, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_651()
#line 4336 "cs-parser.jay"
{
	    mod_locations = null;
		yyVal = ModifierNone;
	  }

void case_654()
#line 4346 "cs-parser.jay"
{ 
		var m1 = (Modifiers) yyVals[-1+yyTop];
		var m2 = (Modifiers) yyVals[0+yyTop];

		if ((m1 & m2) != 0) {
			report.Error (1004, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"Duplicate `{0}' modifier", ModifiersExtensions.Name (m2));
		} else if ((m2 & Modifiers.AccessibilityMask) != 0 && (m1 & Modifiers.AccessibilityMask) != 0 &&
			((m2 | m1 & Modifiers.AccessibilityMask) != (Modifiers.PROTECTED | Modifiers.INTERNAL))) {
			report.Error (107, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"More than one protection modifier specified");
		}
		
		yyVal = m1 | m2;
	  }

void case_655()
#line 4365 "cs-parser.jay"
{
		yyVal = Modifiers.NEW;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		
		if (current_container == module)
			report.Error (1530, GetLocation (yyVals[0+yyTop]), "Keyword `new' is not allowed on namespace elements");
	  }

void case_656()
#line 4373 "cs-parser.jay"
{
		yyVal = Modifiers.PUBLIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_657()
#line 4378 "cs-parser.jay"
{
		yyVal = Modifiers.PROTECTED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_658()
#line 4383 "cs-parser.jay"
{
		yyVal = Modifiers.INTERNAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_659()
#line 4388 "cs-parser.jay"
{
		yyVal = Modifiers.PRIVATE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_660()
#line 4393 "cs-parser.jay"
{
		yyVal = Modifiers.ABSTRACT;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_661()
#line 4398 "cs-parser.jay"
{
		yyVal = Modifiers.SEALED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_662()
#line 4403 "cs-parser.jay"
{
		yyVal = Modifiers.STATIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_663()
#line 4408 "cs-parser.jay"
{
		yyVal = Modifiers.READONLY;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_664()
#line 4413 "cs-parser.jay"
{
		yyVal = Modifiers.VIRTUAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_665()
#line 4418 "cs-parser.jay"
{
		yyVal = Modifiers.OVERRIDE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_666()
#line 4423 "cs-parser.jay"
{
		yyVal = Modifiers.EXTERN;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_667()
#line 4428 "cs-parser.jay"
{
		yyVal = Modifiers.VOLATILE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_668()
#line 4433 "cs-parser.jay"
{
		yyVal = Modifiers.UNSAFE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_669()
#line 4440 "cs-parser.jay"
{
		yyVal = Modifiers.ASYNC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_674()
#line 4461 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	 }

void case_675()
#line 4469 "cs-parser.jay"
{
		var constraints = new List<Constraints> (1);
		constraints.Add ((Constraints) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_676()
#line 4475 "cs-parser.jay"
{
		var constraints = (List<Constraints>) yyVals[-1+yyTop];
		Constraints new_constraint = (Constraints)yyVals[0+yyTop];

		foreach (Constraints c in constraints) {
			if (new_constraint.TypeParameter.Value == c.TypeParameter.Value) {
				report.Error (409, new_constraint.Location,
					"A constraint clause has already been specified for type parameter `{0}'",
					new_constraint.TypeParameter.Value);
			}
		}

		constraints.Add (new_constraint);
		yyVal = constraints;
	  }

void case_677()
#line 4494 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), (List<FullNamedExpression>) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }

void case_678()
#line 4502 "cs-parser.jay"
{
		var constraints = new List<FullNamedExpression> (1);
		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_679()
#line 4508 "cs-parser.jay"
{
		var constraints = (List<FullNamedExpression>) yyVals[-2+yyTop];
		var prev = constraints [constraints.Count - 1] as SpecialContraintExpr;
		if (prev != null && (prev.Constraint & SpecialConstraint.Constructor) != 0) {			
			report.Error (401, GetLocation (yyVals[-1+yyTop]), "The `new()' constraint must be the last constraint specified");
		}
		
		prev = yyVals[0+yyTop] as SpecialContraintExpr;
		if (prev != null) {
			if ((prev.Constraint & (SpecialConstraint.Class | SpecialConstraint.Struct)) != 0) {
				report.Error (449, prev.Location, "The `class' or `struct' constraint must be the first constraint specified");			
			} else {
			 	prev = constraints [0] as SpecialContraintExpr;
			 	if (prev != null && (prev.Constraint & SpecialConstraint.Struct) != 0) {			
					report.Error (451, GetLocation (yyVals[0+yyTop]), "The `new()' constraint cannot be used with the `struct' constraint");
				}
			}
		}

		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_680()
#line 4534 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast)
			report.Error (706, GetLocation (yyVals[0+yyTop]), "Invalid constraint type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
	  
	  	yyVal = yyVals[0+yyTop];
	  }

void case_681()
#line 4541 "cs-parser.jay"
{
		yyVal = new SpecialContraintExpr (SpecialConstraint.Constructor, GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_685()
#line 4561 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (lexer.Location, "generic type variance");

		yyVal = yyVals[0+yyTop];
	  }

void case_688()
#line 4595 "cs-parser.jay"
{
		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_690()
#line 4607 "cs-parser.jay"
{
	 	--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_691()
#line 4612 "cs-parser.jay"
{
	 	--lexer.parsing_block;
		yyVal = end_block (lexer.Location);
	  }

void case_692()
#line 4621 "cs-parser.jay"
{
		++lexer.parsing_block;
		current_block.StartLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_693()
#line 4626 "cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_701()
#line 4653 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_734()
#line 4717 "cs-parser.jay"
{
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }

void case_735()
#line 4722 "cs-parser.jay"
{
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }

void case_736()
#line 4727 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_737()
#line 4735 "cs-parser.jay"
{
		/* Uses lexer.Location because semicolon location is not kept in quick mode*/
		yyVal = new EmptyStatement (lexer.Location);
	  }

void case_738()
#line 4743 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		LabeledStatement labeled = new LabeledStatement (lt.Value, current_block, lt.Location);

		current_block.AddLabel (labeled);
		current_block.AddStatement (labeled);
	  }

void case_741()
#line 4756 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] is VarExpr)
			yyVals[-1+yyTop] = new SimpleName ("var", ((VarExpr) yyVals[-1+yyTop]).Location);
	  
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_742()
#line 4772 "cs-parser.jay"
{ 
		/* Ok, the above "primary_expression" is there to get rid of*/
		/* both reduce/reduce and shift/reduces in the grammar, it should*/
		/* really just be "type_name".  If you use type_name, a reduce/reduce*/
		/* creeps up.  If you use namespace_or_type_name (which is all we need*/
		/* really) two shift/reduces appear.*/
		/* */

		/* So the super-trick is that primary_expression*/
		/* can only be either a SimpleName or a MemberAccess. */
		/* The MemberAccess case arises when you have a fully qualified type-name like :*/
		/* Foo.Bar.Blah i;*/
		/* SimpleName is when you have*/
		/* Blah i;*/
		
		Expression expr = (Expression) yyVals[-1+yyTop];
		if (yyVals[0+yyTop] == null) {
			SimpleName sn = expr as SimpleName;
			if (sn != null && sn.Name == "var")
				yyVal = new VarExpr (sn.Location);
			else
				yyVal = yyVals[-1+yyTop];
		} else if (expr is ATypeNameExpression) {
			yyVal = new ComposedCast ((ATypeNameExpression)expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			Error_ExpectingTypeName (expr);
			yyVal = null;
		}
	  }

void case_743()
#line 4802 "cs-parser.jay"
{
		ATypeNameExpression expr = yyVals[-1+yyTop] as ATypeNameExpression;

		if (expr != null) {
			yyVal = new ComposedCast (expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			Error_ExpectingTypeName ((Expression)yyVals[-1+yyTop]);
			yyVal = expr;
		}
	  }

void case_744()
#line 4813 "cs-parser.jay"
{
		if (yyVals[0+yyTop] == null)
			yyVal = yyVals[-1+yyTop];
		else
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_747()
#line 4828 "cs-parser.jay"
{
		Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_749()
#line 4837 "cs-parser.jay"
{
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_751()
#line 4852 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_752()
#line 4859 "cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		lbag.AppendTo (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_753()
#line 4865 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockConstantDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_754()
#line 4872 "cs-parser.jay"
{
		if (current_variable.Initializer != null) {
			lbag.AddLocation (current_variable, GetLocation (yyVals[-6+yyTop]), savedLocation, GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (current_variable, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
		yyVal = current_variable;;
		current_variable = null;
	  }

void case_756()
#line 4886 "cs-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		lbag.AppendTo (current_variable, GetLocation (yyVals[-1+yyTop]));
	  }

void case_757()
#line 4891 "cs-parser.jay"
{
	  	if (yyToken == Token.OPEN_BRACKET_EXPR) {
			report.Error (650, lexer.Location,
				"Syntax error, bad array declarator. To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field, use the fixed keyword before the field type");
		} else {
			Error_SyntaxError (yyToken);
		}
	  }

void case_762()
#line 4913 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, null);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-1+yyTop]));
	  }

void case_763()
#line 4922 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_765()
#line 4938 "cs-parser.jay"
{
		savedLocation = GetLocation (yyVals[-1+yyTop]);
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
	  }

void case_770()
#line 4956 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_772()
#line 4969 "cs-parser.jay"
{
		yyVal = new StackAlloc ((Expression) yyVals[-3+yyTop], (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_773()
#line 4974 "cs-parser.jay"
{
		report.Error (1575, GetLocation (yyVals[-1+yyTop]), "A stackalloc expression requires [] after type");
		yyVal = new StackAlloc ((Expression) yyVals[0+yyTop], null, GetLocation (yyVals[-1+yyTop]));		
	  }

void case_774()
#line 4982 "cs-parser.jay"
{
		yyVal = yyVals[-1+yyTop];
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_778()
#line 5000 "cs-parser.jay"
{
		ExpressionStatement s = yyVals[0+yyTop] as ExpressionStatement;
		if (s == null) {
			Expression.Error_InvalidExpressionStatement (report, GetLocation (yyVals[0+yyTop]));
			yyVal = new StatementExpression (EmptyExpressionStatement.Instance);
		} else {
			yyVal = new StatementExpression (s);
		}
	  }

void case_779()
#line 5013 "cs-parser.jay"
{
		Expression expr = (Expression) yyVals[0+yyTop];
		ExpressionStatement s;

	        s = new OptionalAssign (new SimpleName ("$retval", lexer.Location), expr, lexer.Location);
		yyVal = new StatementExpression (s);
	  }

void case_780()
#line 5021 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_783()
#line 5035 "cs-parser.jay"
{ 
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
		
		yyVal = new If ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_784()
#line 5044 "cs-parser.jay"
{
		yyVal = new If ((BooleanExpression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
		
		if (yyVals[-2+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[-2+yyTop]));
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_786()
#line 5061 "cs-parser.jay"
{
		yyVal = new Switch ((Expression) yyVals[-5+yyTop], (ExplicitBlock) current_block.Explicit, (List<SwitchSection>) yyVals[-1+yyTop], GetLocation (yyVals[-7+yyTop]));	
		end_block (GetLocation (yyVals[0+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_787()
#line 5070 "cs-parser.jay"
{
		report.Warning (1522, 1, current_block.StartLocation, "Empty switch block"); 
		yyVal = new List<SwitchSection> ();
	  }

void case_789()
#line 5079 "cs-parser.jay"
{
		var sections = new List<SwitchSection> (4);

		sections.Add ((SwitchSection) yyVals[0+yyTop]);
		yyVal = sections;
	  }

void case_790()
#line 5086 "cs-parser.jay"
{
		var sections = (List<SwitchSection>) yyVals[-1+yyTop];

		sections.Add ((SwitchSection) yyVals[0+yyTop]);
		yyVal = sections;
	  }

void case_791()
#line 5093 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);	  
		yyVal = new List<SwitchSection> ();
	  }

void case_794()
#line 5112 "cs-parser.jay"
{
		var labels = new List<SwitchLabel> (2);

		labels.Add ((SwitchLabel) yyVals[0+yyTop]);
		yyVal = labels;
	  }

void case_795()
#line 5119 "cs-parser.jay"
{
		var labels = (List<SwitchLabel>) (yyVals[-1+yyTop]);
		labels.Add ((SwitchLabel) yyVals[0+yyTop]);

		yyVal = labels;
	  }

void case_796()
#line 5129 "cs-parser.jay"
{
	 	yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	 	lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	 }

void case_802()
#line 5148 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new While ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_803()
#line 5160 "cs-parser.jay"
{
		yyVal = new Do ((Statement) yyVals[-5+yyTop], (BooleanExpression) yyVals[-2+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_804()
#line 5168 "cs-parser.jay"
{
		start_block (GetLocation (yyVals[0+yyTop]));
		current_block.IsCompilerGenerated = true;
	  }

void case_806()
#line 5184 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		For f = new For ((Statement) yyVals[-6+yyTop], (BooleanExpression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-9+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, current_block.StartLocation, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));

		yyVal = end_block (GetLocation (yyVals[-5+yyTop]));
	  }

void case_807()
#line 5196 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = end_block (current_block.StartLocation);
	  }

void case_810()
#line 5209 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_811()
#line 5216 "cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
	  }

void case_819()
#line 5240 "cs-parser.jay"
{
	  	var sl = yyVals[-2+yyTop] as StatementList;
	  	if (sl == null) {
	  		sl = new StatementList ((Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop]);
			lbag.AddStatement (sl, GetLocation (yyVals[-1+yyTop]));
	  	} else {
	  		sl.Add ((Statement) yyVals[0+yyTop]);
	  		lbag.AppendTo (sl, GetLocation (yyVals[-1+yyTop]));
	  	}
	  		
		yyVal = sl;
	  }

void case_820()
#line 5256 "cs-parser.jay"
{
		report.Error (230, GetLocation (yyVals[-5+yyTop]), "Type and identifier are both required in a foreach statement");
		yyVal = null;
	  }

void case_821()
#line 5261 "cs-parser.jay"
{
		start_block (GetLocation (yyVals[-5+yyTop]));
		current_block.IsCompilerGenerated = true;
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		yyVal = li;
	  }

void case_822()
#line 5270 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Foreach f = new Foreach ((Expression) yyVals[-6+yyTop], (LocalVariable) yyVals[-1+yyTop], (Expression) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-8+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_829()
#line 5293 "cs-parser.jay"
{
		yyVal = new Break (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_830()
#line 5301 "cs-parser.jay"
{
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_831()
#line 5309 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new Goto (lt.Value, GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_832()
#line 5315 "cs-parser.jay"
{
		yyVal = new GotoCase ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_833()
#line 5320 "cs-parser.jay"
{
		yyVal = new GotoDefault (GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_834()
#line 5328 "cs-parser.jay"
{
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_835()
#line 5336 "cs-parser.jay"
{
		yyVal = new Throw ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_836()
#line 5344 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (yyVals[-1+yyTop] == null) {
			report.Error (1627, GetLocation (yyVals[0+yyTop]), "Expression expected after yield return");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.ParametersBlock.TopBlock.IsIterator = true;
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_837()
#line 5360 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.ParametersBlock.TopBlock.IsIterator = true;
		yyVal = new YieldBreak (lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_841()
#line 5386 "cs-parser.jay"
{
		yyVal = new TryFinally ((Statement) yyVals[-2+yyTop], (Block) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_842()
#line 5391 "cs-parser.jay"
{
		yyVal = new TryFinally (new TryCatch ((Block) yyVals[-3+yyTop], (List<Catch>) yyVals[-2+yyTop], GetLocation (yyVals[-4+yyTop]), true), (Block) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_843()
#line 5396 "cs-parser.jay"
{
		report.Error (1524, GetLocation (yyVals[-2+yyTop]), "Expected catch or finally");
		yyVal = null;
	  }

void case_844()
#line 5404 "cs-parser.jay"
{
		var l = new List<Catch> (2);

		l.Add ((Catch) yyVals[0+yyTop]);
		yyVal = l;
	  }

void case_845()
#line 5411 "cs-parser.jay"
{
		var l = (List<Catch>) yyVals[-1+yyTop];
		
		Catch c = (Catch) yyVals[0+yyTop];
		if (l [0].IsGeneral) {
			report.Error (1017, c.loc, "Try statement already has an empty catch block");
		} else {
			if (c.IsGeneral)
				l.Insert (0, c);
			else
				l.Add (c);
		}
		
		yyVal = l;
	  }

void case_849()
#line 5439 "cs-parser.jay"
{
		start_block (GetLocation (yyVals[-3+yyTop]));
		var c = new Catch (current_block, GetLocation (yyVals[-4+yyTop]));
		c.TypeExpression = (FullNamedExpression) yyVals[-2+yyTop];

		if (yyVals[-1+yyTop] != null) {
			var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
			c.Variable = new LocalVariable (current_block, lt.Value, lt.Location);
			current_block.AddLocalName (c.Variable);
		}

		lbag.AddLocation (c, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = c;
	  }

void case_851()
#line 5458 "cs-parser.jay"
{
	  	if (yyToken == Token.CLOSE_PARENS) {
			report.Error (1015, lexer.Location,
				"A type that derives from `System.Exception', `object', or `string' expected");
		} else {
			Error_SyntaxError (yyToken);
		}
		
		yyVal = new Catch (null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_854()
#line 5486 "cs-parser.jay"
{
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_856()
#line 5496 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Lock ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_857()
#line 5507 "cs-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.FixedVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Fixed.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_858()
#line 5517 "cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
	  }

void case_859()
#line 5522 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Fixed f = new Fixed ((Fixed.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-9+yyTop]));
		current_block.AddStatement (f);
		lbag.AddStatement (f, GetLocation (yyVals[-8+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_860()
#line 5535 "cs-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.UsingVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Using.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_861()
#line 5545 "cs-parser.jay"
{
		yyVal = current_variable;	  
		current_variable = null;
	  }

void case_862()
#line 5550 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Using u = new Using ((Using.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-9+yyTop]));
		lbag.AddStatement (u, GetLocation (yyVals[-8+yyTop]), GetLocation (yyVals[-2+yyTop]));
		current_block.AddStatement (u);
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_863()
#line 5560 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Using u = new Using ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (u, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
		yyVal = u;
	  }

void case_865()
#line 5576 "cs-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		yyVal = current_variable;
	  }

void case_866()
#line 5587 "cs-parser.jay"
{
		lexer.query_parsing = false;
			
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_867()
#line 5599 "cs-parser.jay"
{
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_868()
#line 5610 "cs-parser.jay"
{
	        lexer.query_parsing = false;
		yyVal = yyVals[-1+yyTop];

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_869()
#line 5617 "cs-parser.jay"
{
	        yyVal = yyVals[-1+yyTop];
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_870()
#line 5626 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop])));
	  }

void case_871()
#line 5634 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (
			new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
			}
		);
	  }

void case_872()
#line 5649 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop])));
	  }

void case_873()
#line 5657 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (
			new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
			}
		);
	  }

void case_875()
#line 5676 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_877()
#line 5691 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);

		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop])) {
			IdentifierType = (FullNamedExpression)yyVals[-4+yyTop]
		};
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_878()
#line 5708 "cs-parser.jay"
{
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[-1+yyTop];
		
		if (yyVals[0+yyTop] != null)
			head.Next = (Linq.AQueryClause)yyVals[0+yyTop];
				
		if (yyVals[-2+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-2+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }

void case_880()
#line 5724 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_882()
#line 5736 "cs-parser.jay"
{
		yyVal = new Linq.Select ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_883()
#line 5743 "cs-parser.jay"
{
	  	if (linq_clause_blocks == null)
	  		linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  	linq_clause_blocks.Push ((Linq.QueryBlock)current_block);
	  }

void case_884()
#line 5751 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_885()
#line 5758 "cs-parser.jay"
{
		yyVal = new Linq.GroupBy ((Linq.QueryBlock)current_block, (Expression)yyVals[-3+yyTop], linq_clause_blocks.Pop (), (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_889()
#line 5775 "cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-1+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }

void case_896()
#line 5795 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
	  	yyVal = new Linq.Let ((Linq.QueryBlock) current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_898()
#line 5814 "cs-parser.jay"
{
		yyVal = new Linq.Where ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_899()
#line 5824 "cs-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_900()
#line 5832 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_901()
#line 5840 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_902()
#line 5848 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();

		var lt = (Tokenizer.LocatedToken) yyVals[-10+yyTop];	
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-11+yyTop]));
			lbag.AddLocation (yyVal, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]));
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
			
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location);

			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-11+yyTop]));	
			lbag.AddLocation (yyVal, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		}

		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);
	  }

void case_903()
#line 5886 "cs-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_904()
#line 5894 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_905()
#line 5902 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_906()
#line 5910 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();
		
		var lt = (Tokenizer.LocatedToken) yyVals[-10+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;		
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
		
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location); /* TODO:*/
			
			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};			
		}
		
		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);		
	  }

void case_910()
#line 5965 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		yyVal = yyVals[0+yyTop];
	  }

void case_912()
#line 5976 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_913()
#line 5983 "cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	  }

void case_915()
#line 5992 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock ((Linq.QueryBlock) current_block, lexer.Location);	 
	 }

void case_916()
#line 5999 "cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	 }

void case_918()
#line 6011 "cs-parser.jay"
{
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_919()
#line 6016 "cs-parser.jay"
{
		yyVal = new Linq.OrderByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_921()
#line 6028 "cs-parser.jay"
{
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_922()
#line 6033 "cs-parser.jay"
{
		yyVal = new Linq.ThenByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_924()
#line 6043 "cs-parser.jay"
{
		/* query continuation block is not linked with query block but with block*/
		/* before. This means each query can use same range variable names for*/
		/* different identifiers.*/

		current_block.SetEndLocation (GetLocation (yyVals[-1+yyTop]));
		current_block = current_block.Parent;
	
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);		
	  }

void case_925()
#line 6059 "cs-parser.jay"
{
		var current_block = linq_clause_blocks.Pop ();	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
  		yyVal = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, null, rv, GetLocation (yyVals[-3+yyTop])) {
  			next = (Linq.AQueryClause)yyVals[0+yyTop]
  		};
	  }

void case_928()
#line 6086 "cs-parser.jay"
{ 
		current_container = new Class (current_namespace, current_class, new MemberName ("<InteractiveExpressionClass>"), Modifiers.PUBLIC, null);
		current_class = current_container;

		/* (ref object retval)*/
		Parameter [] mpar = new Parameter [1];
		mpar [0] = new Parameter (new TypeExpression (compiler.BuiltinTypes.Object, Location.Null), "$retval", Parameter.Modifier.REF, null, Location.Null);

		ParametersCompiled pars = new ParametersCompiled (mpar);
		var mods = Modifiers.PUBLIC | Modifiers.STATIC;
		if (settings.Unsafe)
			mods |= Modifiers.UNSAFE;

		current_local_parameters = pars;
		Method method = new Method (
			current_class,
			null, /* generic*/
			new TypeExpression (compiler.BuiltinTypes.Void, Location.Null),
			mods,
			new MemberName ("Host"),
			pars,
			null /* attributes */);
			
		current_container.AddMethod (method);			

		oob_stack.Push (method);
		++lexer.parsing_block;
		start_block (lexer.Location);
	  }

void case_929()
#line 6116 "cs-parser.jay"
{
		--lexer.parsing_block;
		Method method = (Method) oob_stack.Pop ();

		method.Block = (ToplevelBlock) end_block(lexer.Location);

		InteractiveResult = (Class) pop_current_class ();
		current_local_parameters = null;
	  }

void case_939()
#line 6159 "cs-parser.jay"
{
		module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)yyVals[-1+yyTop];
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		yyVal = null;
	  }

void case_940()
#line 6165 "cs-parser.jay"
{
		module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)yyVals[-3+yyTop];
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value);
	  }

void case_943()
#line 6180 "cs-parser.jay"
{
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-6+yyTop], new MemberName (MemberCache.IndexerNameAlias));
	  }

void case_944()
#line 6185 "cs-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Explicit;
		yyVal = null;
	  }

void case_945()
#line 6193 "cs-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Implicit;
		yyVal = null;
	  }

void case_946()
#line 6201 "cs-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = (Operator.OpType) yyVals[-1+yyTop];
		yyVal = null;
	  }

void case_954()
#line 6239 "cs-parser.jay"
{
		var parameters = new List<DocumentationParameter> ();
		parameters.Add ((DocumentationParameter) yyVals[0+yyTop]);
		yyVal = parameters;
	  }

void case_955()
#line 6245 "cs-parser.jay"
{
		var parameters = yyVals[-2+yyTop] as List<DocumentationParameter>;
		parameters.Add ((DocumentationParameter) yyVals[0+yyTop]);
		yyVal = parameters;
	  }

void case_956()
#line 6254 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] != null)
			yyVal = new DocumentationParameter ((Parameter.Modifier) yyVals[-1+yyTop], (FullNamedExpression) yyVals[0+yyTop]);
		else
			yyVal = new DocumentationParameter ((FullNamedExpression) yyVals[0+yyTop]);
	  }

#line default
   static readonly short [] yyLhs  = {              -1,
    0,    4,    0,    0,    1,    1,    1,    1,    2,    2,
   11,   11,   12,   12,   13,   13,   14,   14,   15,   15,
   16,   21,   22,   19,   20,   20,   20,   24,   24,   25,
   25,   18,    7,    7,    6,    6,   23,   23,    8,    8,
   26,   26,   27,   27,   27,   27,   27,    9,    9,   10,
   10,   35,   33,   38,   34,   34,   36,   36,   36,   36,
   37,   37,   42,   39,   40,   41,   41,   43,   43,   43,
   43,   43,   44,   44,   48,   45,   47,   49,   49,   49,
   50,   50,   51,   51,   52,   52,   52,   52,   52,   52,
   52,   52,   52,   52,   52,   65,   67,   70,   71,   29,
   29,   73,   69,   72,   72,   74,   74,   75,   75,   75,
   75,   75,   75,   75,   75,   75,   75,   78,   53,   79,
   79,   80,   80,   81,   83,   77,   77,   82,   82,   88,
   54,   92,   54,   54,   87,   95,   87,   89,   89,   96,
   96,   97,   98,   97,   93,   93,   99,   99,  100,  101,
   91,   91,   94,   94,   94,  104,   55,  107,  108,  102,
  109,  110,  111,  102,  102,  103,  103,  106,  106,  114,
  114,  114,  114,  114,  114,  114,  114,  114,  114,  115,
  115,  118,  118,  118,  121,  118,  119,  119,  122,  122,
  123,  123,  123,  116,  116,  116,  124,  124,  124,  117,
  126,  128,  129,   56,  131,  132,  133,   58,  127,  127,
  127,  127,  127,  137,  134,  138,  135,  136,  136,  136,
  139,  140,  141,  143,   30,   30,  142,  142,  144,  144,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  148,
   59,  147,  147,  149,  149,  152,  146,  146,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  154,  153,  155,  153,  153,  153,   60,  158,  160,  156,
  157,  157,  159,  159,  164,  162,  165,  162,  162,  166,
   61,  168,   57,  171,  172,   57,  167,  174,  167,  169,
  169,  175,  175,  176,  177,  176,  178,  173,  170,  170,
  170,  170,  170,  182,  179,  183,  180,  181,  181,  185,
  187,  188,   31,  184,  184,  184,  186,  186,  186,  189,
  189,  190,  191,  190,  192,  193,  194,   32,  195,  195,
   17,   17,  196,  196,  199,  198,  198,  198,  200,  200,
  202,   64,  125,  105,  105,  130,  130,  203,  203,  203,
  201,  201,  204,  204,  205,  205,  207,  207,   86,   76,
   76,   90,   90,  120,  120,  150,  150,  208,  208,  208,
  208,  208,  212,  212,  213,  213,  211,  211,  211,  211,
  211,  211,  211,  214,  214,  214,  214,  214,  214,  214,
  214,  214,  215,  215,  215,  215,  215,  215,  215,  215,
  215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
  215,  215,  216,  216,  216,  217,  217,  217,  237,  237,
  238,  238,  239,  239,  219,  219,  236,  236,  236,  236,
  236,  236,  236,  236,  221,  240,  240,  241,  241,  242,
  242,  244,  244,  244,  245,  245,  245,  245,  245,  246,
  246,  163,  163,  250,  250,  250,  250,  250,  252,  252,
  251,  251,  253,  253,  253,  253,  254,  222,  249,  249,
  249,  255,  255,  256,  256,  223,  224,  224,  225,  226,
  227,  227,  218,  218,  218,  218,  218,  261,  257,  228,
  262,  262,  263,  263,  264,  264,  265,  265,  265,  265,
  258,  258,  209,  209,  260,  260,  266,  266,  259,  259,
   85,   85,  267,  267,  268,  229,  269,  269,  269,  270,
  270,  270,  270,  270,  271,  197,  230,  231,  232,  233,
  273,  234,  274,  234,  272,  272,  276,  275,  220,  277,
  277,  277,  277,  277,  279,  280,  278,  278,  278,  278,
  278,  278,  278,  281,  281,  281,  281,  282,  282,  282,
  282,  282,  282,  283,  283,  283,  284,  284,  284,  284,
  284,  285,  285,  285,  286,  286,  287,  287,  288,  288,
  289,  289,  290,  290,  291,  291,  292,  292,  293,  293,
  293,  293,  293,  293,  293,  293,  293,  293,  293,  294,
  294,  295,  295,  295,  296,  296,  297,  297,  300,  298,
  299,  299,  302,  301,  303,  301,  304,  305,  301,  306,
  307,  301,   46,   46,  247,  247,  247,  247,  235,  235,
  235,   84,  309,  310,  311,  312,  313,   28,   63,   63,
   62,   62,  112,  112,  314,  314,  314,  314,  314,  314,
  314,  314,  314,  314,  314,  314,  314,  314,  314,   66,
   66,   68,   68,   68,  315,  315,  316,  317,  317,  318,
  318,  318,  318,  206,  206,  319,  319,  321,  113,  322,
  322,  323,  161,  320,  320,  324,  324,  325,  325,  325,
  325,  329,  329,  330,  330,  330,  327,  327,  327,  327,
  327,  327,  327,  327,  327,  327,  327,  327,  327,  331,
  331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
  331,  331,  345,  345,  345,  345,  332,  346,  328,  347,
  347,  348,  348,  348,  348,  348,  348,  210,  210,  349,
  351,  326,  354,  326,  350,  350,  350,  352,  352,  357,
  357,  358,  358,  353,  353,  355,  355,  359,  359,  360,
  356,  356,  356,  333,  333,  344,  344,  361,  362,  362,
  334,  334,  363,  363,  366,  364,  365,  365,  367,  367,
  367,  370,  368,  369,  369,  371,  371,  335,  335,  335,
  335,  372,  373,  377,  374,  376,  376,  378,  378,  382,
  381,  381,  379,  379,  380,  380,  384,  383,  383,  375,
  385,  375,  336,  336,  336,  336,  336,  336,  386,  387,
  388,  388,  388,  389,  390,  391,  391,  392,  392,  337,
  337,  337,  337,  393,  393,  395,  395,  394,  396,  394,
  394,  338,  339,  397,  342,  340,  399,  400,  343,  401,
  402,  341,  341,  398,  398,  308,  308,  308,  308,  403,
  403,  405,  405,  407,  406,  408,  406,  404,  404,  404,
  412,  410,  413,  414,  410,  409,  409,  415,  415,  416,
  416,  416,  416,  416,  421,  417,  422,  418,  423,  424,
  425,  419,  427,  428,  429,  419,  426,  426,  431,  420,
  430,  434,  430,  433,  436,  433,  432,  432,  432,  435,
  435,  435,  411,  437,  411,    3,    3,  438,    3,    3,
  439,  439,  248,  248,  243,  243,    5,  440,  440,  440,
  440,  444,  440,  440,  440,  440,  441,  441,  442,  445,
  442,  443,  443,  446,  446,  447,
  };
   static readonly short [] yyLen = {           2,
    2,    0,    3,    1,    2,    4,    3,    1,    0,    1,
    1,    2,    4,    2,    1,    2,    1,    1,    5,    2,
    3,    0,    0,   11,    1,    3,    1,    0,    1,    0,
    1,    1,    0,    1,    0,    1,    0,    1,    1,    2,
    1,    1,    1,    1,    1,    1,    1,    0,    1,    1,
    2,    0,    3,    0,    6,    3,    1,    1,    1,    1,
    1,    3,    0,    3,    1,    0,    3,    0,    1,    1,
    3,    3,    1,    1,    0,    4,    4,    0,    1,    1,
    0,    1,    1,    2,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    0,    0,    0,    0,   13,
    5,    0,    4,    0,    1,    1,    2,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    0,    9,    0,
    1,    1,    2,    3,    0,    3,    1,    1,    1,    0,
    8,    0,    9,    6,    0,    0,    3,    0,    1,    1,
    2,    2,    0,    5,    0,    1,    1,    2,    3,    0,
    4,    2,    1,    1,    1,    0,    3,    0,    0,   10,
    0,    0,    0,   12,    8,    1,    1,    0,    1,    1,
    3,    3,    3,    5,    3,    5,    1,    1,    1,    1,
    3,    4,    6,    4,    0,    7,    0,    1,    1,    2,
    1,    1,    1,    4,    6,    4,    1,    2,    2,    1,
    0,    0,    0,   10,    0,    0,    0,   13,    1,    2,
    1,    2,    1,    0,    5,    0,    5,    1,    1,    1,
    0,    0,    0,    0,   15,    5,    0,    1,    1,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    0,
    5,    1,    1,    1,    1,    0,    7,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    0,    7,    0,    7,    2,    2,    2,    0,    0,    9,
    1,    1,    0,    1,    0,    6,    0,    6,    1,    0,
    8,    0,    9,    0,    0,   10,    0,    0,    3,    0,
    1,    1,    2,    2,    0,    5,    0,    2,    2,    2,
    1,    1,    1,    0,    5,    0,    5,    1,    1,    0,
    0,    0,   12,    0,    2,    2,    0,    1,    2,    1,
    3,    2,    0,    5,    0,    0,    0,   13,    0,    1,
    1,    3,    1,    4,    2,    0,    3,    2,    1,    3,
    0,    3,    1,    1,    3,    1,    2,    3,    4,    4,
    0,    3,    1,    3,    3,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    2,    2,    2,    2,
    2,    2,    1,    3,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    2,    2,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    3,    3,    4,    4,    4,    3,
    3,    4,    3,    4,    4,    0,    1,    3,    4,    0,
    1,    1,    3,    2,    3,    1,    2,    3,    2,    1,
    1,    0,    1,    1,    3,    3,    2,    2,    1,    1,
    1,    1,    2,    2,    4,    3,    1,    4,    1,    3,
    2,    1,    3,    1,    1,    1,    4,    3,    2,    2,
    6,    3,    7,    4,    3,    7,    3,    0,    2,    4,
    1,    2,    0,    1,    1,    3,    3,    1,    1,    1,
    0,    1,    1,    2,    2,    3,    1,    2,    0,    1,
    2,    4,    1,    3,    0,    5,    1,    1,    1,    2,
    3,    3,    4,    4,    1,    2,    4,    4,    4,    4,
    0,    4,    0,    5,    0,    1,    0,    4,    4,    1,
    2,    2,    1,    1,    4,    2,    1,    2,    2,    2,
    2,    2,    2,    1,    3,    3,    3,    1,    3,    3,
    3,    3,    3,    1,    3,    3,    1,    3,    3,    3,
    3,    1,    3,    3,    1,    3,    1,    3,    1,    3,
    1,    3,    1,    3,    1,    3,    1,    5,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    1,
    3,    3,    2,    1,    0,    1,    1,    1,    0,    2,
    1,    1,    0,    4,    0,    5,    0,    0,    7,    0,
    0,    8,    1,    1,    1,    1,    1,    1,    6,    4,
    4,    1,    1,    0,    0,    0,    0,   15,    0,    1,
    0,    1,    1,    2,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    0,
    2,    0,    1,    1,    1,    2,    4,    1,    3,    1,
    3,    1,    1,    0,    1,    1,    1,    0,    4,    1,
    1,    0,    4,    0,    1,    1,    2,    1,    1,    1,
    1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    0,    4,    1,
    2,    2,    2,    2,    2,    2,    1,    1,    2,    1,
    0,    6,    0,    7,    0,    2,    1,    0,    1,    1,
    2,    2,    4,    0,    2,    0,    1,    1,    2,    4,
    1,    5,    2,    2,    2,    2,    2,    1,    1,    1,
    1,    1,    5,    7,    0,    8,    0,    1,    1,    2,
    1,    0,    3,    1,    2,    3,    1,    1,    1,    1,
    1,    5,    7,    0,    4,    7,    1,    0,    1,    0,
    5,    1,    0,    1,    0,    1,    1,    1,    3,    6,
    0,    9,    1,    1,    1,    1,    1,    1,    2,    2,
    3,    4,    3,    3,    3,    4,    3,    0,    1,    3,
    4,    5,    3,    1,    2,    0,    1,    2,    0,    7,
    3,    2,    2,    0,    3,    5,    0,    0,   10,    0,
    0,   10,    5,    0,    2,    2,    2,    2,    2,    4,
    5,    4,    5,    0,    5,    0,    6,    3,    2,    1,
    0,    3,    0,    0,    6,    0,    1,    1,    2,    1,
    1,    1,    1,    1,    0,    5,    0,    3,    0,    0,
    0,   12,    0,    0,    0,   13,    0,    2,    0,    3,
    1,    0,    4,    1,    0,    4,    1,    2,    2,    1,
    2,    2,    0,    0,    4,    2,    3,    0,    4,    2,
    2,    3,    0,    1,    1,    1,    2,    2,    2,    4,
    3,    0,    7,    4,    4,    3,    1,    3,    0,    0,
    4,    0,    1,    1,    3,    2,
  };
   static readonly short [] yyDefRed = {            0,
    8,    0,    0,    0,    0,    0,    0,    0,    2,    4,
    0,    0,   11,   14,    0,  926,    0,    0,  930,    0,
    0,   15,   17,   18,  389,  395,  402,  390,  392,    0,
  391,    0,  398,  400,  387,    0,  394,  396,  388,  399,
  401,  397,  351,  947,    0,  393,  937,    0,   10,    1,
    0,    0,    0,   12,    0,  780,    0,    0,    0,    0,
    0,    0,    0,    0,  430,    0,    0,    0,    0,    0,
    0,    0,  428,    0,    0,    0,  486,    0,  429,    0,
  525,    0,  854,    0,    0,    0,  638,    0,    0,    0,
    0,    0,    0,    0,  688,    0,  737,    0,    0,    0,
    0,    0,    0,    0,    0,  427,    0,  627,    0,  779,
  720,    0,    0,    0,    0,  404,  405,    0,  407,  408,
  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,
  419,  420,  421,  422,  425,  426,  634,  557,    0,  553,
  554,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  635,  633,  636,  637,  704,  706,    0,  702,
  705,  721,  723,  724,  725,  726,  727,  728,  729,  730,
  731,  732,  722,    0,    0,    0,  781,  782,  798,  799,
  800,  801,  823,  824,  825,  826,  827,  828,    0,    0,
    0,   20,    0,    0,    0,  341,    0,  343,  934,   16,
  927,    0,    0,  254,  253,  250,  255,  256,  249,  268,
  267,  260,  261,  257,  259,  258,  262,  251,  252,  263,
  264,  270,  269,  265,  266,    0,    0,  950,    0,  939,
    0,  938,    3,   52,    0,    0,    0,   42,   39,   41,
   43,   44,   45,   46,   47,   50,   13,    0,    0,    0,
  829,  431,  432,  852,    0,    0,    0,    0,    0,    0,
  406,    0,  830,    0,  547,  541,  546,  736,  778,  707,
  734,  733,  735,  708,  709,  710,  711,  712,  713,  714,
  715,  716,  717,  718,  719,    0,    0,    0,  804,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  839,    0,  403,    0,    0,    0,    0,    0,    0,
  853,    0,    0,    0,  750,  746,    0,    0,    0,    0,
    0,    0,  370,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  630,  556,    0,    0,  552,  558,  559,  551,
  563,  562,  560,  561,    0,    0,  623,  738,  536,    0,
  424,  423,    0,    0,    0,    0,  340,    0,  744,  745,
    0,  489,  490,    0,    0,    0,  742,  743,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  929,  703,  751,  741,    0,  776,  777,  880,
  897,    0,    0,    0,  909,  868,  866,  890,    0,    0,
  888,  891,  892,  893,  894,  869,  867,    0,    0,    0,
  345,    0,   21,    0,    0,    0,  946,    0,  352,    0,
    0,    0,  948,    0,    0,   40,  660,  666,  658,    0,
  655,  665,  659,  657,  656,  663,  661,  662,  668,  664,
  667,  669,    0,    0,  653,   51,  488,    0,    0,  484,
  485,    0,  482,    0,  753,    0,    0,    0,    0,  774,
  775,    0,    0,    0,  642,    0,  833,  831,  643,    0,
    0,  510,    0,    0,    0,  501,    0,  505,  515,  517,
    0,  497,    0,    0,    0,    0,    0,  492,    0,  495,
    0,  499,  372,  834,    0,    0,  835,  843,    0,    0,
    0,  844,    0,    0,  855,    0,    0,  749,    0,  382,
    0,  378,  379,    0,  377,  380,  381,    0,    0,    0,
  564,    0,    0,  543,  625,    0,  701,    0,    0,  696,
  698,  699,  700,  435,  436,  837,    0,    0,    0,  348,
  349,    0,  192,  191,  193,    0,    0,    0,    0,  374,
    0,  610,    0,    0,  440,    0,  443,    0,  441,    0,
    0,    0,    0,    0,    0,  469,  472,    0,    0,  464,
  471,  470,    0,  599,  600,  601,  602,  603,  604,  605,
  606,  607,  609,  608,  565,  567,  566,  572,  573,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  596,    0,    0,  514,    0,    0,
    0,    0,    0,    0,    0,  881,  883,  879,    0,  889,
    0,    0,  342,  944,  945,  366,    0,    0,  363,    0,
    0,  189,    0,    0,  954,  940,  942,   60,   58,   59,
    0,    0,   53,    0,    0,   61,   63,   27,   25,    0,
    0,    0,  650,    0,  654,  439,    0,  487,    0,  538,
    0,  549,  179,  200,    0,    0,  169,    0,    0,    0,
  180,  542,    0,  857,  807,    0,  818,  805,    0,  809,
    0,    0,    0,  832,    0,    0,    0,  500,    0,  516,
  518,    0,    0,  456,    0,    0,  452,    0,    0,  479,
    0,  520,  494,    0,  155,  521,  153,  154,  523,    0,
  537,    0,  848,    0,  841,    0,  845,  529,    0,    0,
    0,  367,    0,  527,    0,    0,  539,    0,  860,    0,
  872,    0,  870,    0,    0,  640,  641,    0,    0,    0,
  690,  691,  689,  697,  836,  618,  624,  617,    0,  739,
    0,  347,  613,    0,    0,    0,  555,  444,  438,  442,
  437,  540,  478,  477,  474,  473,    0,  468,  433,  434,
  445,    0,    0,  757,    0,    0,  898,  874,    0,  899,
    0,  895,    0,  910,    0,    0,    0,    0,  878,   19,
  344,  687,  686,    0,  685,    0,  362,  956,  190,  951,
    0,    0,   54,    0,    0,    0,    0,    0,    0,  369,
    0,  644,    0,    0,   80,   79,    0,  483,    0,    0,
    0,    0,    0,  548,    0,    0,    0,    0,    0,  810,
    0,    0,    0,    0,    0,  856,  507,  506,  459,    0,
    0,  935,  936,  448,  454,    0,  457,    0,  481,    0,
    0,    0,    0,    0,  785,  851,    0,  842,  535,  530,
    0,    0,  526,    0,  863,    0,  802,  873,  871,    0,
  544,  626,    0,  622,  621,  620,  350,  612,  611,  628,
  476,    0,  466,  465,  598,    0,  771,  756,    0,    0,
    0,  760,    0,  876,    0,  903,    0,  918,  919,  912,
  882,  884,  924,  365,  364,  955,    0,    0,   62,   56,
    0,   64,   26,   23,    0,    0,  320,    0,  226,    0,
  101,    0,   77,  765,  128,  129,    0,    0,    0,  768,
  198,  199,    0,    0,    0,    0,  172,  181,  173,  175,
    0,    0,    0,    0,  814,    0,  819,  820,    0,    0,
  458,  460,  461,  455,  449,  453,    0,  512,    0,  480,
  491,  447,  524,  522,    0,  847,    0,    0,  531,    0,
    0,  639,  631,    0,  475,    0,    0,  752,  761,  875,
    0,    0,    0,  896,    0,    0,    0,  943,    0,    0,
    0,   69,   70,   73,   74,    0,  335,  326,  325,    0,
  645,  222,   97,    0,  754,  769,  184,    0,  196,    0,
    0,    0,  803,  865,    0,    0,    0,  821,  784,  496,
  493,  791,    0,  797,    0,    0,  789,    0,  794,  849,
  534,  533,    0,    0,  629,    0,    0,  877,  900,    0,
    0,    0,  914,    0,  925,    0,   75,   67,    0,    0,
    0,  321,    0,    0,    0,    0,    0,  185,    0,  176,
  174,  858,  811,    0,    0,  816,    0,    0,  786,  790,
    0,  795,    0,  861,  632,    0,  763,    0,  904,  921,
  922,  915,  885,   55,    0,   71,   72,    0,    0,    0,
    0,    0,    0,    0,  770,  183,    0,  195,    0,    0,
  822,  796,    0,  692,  850,    0,  772,    0,    0,    0,
   76,    0,    0,  336,    0,  322,    0,  330,  386,  385,
    0,  383,  674,    0,  646,    0,  675,  223,   98,  186,
  859,  806,    0,  862,  901,    0,  916,    0,    0,    0,
    0,    0,    0,    0,    0,  676,    0,    0,    0,    0,
  905,   29,   24,  337,    0,    0,  331,  384,    0,    0,
    0,  102,   99,  693,    0,    0,    0,    0,  323,  682,
    0,  683,  680,    0,  678,   95,    0,   94,    0,    0,
   83,   85,   86,   87,   88,   89,   90,   91,   92,   93,
  156,    0,    0,  239,  231,  232,  233,  234,  235,  236,
  237,  238,    0,    0,  229,    0,    0,    0,  902,    0,
  338,  334,    0,    0,    0,  647,   84,    0,  282,  277,
  281,    0,  224,  230,  116,  108,  109,  110,  111,  112,
  113,  114,  115,  117,    0,    0,  106,  100,  908,  906,
  681,  679,    0,    0,    0,    0,    0,    0,    0,  290,
    0,    0,  240,    0,    0,  248,    0,  167,  157,  166,
    0,  103,  107,    0,    0,  276,    0,    0,  275,    0,
  161,    0,    0,  356,    0,  354,    0,    0,  201,    0,
    0,    0,    0,    0,  648,  225,  118,    0,  353,    0,
    0,    0,    0,  132,    0,    0,    0,    0,    0,    0,
  158,    0,    0,  205,    0,  357,    0,  243,  242,  241,
    0,    0,  294,    0,  273,  134,    0,  271,    0,    0,
    0,  136,    0,  358,    0,    0,  202,    0,    0,    0,
  355,  246,  127,  125,    0,    0,  298,    0,    0,    0,
    0,    0,  162,    0,  279,    0,    0,    0,    0,  140,
    0,    0,    0,    0,  359,  360,    0,    0,    0,    0,
    0,  122,  313,    0,  295,    0,    0,  307,    0,    0,
    0,  302,    0,  152,    0,    0,    0,    0,  147,    0,
    0,  291,    0,  137,    0,  131,  141,  159,  165,  213,
    0,  203,    0,    0,    0,    0,  126,    0,  119,  123,
    0,    0,    0,  309,    0,  310,  299,    0,    0,  293,
  303,  274,    0,    0,  133,  148,  272,    0,  289,    0,
  280,  284,  143,    0,    0,    0,  210,  212,  206,  247,
  124,  314,  316,  296,    0,    0,  308,  305,  151,  149,
  163,    0,    0,    0,  160,  214,  216,  204,    0,    0,
    0,  307,    0,  285,  287,  144,    0,    0,  207,  318,
  319,  315,  317,  306,  164,    0,    0,  220,  219,  218,
  215,  217,    0,    0,    0,  208,  286,  288,
  };
  protected static readonly short [] yyDgoto  = {             7,
    8,   50,    9,   51,   10,   11,   52,  235,  685,  429,
   12,   13,   53,   22,   23,   24,  321,  195,  238,  670,
  828, 1016, 1133, 1480,  825,  239,  240,  241,  242,  243,
  244,  245,  246,  663,  444,  664,  665,  928,  666,  667,
  932,  826, 1011, 1012, 1013,  269,  587, 1105,  837, 1199,
 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209,
 1210,  463,  674, 1296,  942, 1112, 1075, 1145, 1183, 1168,
 1227, 1255, 1226, 1256, 1257, 1140, 1355, 1332, 1380, 1381,
 1382,  944, 1378,  945,  728, 1272, 1343, 1319, 1368,  512,
 1361, 1337, 1397,  907, 1366, 1369, 1370, 1464, 1398, 1399,
 1395, 1211, 1279, 1238, 1297,  686, 1345, 1444, 1316, 1401,
 1473,  464,  270,  687,  688,  689,  690,  691,  650,  568,
 1117,  651,  652,  843, 1299, 1323, 1412, 1373, 1446, 1300,
 1348, 1469, 1493, 1413, 1414, 1491, 1477, 1478,  940, 1074,
 1167, 1223, 1281, 1224, 1225, 1273, 1330, 1303, 1274,  323,
  226, 1377, 1276, 1362, 1359, 1212, 1240, 1293, 1441, 1403,
 1125, 1442,  588, 1486, 1487, 1292, 1358, 1334, 1390, 1385,
 1356, 1422, 1427, 1388, 1391, 1392, 1472, 1428, 1386, 1387,
 1482, 1470, 1471,  937, 1020, 1136, 1110, 1161, 1137, 1138,
 1175, 1071, 1159, 1187,  532,  196,  112,  431,  198,  562,
  439,  227, 1311,  648,  649,  814,  830,  324,  406,  530,
  303, 1141, 1142,   46,  114,  304,  116,  117,  118,  119,
  120,  121,  122,  123,  124,  125,  126,  127,  128,  129,
  130,  131,  132,  133,  134,  135,  136,  255,  791,  981,
  508,  715,  864,  716,  717,  974,  137,  201,  721,  589,
  590,  591,  592,  785,  472,  473,  298,  979,  723,  407,
  300,  495,  496,  497,  498,  501,  730,  310,  745,  746,
  880,  266,  478,  758,  267,  477,  138,  139,  140,  141,
  142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
  152,  153,  154,  571,  572,  573,  767,  768,  896,  769,
  155,  558,  759,  353,  994,  546, 1054,  156,  490,  938,
 1073, 1165, 1277,  465, 1146, 1147, 1194, 1195,  815,  548,
  335,  763, 1153,  549,  550,  271,  272,  273,  159,  160,
  161,  274,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,  285,  173,  286,  559,  174,  175,  317,  796,
  627,  910,  840,  681,  948,  908,  911,  912,  949,  950,
  287,  176,  177,  178, 1045,  985, 1046, 1047, 1048, 1091,
 1049,  179,  180,  181,  182,  698,  483,  699,  966, 1084,
  700,  964,  701, 1086, 1087,  183,  184,  185,  186,  187,
  188,  305,  521,  522,  987, 1093,  313,  963,  849, 1119,
  886, 1126,  189,  417,  190,  418,  913, 1001,  419,  639,
  809,  806,  807, 1006,  420,  421,  422,  423,  424,  425,
  917,  629,  915, 1098, 1170, 1229, 1003, 1129, 1186,  804,
  635,  805, 1062, 1005, 1063, 1130, 1007,   17,   19,   47,
   48,  230,  653,  822,  440,  654,  655,
  };
  protected static readonly short [] yySindex = {         -157,
    0, -201, -137,  -18,   44,11653,    0,  248,    0,    0,
   44,  -18,    0,    0,  104,    0, 6498,   44,    0, -196,
 -237,    0,    0,    0,    0,    0,    0,    0,    0,   99,
    0,  223,    0,    0,    0, 1006,    0,    0,    0,    0,
    0,    0,    0,    0,   93,    0,    0,  544,    0,    0,
  248,  259,   44,    0,  258,    0,   87,  294,  353,11153,
  318,  -29,  328, 6655,    0,  -29,  -29,  -29, -175,  -29,
  -29,  587,    0,10172,  -29,  -29,    0,10172,    0,  388,
    0,  353,    0,  -29,  330,  -29,    0, 8204,11672,  390,
  -29,  -29, -162,10976,    0,10172,    0,10852,10852,10852,
10852,10852,10852,10852,10852,    0, -103,    0,11726,    0,
    0,  363, -260,  795,  302,    0,    0,  447,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1069,    0,
    0,  685,   66,  498,  616,  597,  456,  462,  480,  505,
  137,  548,    0,    0,    0,    0,    0,    0, 3318,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  571,  600, -285,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -105,   95,
  259,    0,  401,  606,  627,    0,  615,    0,    0,    0,
    0,11726,11726,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  674,  633,    0,  646,    0,
 -249,    0,    0,    0,  259,12475,  259,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  830,  688,10308,
    0,    0,    0,    0,10172,  -29,  -29,  834,  512,  795,
    0,  698,    0,11726,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  801,   74,11153,    0,11726,
10172,  757,  776,10172,10172, 4520,  326,  109,  779,11743,
  264,    0,  782,    0,  822,11726,10172,  840,  516,  -29,
    0,10172,  388, 9628,    0,    0,  330,10172,  330, -205,
  547,  803,    0,  600,  302,   -1,  810,10172,10172,10172,
  328,  892,    0,    0, 6812,  -56,    0,    0,    0,    0,
    0,    0,    0,    0,  870,10172,    0,    0,    0, 1324,
    0,    0,11582, -289,  860,  839,    0,  -84,    0,    0,
  263,    0,    0,  842,10308, 9356,    0,    0,10852,10172,
10172,10172,10172,10172,10172,10172,10172,10172,10172,10172,
10852,10852,10852,11726,11726,10852,10852,10852,10852,10852,
10852,10852,10852,10852,10852,10852,10852,10852,10852,10852,
10852,10172,    0,    0,    0,    0,  600,    0,    0,    0,
    0,11797,11821,  849,    0,    0,    0,    0,   33,  856,
    0,    0,    0,    0,    0,    0,    0,  259,  259,  853,
    0,  867,    0,  839,  674,  674,    0,  -86,    0, -206,
  674,  909,    0, -198,12475,    0,    0,    0,    0, -192,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  235,12518,    0,    0,    0,  839,  419,    0,
    0,  561,    0,  886,    0,  920,   67,  388,  -29,    0,
    0,  881, 7735, -147,    0,  940,    0,    0,    0,  945,
  946,    0,  417,    0,  951,    0,  947,    0,    0,    0,
  680,    0, 7871,  681,10172,  779, 9356,    0, 7283,    0,
  330,    0,    0,    0,  948,  950,    0,    0,  353,  388,
  267,    0, 4201,  952,    0,  953,  908,    0,  956,    0,
10172,    0,    0, 1035,    0,    0,    0,10172, 1036,  972,
    0,  975,  976,    0,    0,11582,    0, -288, 6812,    0,
    0,    0,    0,    0,    0,    0,  974,  388, 6812,    0,
    0, -286,    0,    0,    0,  330, -289,  935,11871,    0,
  980,    0,  987,10852,    0,  275,    0,  349,    0,  839,
  793,10172,10172,  994, 1110,    0,    0,  -36,  993,    0,
    0,    0,  685,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  685,
  685,   66,   66,  498,  498,  498,  498,  616,  616,  597,
  456,  462,  480,  505,    0,  995, -186,    0,10172,   80,
  955,  113,  957,  996,10172,    0,    0,    0, 1012,    0,
  200,  839,    0,    0,    0,    0,  517,  242,    0,11871,
 -206,    0,  997, 1000,    0,    0,    0,    0,    0,    0,
 -289,  606,    0, 1001, 1005,    0,    0,    0,    0, 1007,
11895,  963,    0,  361,    0,    0,  542,    0,10308,    0,
 1016,    0,    0,    0,  711, 1010,    0, 1041, 1042, 1044,
    0,    0,10172,    0,    0, 1002,    0,    0, 1043,    0,
 1049,10172, 1130,    0, 6655, 6655, 8030,    0, 4520,    0,
    0, 9764,  236,    0, -281,   58,    0,  999, 1003,    0,
 -185,    0,    0, 1053,    0,    0,    0,    0,    0, 1055,
    0, 1063,    0, 4360,    0,  388,    0,    0,  330,  428,
  573,    0, 1013,    0, 1060, 1061,    0, 6655,    0, 6655,
    0,10172,    0,10172,11726,    0,    0,  388,  388, 1066,
    0,    0,    0,    0,    0,    0,    0,    0, 8187,    0,
11726,    0,    0, 1015,11582, 1092,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 9220,    0,    0,    0,
    0, 9492,10172,    0, 7440, 1065,    0,    0, 1146,    0,
 1147,    0,  667,    0, 1068,10172,10172, 1025,    0,    0,
    0,    0,    0, 1028,    0,  -86,    0,    0,    0,    0,
 -206, -206,    0,  853, 1075, 1078, 1033, 1085,  963,    0,
 1079,    0, 1197, 1199,    0,    0,10172,    0, 9900, 1082,
  711,11871,11726,    0,  128, 1203, 1205, 1090, 1086,    0,
10172,10172, 1094,10172, 1188,    0,    0,    0,    0,   31,
10036,    0,    0,    0,    0, 7576,    0, 1225,    0,  600,
10172, 1115, 8030, 1116,    0,    0, 1067,    0,    0,    0,
 1072,  556,    0, 1073,    0, 1086,    0,    0,    0, 1111,
    0,    0, 1143,    0,    0,    0,    0,    0,    0,    0,
    0,  637,    0,    0,    0,11743,    0,    0, 1074, 1117,
 1065,    0,10172,    0,10172,    0,10172,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1125,  853,    0,    0,
10444,    0,    0,    0, 1136, 7300,    0,  963,    0,  963,
    0,  963,    0,    0,    0,    0, 1091, 1132, 1082,    0,
    0,    0, -188, -181, 1113, 1137,    0,    0,    0,    0,
 1134, 8030, 1065, -186,    0, 1138,    0,    0, 1140, 6655,
    0,    0,    0,    0,    0,    0, 1145,    0,  779,    0,
    0,    0,    0,    0, -203,    0, 1141,  556,    0, 1095,
 1065,    0,    0,  388,    0, 1096, 1142,    0,    0,    0,
10172, 1180,10172,    0,10172, 1179,  461,    0, 1005,  238,
  762,    0,    0,    0,    0,  -18,    0,    0,    0, 1164,
    0,    0,    0, 1155,    0,    0,    0,  481,    0, 1156,
 1285, 1287,    0,    0, 1181, 1065,10172,    0,    0,    0,
    0,    0,10172,    0, 1184, -191,    0, -191,    0,    0,
    0,    0, 1182,  388,    0,10172, 7440,    0,    0, 1208,
  702, 1183,    0,10172,    0, 1186,    0,    0,10444,   44,
   67,    0, 1185, 1185, 1185, 9900, 1189,    0,10172,    0,
    0,    0,    0, 1192, 1049,    0, 6655, 1190,    0,    0,
 6812,    0, 1191,    0,    0, 1202,    0,10172,    0,    0,
    0,    0,    0,    0,10172,    0,    0,  259, 1195,  259,
 7457,   71,   71,   71,    0,    0,10172,    0, 6655, 6655,
    0,    0, 6812,    0,    0, 6655,    0, 1213,10172,10172,
    0,  259, 1201,    0, 1157,    0, 1204,    0,    0,    0,
 1207,    0,    0, 1158,    0, 1234,    0,    0,    0,    0,
    0,    0, 6812,    0,    0, 1235,    0, 1206,   71,    0,
 1216,  259, 7457, 1210, 1219,    0, 1220, 1221, 1224,10172,
    0,    0,    0,    0, 1212, 1206,    0,    0,11232,  -65,
  259,    0,    0,    0, 1239,10172, 1222,10172,    0,    0,
 1226,    0,    0, 1228,    0,    0,12518,    0, 1232,  -65,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, -262,12518,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1238,  259,    0,  259, 1206, 1178,    0, 1239,
    0,    0, 1236,11232,11398,    0,    0, -255,    0,    0,
    0,11430,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1242,  259,    0,    0,    0,    0,
    0,    0,11726,11726,  225,11743,  316,  330, 1270,    0,
 -289,  640,    0, 1306,    0,    0, 1206,    0,    0,    0,
 1206,    0,    0, 1198, 1200,    0,11726, -164,    0,11726,
    0, 1209, 1244,    0, -289,    0, 1246, 9112,    0, 1251,
 1211,  -46,  351, 1006,    0,    0,    0, -289,    0, 1254,
 1214, 1252, 1237,    0, 1255, 1200, 1260,   67, 1241, 1261,
    0, 1262, 1258,    0,  839,    0,  678,    0,    0,    0,
 1264, -184,    0, 1266,    0,    0, 1267,    0, 1268, 1271,
 1273,    0, 1274,    0,   67,   67,    0,   67, 1276, 1277,
    0,    0,    0,    0, 1278,   62,    0, 1282,   67, 1401,
 1286,   67,    0, -255,    0, 8030, 1245, 1283, 1274,    0,
 1290, 1292,   77, 1295,    0,    0,   67, 9900, 1248, 1291,
 1278,    0,    0,12518,    0,  259,  259,    0, 1250, 1293,
 1282,    0, 1298,    0,10172, 1257, 1296, 1286,    0, 1301,
   67,    0,  -77,    0, 1299,    0,    0,    0,    0,    0,
12518,    0,   77,   77, 1309, 1305,    0, -184,    0,    0,
  219, 1311,12518,    0,12518,    0,    0, 8030, 1300,    0,
    0,    0, 1312, 1267,    0,    0,    0, 1316,    0,   20,
    0,    0,    0,   71,  848, 1321,    0,    0,    0,    0,
    0,    0,    0,    0, 1375, 1428,    0,    0,    0,    0,
    0, 1323, 1325, 8030,    0,    0,    0,    0,   77,  412,
  412,    0,   71,    0,    0,    0,  110,  110,    0,    0,
    0,    0,    0,    0,    0, 9356, 9356,    0,    0,    0,
    0,    0, 1327, 1326, 1331,    0,    0,    0,
  };
  protected static readonly short [] yyRindex = {         2851,
    0,    0, 6969, 2851,    0,    0,    0, 1704,    0,    0,
 3004, 2782,    0,    0,    0,    0,    0, 3004,    0,    0,
   42,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1708,    0,    0, 1708,    0,    0,
 1704, 3047, 2898,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1342,    0,    0,    0,    0,    0,    0,    0,
    0,11949,    0, 1334,    0,    0,    0, 1334,    0,    0,
    0,    0,    0,    0,  206,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 3630,    0,    0,    0,
    0,    0,  313, 4518, 3789,    0,    0, 4359,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 4674,    0,
    0, 4742, 5086, 5290, 5630,  358, 5902, 6038, 6174, 6310,
 -194,  293,    0,    0,    0,    0,    0,    0,   42,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1294,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  939,  939,
 3090,    0,  595, 1337,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1708,  228,    0,    0,    0,
    0,    0,    0,    0, 3133,  402, 3176,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 3405,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1350,    0,    0,    0,    0,
 3405,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2039,    0, 1150,  692,
 2169,    0,    0, 2316, 2169,  692,    0,    0,    0,    0,
 1342,    0,    0,    0,  145,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1334,    0,    0,    0,    0,
    0,    0, 1349, 2441,    0, 3405,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -35,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1422,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  169,
    0,    0,    0,    0,    0,    0,    0, 3239, 2606,    0,
    0,    0,    0, 1886, 1708, 1708,    0, -122,    0, 7752,
 1708, 1722,    0,    0,   45,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  364,11085,    0,    0,    0, 3405, 3948,    0,
    0,    0,    0,    0,    0,    0,11474,    0,    0,    0,
    0,    0, 1354,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  731,  818,    0,    0, 1357,    0,    0,    0,
    0,    0,  191,    0,    0, 3882, 1363,    0,    0,    0,
  124,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1590,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1349,    0,    0,  201,    0,
    0,    0,    0,    0,    0,    0,    0, 8344,    0,    0,
    0,    0,    0,    0,    0, -197,  537,    0,    0,    0,
 1365,    0,    0,    0,    0, 3405,    0, 3405,    0, 4041,
    0,    0,    0,  127,    0,    0,    0,    0,  -20,    0,
    0,    0, 4846,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 4914,
 5018, 5154, 5222, 5358, 5426, 5494, 5562, 5698, 5766, 5834,
 5970, 6106, 6242, 6366,    0,    0,  786,    0,    0,  692,
    0,  692,    0,    0,    0,    0,    0,    0,  988,    0,
    0, 1886,    0,    0,    0,    0, 1322,    0,    0,    0,
11966,    0,    0,  800,    0,    0,    0,    0,    0,    0,
  744,  664,    0,    0, 1374,    0,    0,    0,    0, 1378,
    0,    0,    0,    0,    0,    0,10580,    0,    0,    0,
  807,    0,    0,    0,12020,    0,    0,  808,  824,  833,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1370,    0,    0,    0,    0,    0,    0,    0, 1380,    0,
    0,    0, 3471,    0,    0,  202,    0,   49, 3564,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1381,
    0,    0,    0,    0,    0,    0,    0,    0,  254,  804,
  658,    0,    0,    0,    0, 1379,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 8344,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  251,    0,    0,    0, 1377,    0,    0,    0,    0,
    0,    0,  641,    0,  614,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -122,    0,    0,    0,    0,
12020, 8047,    0, 1384,    0,  805,    0,    0,    0,    0,
 1383,    0, 1338, 1341,    0,    0,    0,    0,    0, 1386,
12044,    0,    0,    0,11550,    0,    0,    0,  857,    0,
 1387,    0,    0,    0, 1757,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3723,
    0, 4200, 1396,    0,    0,    0, 1393,    0,    0,    0,
    0,  804,    0,    0,    0,  857,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  821,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  871,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1391,    0,
    0,    0,    0,    0,  880,  884,    0,    0,    0,    0,
    0,    0, 1407,  786,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 3882,    0,
    0,    0,    0,    0, 1412,    0,    0,  804,    0,  932,
 1407,    0,    0, 8344,    0,  632,  670,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  176,    0, 1374, 8394,
    0,    0,    0,    0,    0,12092,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  770,    0,  775,
    0,    0,    0,    0,    0, 1377, 1409,    0,    0,    0,
    0,    0,    0,    0,    0, 1414,    0, 7126,    0,    0,
    0,    0,    0, 8344,    0,    0,    0,    0,    0,    0,
  679,  730,    0,    0,    0,    0,    0,    0,    0,12135,
11474,    0,  170,  170,  170,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1411,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,12246,    0, -290,
    0, 1418, 1418, 1418,    0,    0,    0,    0,    0,    0,
    0,    0, -178,    0,    0,    0,    0,    0,    0,    0,
    0,12289,    0,    0,    0,    0, 1419,    0,    0,    0,
  216,    0,    0,    0,    0,  445,    0,    0,    0,    0,
    0,    0, 1420,    0,    0,    0,    0, 2961, 1410, -257,
    0,   65,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2719,    0,    0,    0, 8548,
 8944,    0,    0,    0,  745,    0,    0,    0,    0,    0,
    0,    0,    0, -244,    0,    0,11256,    0,    0, 8647,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,11324,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 9038,    0, 8746, 2719,    0,    0,  745,
    0,    0,    0,    0,  364,    0,    0,    0,    0,    0,
    0,  364,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 8845,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 4648,  457,    0,
 9080,    0,    0,    0, 9150,    0, 2719,    0,    0,    0,
 2719,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  866,    0, 1424,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  888,    0,  551,
    0,    0,    0,    0,    0,    0,    0,11474,  889,    0,
    0,    0,    0,    0, 1426,    0,  906,    0,    0,    0,
    0,    0,    0,  900,    0,    0,    0,    0,    0,    0,
    0,    0, 1437,    0,11474,11474,    0,11506,    0,    0,
    0,    0,    0,    0, 1460, 1390,    0, 1461,11474,10716,
 1463,11474,    0,    0,    0,    0,    0,    0, 1465,    0,
    0,    0,12445,    0,    0,    0,11474,    0,    0,    0,
 1467,    0,    0,  285,    0,11007,12407,    0,    0,    0,
 1468,    0,    0,    0,    0,    0,    0, 1472,    0,    0,
11474,    0,  490,    0,  910,    0,    0,    0,    0,    0,
  942,    0,12331,12369,    0,    0,    0,    0,    0,    0,
    0,    0, 1487,    0, 1586,    0,    0,    0,  926,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  492,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,12445,10888,
12203,    0,  492,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1363, 1363,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,
  };
  protected static readonly short [] yyGindex = {            0,
    0, 1799,    0,    0,    0,   -2,  -10, -179,  -42, 1800,
    0, 1841, 1854,   83,    0,    0,   -6,    0,    0,    0,
    0,    0,    0, -826, -694, -224, -431,    0,    0,    0,
    0,    0, -193,    0,    0,    0,  934,    0, 1047,    0,
    0,    0,    0,  814,  815,  -17, -230,    0,    0,    0,
    0,  672,-1118, -618, -488, -460, -427, -357, -308, -219,
-1116,-1131,    0,    1,    0,  234,    0,-1073,    0,    0,
    0,    0,    0,    0,  617,  173,  458,    0,    0,    0,
  493,-1039,    0, -276, -293, 1217,    0,    0,    0, -863,
  453,    0,    0, -492,    0,    0,  522,    0,    0,  497,
    0,    0,  532,    0,-1189, -934,    0,    0,    0,    0,
    0,  625,  -13,    0,    0, 1054, 1056, 1057, 1215, -521,
    0,    0, -321, 1062,  613,    0, -995,    0,    0,    0,
    0,    0,    0,    0,    0,  427,    0,    0,    0,    0,
    0,    0,    0,    0,  683,    0,    0,    0,    0, -340,
  607,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  701,    0, -504,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  438,    0,    0,  535,    0,    0,  541,  543,
  465,    0,    0,    0,    0,    0,    0,    0,    0,  771,
    0,    0,    0,    0,  -59,    0,  -15,  -91,    0,    0,
  605,    0,  665,    0, 1122,    0, 1416, -291, -274,  -66,
  451,    0,  777,    0,  -38,  518,    0,    0, 1027,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -269,    0,  132,    0,    0,
 -320,    0,    0,    0, 1076,    0, -298, -134, 1229, 1159,
    0, 1151,    0, 1361, 1580, 1269,    0,    0,  968, 1882,
    0,    0,    0,    0, 1247,    0,    0,    0,    0,    0,
 -515, 1624,    0,    0,    0,    0, 1865,  489,    0,    0,
  474,  922,  905,  918, 1564, 1565, 1566, 1572, 1563,    0,
 1571,    0,    0,    0, 1218, 1427, -708,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -287,    0,
    0,    0,    0, -446,    0,  819,    0,  741,    0,  825,
    0,    0,    0,  890, -526,  -16, -307,   12,    0, 1818,
    0,   68,    0,   86,  101,  105,  114,  117,  122,  147,
  148,  149,  150,    0, -667,    0,  -25,    0,    0, 1020,
    0, -575,    0,    0,    0,  923,    0, 1077,    0, 1030,
 -457,    0,    0,    0,    0,    0,    0,  941,    0,    0,
  937,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  949,    0,    0,    0,    0,    0,    0,    0,
    0,  -26,    0, 1469,    0,    0,    0, 1103,    0,    0,
    0,    0,    0, -169,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1574,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  761,    0,    0,    0,    0,
    0,    0,    0,    0,  862,    0,    0,    0,    0,    0,
    0,  -14, 1173,    0,    0,    0, 1175,
  };
  protected static readonly short [] yyTable = {           110,
  157,   18,  724,  111,  197,  510,   44,  191,  513,  236,
  446,  428,  570,  194,  486,  352,  729,  675,  316,  471,
  427,  260,  764,  506,  403,  697,  494,  552,  158,  540,
  529,  569,  770,  232,  262,  874, 1115,  855,  856, 1148,
 1149,  933,  996,  466,    6,  254,  360,  774,  368,  535,
  892,  308, 1042,  359,   14,  367,  302,  658,  375,  192,
  302,  595, 1215,  668, 1043, 1235,  309, 1027,  311,  794,
  869, 1353,  197,  197, 1029,  442, 1043,  327,  336,  761,
  885, 1242,  887,  659,  162, 1174,  862,  771,  531,  793,
  408, 1313,  291,  197,  677, 1309,  357,   20,    1,  563,
  292,  349,  163,  200, 1124, 1215,  564, 1246, 1322, 1254,
  332,   95,  358, 1239,  331,  660,  332,  164,  565,   16,
 1278,  165,  677,  333,  350,  315, 1339,   48,  818,  772,
  166,  677,  628,  167,  471,  200, 1109, 1246,  168, 1254,
  762,  110,  157,  409,  595,  111,  702,  863,  236,  595,
  410,  595,  595,  595,  595,  595,  595,  595,  595,  595,
  595,  595,  345,  169,  170,  171,  172,  352,   43,  646,
  158,   48,  375,  595,  375,  595,  375,  595, 1439,  595,
  595,  595,  742,   48,  870,  349,  197,  197,  871,  793,
 1196,  199,  445,  264,  795,  595, 1354,  288,  289,  290,
    2,  294,  295,  446,  718,  570,  306,  307,  350,  352,
  346,  437,  722,  312,  857,  314,   15,  318, 1044,  661,
  375,  193,  329,  330,  569,  669,  162,  361,  570, 1028,
 1044,  443,  470,  411,  595,  466, 1030,  474,  412,  347,
  413,  552,  293,  793,  163,  366,  414,  415,  197,  260,
  528,  552, 1421, 1314,  533,  332,  333,  260,  537,  164,
  322,  327,  482,  165,  575,  536,    3,    4,    5,    6,
  703,  348,  166,  485,  197,  167,  489,  491, 1326, 1445,
  168,  355,  234, 1462,  197, 1055,  869,  349,  527,  516,
  197, 1455,  538, 1456,  524,   48,  526, 1440,  933,  525,
  489,    6, 1039,  234,  933,  169,  170,  171,  172,  570,
  350,  542,  543,  865, 1066,  554,  651, 1383,  551,  557,
  953,  651,  683,  416,  351,  651, 1143,  384,  302,  819,
  742, 1173, 1410,  576,  197,  789,  462,  197, 1417,    2,
  651,  252,  643,  577, 1463, 1095,  553,  470,  586, 1189,
  410,  463,  594,  595,  596,  597,  598,  599,  600,  601,
  602,  603,  604,  385,  502, 1488,  989,  651,  197,  197,
 1465, 1327,  555,  798,  435,  436,  676,  352,   20,  373,
  983,  636,  637, 1341,  626,  236,  651, 1035,  312,  349,
  253,  366,  790,  462,  967,  647,  197,  197,  971, 1485,
 1258,  352, 1288,  202,  871,  848,  800,  684,  463, 1144,
 1371, 1372,  350, 1374,  197, 1053,  933, 1447, 1448, 1121,
  644,  645,  933,  641, 1393,  670,  656, 1400,  197,  507,
  234,  866,  329,  411,  570,  234,  476,  662,  412,  494,
  413,  523, 1416,  386,  387,  234,  414,  415,  471,  480,
 1305, 1151, 1152,  569, 1306,  248,   45,  696, 1154,  249,
 1083,  638,  484,  228,  692,  229, 1438,  113,  955, 1034,
  349,  671, 1051, 1479, 1052,  503,   95,  504,  515,  252,
 1286, 1452,   48,  361,  779, 1489,  781,  720,  782,  586,
  373,  727,  373,  350,  373,  373,  234,  373,  638,  373,
  638,  570,  481,  349,   49,  733,  735,  743,  670,  250,
  113,  671,  694,  751,  113,  672,  741,  887,  887,  951,
  753,   55,  561,  426,  886,  886,  350,  203,  253, 1287,
  197,  505,  551, 1453,  115,  519,  670,  400,  325,  325,
  973,  373,  551,  373,  766,  946,  373,  651,  597,  401,
  811,  982,  736,  197,  671,  638,  608,  609,  450,  325,
  553,  903, 1216,  965,  784,  784,  361,  718,  695,  451,
  553, 1289,  432,  694,  747,  810,  673,  115,  347,  697,
  347,  115,  671,  867,  631,  633,  337,  338,  339,  340,
  341,  342,  343,  344,  361,  978,  764,  887,  361,  651,
  361,  361,  361,  361,  886, 1216,  347, 1247,  361,  113,
  693,  797,  677,  585,  513,  816,  861,  803, 1067,  450,
 1290,  352,  467,  747,  467,  368,  349,  234,  349,  695,
  451,  597,  832,  247,  197,  649,  597, 1247,  597,  597,
  597,  597,  597,  597,  597,  597,  597,  597,  597,  350,
  734,  350,  325,  325,  349,  197,  833,  817,  357,  649,
  597,  470,  597,  351,  597,  351,  597,  597,  597,  251,
  260,  368,  831,  651,  533,  489,  115,  350,  651,  467,
  578,  339,  651,  834,  853,  722,  649,  315,  350,  727,
  579,  351, 1217,  263,  720,  499,  585,  651,  265,  500,
 1015,  585,  778,  585,  585,  585,  585,  585,  585,  585,
  585,  585,  585,  585,  325,  315,  410,   95,  197,   95,
 1218,  597,  878,  252,  651,  585, 1328,  585,  650,  585,
  339,  585,  585,  585,  888, 1217,  889, 1248,  113,  197,
  325,  585,  585,  651,  891,  766,  585,  585, 1198, 1214,
  325,  895,  650, 1219,   95,  197,  325,  585,  585,  197,
  328,  347,  350, 1218,  113, 1249, 1088, 1248, 1198,  586,
  585,  518,  253,  647,  586,  905,  780,  727,   95,  650,
  356,  430,  946,  552,  519,  113,  585, 1172,  921,  922,
  643,  349, 1214,  677, 1245, 1249, 1219,  707, 1250,  411,
  325,  520, 1118,  325,  412,  115,  413,  349,  197,  349,
  812,  673,  414,  415,  350,  552,  541,  662,  349,  943,
  673,  485,  813, 1220, 1245,  369,  197,  197, 1250,  935,
  350,  115,  350,  489,  325,  325,  969, 1065, 1015,  396,
 1150,  350,  593,  972,  351,  552,  351,  835,  879, 1077,
  397,  675,  115,  980,  836,  727,  283,  541,  672,  610,
  611, 1078,  325,  325,  398,  283, 1220,  672, 1251,  605,
  606,  607, 1221, 1404,  541,  541,  541,  541,  541,  541,
  541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
  197,  388,  389,  346, 1275, 1000,  811, 1002, 1251, 1004,
  447, 1275,  349,  357,  399,  346,  877,  446,  614,  346,
  614, 1232,  197, 1014,  228, 1221,  231, 1252,  352,  432,
  197,  662,  346,  448,  292,  350,  292,  890, 1132,  357,
  678,  292,  315,  113,  679, 1457,  449,  402, 1021,  351,
 1022,  451, 1023,  897,  727,  881,  452, 1252,  453,  454,
  455,  456,  911,  296,  346,  297,  457,  911,  315,  911,
  458, 1222,  911,  911, 1294,  911,  911,  346,  297,  350,
  346, 1476,  459,  325,  513,  460,  879,  461,  432,  917,
  766, 1494, 1495, 1058,  917, 1060,  917, 1061,  405,  917,
  917,  541,  917,  917,  394,  395,  325,  390,  391,  113,
  115,  462,  433,  773, 1222,  773, 1253,  773,  995,  113,
  792,  392,  393, 1070,  917,  954,  563,  920,  841,  325,
  918,  919,  920,  564,  920,  485,  339,  920,  920,  339,
  920,  920,  434,   65,   65,  565, 1253,   65, 1096,  727,
  766,  762,  911,  762,  228,  762, 1103,  438,  346,  710,
  719, 1014,  920,  711,  500, 1100, 1101, 1295,  485, 1108,
  346,  485,  777,  441,  346,  236,  115, 1135,  913,  917,
  381,  382,  383,  913,  551,  913,  115,  346,  913,  913,
 1128,  913,  913,  907,  946,  467,  261, 1131,  907,  236,
  907,  350,  438,  907,  907,  197,  907,  907,  508,  485,
  325,  346,  553,  346,  508,  468,  551,  920, 1019,  346,
  331, 1156, 1061,  346,  346,  475,  346,  346,   57, 1135,
  261,  325,  346,  346,  261,  261,  261,  261,  261,  261,
  261,  261,  487, 1068,  553, 1069,  551, 1197, 1213,  182,
  479,  182,  346,  182,  194,  509,  194,  197,  194,  371,
  346,  488, 1185,  346,  358,  113,  113, 1197,  913,  755,
  346,  755,  783,  197,  553,  252,  679,  361, 1230,  953,
  485,  953,  346,  907,   66,  346,  346,  170,   66,  170,
  764, 1213,  764, 1197,  325,  509,  362,  363,  425,  346,
  425,  509,  759,  177,  411,  177,  759,  514,  113,  412,
  113,  413,  178, 1320,  178,  325,  364,  414,  415,  425,
  425, 1466, 1467, 1197,  253,  517, 1320,  365,  197,  197,
  534,  325,  115,  115, 1280,  325,  197,  539,  864,  425,
  864,  574,  351, 1349,  545, 1350,  351,  425,  346,  130,
  425,  130,   68,  923,   68,  556,  130,  197,  197,  200,
  197,  200,  350,  171,  351,  171, 1301,  680,  351,  580,
  346,  351,  135,  351,  135,  115,  634,  115,  351, 1301,
  354,  197,  361,  297,  197,  297,  361,  657,  346,  361,
  351,  361, 1301,  142,  642,  142,  361,  886,  886, 1329,
  204,  682,  325,  325,  614,  615,  616,  617,  694,  304,
 1301,  304,  351,  532,  532,  651,  651, 1113, 1114,  612,
  613,  618,  619, 1384,  261,  704,  705,  706,  708,  731,
  709,  732,  261,  747,  748,  749,  923,  750,  752,  754,
 1411,  923,  205,  923,  923,  923,  923,  923,  923,  923,
  923,  923,  923, 1423, 1425,  755,  756,  757,  727,  765,
 1280, 1193,  773,  775,  541,  923,  325,  923,  776,  923,
  485,  923,  923,  923,  787,  788,  792,  808,  820,  793,
 1411, 1411,  799,  821,  801,  823,  802, 1433,  824,  827,
   43,  844,  206,  207,  208,  209,  325,  210,  211,  212,
  213,  214,  215,  216,  217,  261,  839,  218,  219,  220,
  221,  222,  223,  224,  225,  371, 1193,  261,  261,  261,
  727,  371,  261,  261,  845,  846,  923,  847,  851,  850,
  113,  513,  852,  854,  872,  868, 1411,  199,  873,  875,
  882,  883,  898,  884,  900, 1284, 1285,  893,  909,  914,
  916,  920,  923,  371,  930,  924,  727,  371,  931,  370,
  933,  934,  939,  936,  941,  947, 1481, 1481,  959, 1312,
  960,  961, 1315, 1490, 1490,  968,  962,  970,  586,  586,
  371,  372,  373,  374,  375,  376,  377,  378,  379,  380,
  977,  503,  992,  984,  986,  993, 1031,  115,  371,  988,
  990,  997,  998,  371, 1008,  371,  371,  371,  371,  371,
  371,  371,  371,  371,  371,  371, 1017, 1025, 1024, 1033,
 1032, 1038, 1050, 1037, 1040,  879,  371,  371, 1056,  371,
  371,  371, 1057,  371,  371,  371, 1059,  371,  371, 1064,
 1072,  371,  371,  371,  371, 1076, 1079,  113,  371,  371,
 1080,  113, 1081,  371,  371,  371,  371,  371,  371,  371,
  371, 1089, 1082, 1094, 1099, 1104, 1102, 1124, 1116, 1111,
 1155,  325,  371, 1120, 1122,  371, 1134,  371, 1158,  113,
  113, 1127, 1144,  113, 1160, 1164,  113, 1162,  371,  560,
 1163, 1172, 1171, 1176, 1179, 1180, 1181, 1182,   25,  840,
   26, 1184, 1188,   27, 1228, 1259, 1233, 1231,   28, 1236,
  261, 1234,   29,  113,  115, 1243, 1291, 1261,  115, 1282,
 1304,   31, 1336,  325, 1318, 1307, 1321, 1308,   33, 1324,
 1333, 1342, 1335,   34, 1347, 1338, 1317,   35, 1325,  325,
 1340, 1327, 1346, 1344, 1352, 1360,  115,  115, 1363,   37,
  115,   38, 1364,  115, 1365,   39, 1357, 1367, 1375, 1376,
   48, 1379,   48,   40,   41, 1389, 1394,   42, 1406, 1396,
  319, 1408, 1405, 1409, 1415, 1418, 1419, 1429, 1430, 1432,
  115, 1435, 1437,   48, 1434, 1449, 1450,  513, 1454, 1443,
 1458, 1459,  513,  513,  325,  325,   48, 1461, 1468, 1453,
 1452,   48,  325, 1474, 1496, 1475,   48, 1497,   48,   48,
   48,   48, 1498,    9,   48,  513,   48,  949,  545,  838,
   48,  740,   32,  325,  325,  513,  325,  503,  513,  513,
  615,  941,   48,  513,  504,   48,  513,   48,  513,  808,
  513,  513,  513,  513,  462,  261,  616,  325,  513,  684,
  325,  354,  513,   30,   22,  812,  513,  502,   30,  324,
  528,   48,  758,   31,  513,  221,  783,  513,   96,  513,
  513,  766,  813,   31,  846,  513,  767,  513,  513,  513,
  513,  513,  513,  513,  513,  513,  513,  513,  758,  787,
  815,  788,  817,  513,  672,  672,  328,  694,  513,  513,
  353,  513,  513,  513,  513,  513,  513,  513,  346,  513,
  513,  651,  513,  513,  513,  513,  513,  513,  513,  513,
  513,  513,  138,  513,  513,  513,  513,  513,  513,  513,
  513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
  513,  513,  513,  513,  513,  120,  300,  513,  145,  513,
  139,  513,  121,  301,  513,  840,  840,  146,  651,  233,
  513,  237,   54,  840,  840,  840,  840,  840,   21,  840,
  840, 1009,  840,  840,  840,  840,  840,  840,  840,  840,
  929, 1237, 1283, 1420,  840, 1451,  840,  840,  840,  840,
  840,  840, 1106, 1107,  840,  346, 1460,  829,  840,  840,
 1407,  840,  840,  840, 1436, 1402, 1298, 1310,  956,  842,
  957,  958,  952,  840, 1492,  840, 1244,  840,  840, 1484,
 1331,  840, 1241,  840,  840,  840,  840,  840,  840,  840,
  840,  840,  840,  840,  840, 1431,  840, 1426, 1424,  840,
  840, 1351, 1177,  840,  840, 1483, 1302,  925,  744, 1178,
  860,  976,  904,  786,  581,  902, 1041,  838,  840,  840,
  840,  840,  840,  299,  544,  858,  840,  840,  334,  620,
  840,  621,  624,  622, 1166,  840,  840,  840,  840,  840,
  623,  625,  760,  840, 1262,  840,  404, 1169, 1026, 1097,
 1123,  840,  840, 1036, 1092, 1085, 1090,  999,  991,  737,
 1260, 1157,  899,  640,  927,  926,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  840,  840,  840,  840,
    0,  840,  783,  783,    0,    0,    0,    0,  840,    0,
  783,  783,  783,  783,  783,    0,  783,  783,    0,  783,
  783,  783,  783,  783,  783,  783,    0,    0,  748,    0,
    0,  783,    0,  783,  783,  783,  783,  783,  783,    0,
    0,  783,    0,    0,    0,  783,  783,    0,  783,  783,
  783,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  783,    0,  783,    0,  783,  783,    0,    0,  783,    0,
  783,  783,  783,  783,  783,  783,  783,  783,  783,  783,
  783,  783,    0,  783,    0,    0,  783,  783,    0,    0,
  783,  783,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  783,  783,  783,  783,  783,
    0,    0,    0,  783,  783,    0,    0,  783,    0,    0,
    0,    0,  783,  783,  783,  783,  783,    0,    0,    0,
  783,  346,  783,    0,    0,    0,  346,  346,  783,  783,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  339,  346,
    0,    0,    0,  783,  783,  783,  783,    0,  783,  346,
    0,    0,  346,  346,    0,  783,    0,  346,    0,    0,
  346,    0,  346,    0,  346,  346,  346,  346,    0,    0,
    0,    0,  346,    0,    0,    0,  346,    0,    0,    0,
  346,    0,    0,    0,    0,    0,    0,    0,  346,    0,
    0,  346,    0,  346,  346,    0,    0,    0,    0,  346,
    0,  346,  346,  346,  346,  346,  346,  346,  346,  346,
  346,  346,  346,    0,    0,    0,    0,  346,    0,    0,
    0,    0,  346,  346,  346,  346,  346,  346,  346,  346,
  346,  346,    0,  346,  346,    0,    0,  346,  346,  346,
  346,  346,    0,    0,  346,  346,    0,    0,    0,  346,
  346,  346,  346,  346,  346,  346,  346,    0,    0,    0,
    0,    0,    0,    0,  748,    0,    0,    0,  346,  748,
  748,  346,    0,  346,    0,  346,    0,    0,  346,    0,
    0,    0,    0,    0,  346,  376,    0,    0,    0,    0,
    0,    0,  748,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  748,    0,    0,  748,  748,    0,    0,    0,
  748,    0,    0,  748,    0,  748,    0,  748,  748,  748,
  748,    0,    0,    0,    0,  748,    0,    0,    0,  748,
    0,    0,    0,  748,    0,    0,    0,    0,    0,    0,
    0,  748,    0,    0,  748,    0,  748,  748,    0,    0,
    0,    0,  748,    0,  748,  748,  748,  748,  748,  748,
  748,  748,  748,  748,  748,    0,    0,    0,    0,    0,
  748,    0,    0,    0,    0,  748,  748,  748,  748,  748,
  748,    0,  748,  748,  748,    0,  748,  748,    0,    0,
  748,  748,  748,  748,  339,    0,    0,  748,  748,  339,
  339,    0,  748,  748,  748,  748,  748,  748,  748,  748,
  346,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  748,  339,    0,  748,    0,  748,    0,  748,    0,
    0,  748,  339,    0,    0,  339,  339,  748,    0,    0,
  339,    0,    0,  339,    0,  339,    0,  339,  339,  339,
  339,    0,    0,    0,    0,  339,    0,    0,    0,  339,
    0,    0,    0,  339,    0,    0,    0,    0,    0,    0,
    0,  339,    0,    0,  339,    0,  339,  339,    0,    0,
    0,    0,  339,    0,  339,  339,  339,  339,  339,  339,
  339,  339,  339,  339,  339,    0,    0,    0,    0,    0,
  339,    0,    0,    0,    0,  339,  339,  339,  339,  339,
  339,    0,  339,  339,  339,    0,  339,  339,    0,    0,
  339,  339,  339,  339,    0,    0,    0,  339,  339,    0,
    0,    0,  339,  339,  339,  339,  339,  339,  339,  339,
    0,  376,    0,    0,    0,    0,  376,  376,    0,    0,
    0,  339,    0,    0,  339,    0,  339,    0,  339,    0,
    0,  339,    0,    0,    0,    0,    0,  339,    0,  376,
    0,    0,    0,    0,    0,   49,    0,    0,    0,  376,
    0,    0,  376,  376,    0,    0,    0,  376,    0,    0,
  376,    0,  376,    0,  376,  376,  376,  376,    0,    0,
    0,    0,  376,    0,    0,    0,  376,    0,    0,    0,
  376,    0,    0,    0,    0,    0,    0,    0,  376,    0,
    0,  376,    0,  376,  376,    0,    0,    0,    0,  376,
    0,  376,  376,  376,  376,  376,  376,  376,  376,  376,
  376,  376,    0,    0,    0,    0,    0,  376,    0,    0,
    0,    0,  376,  376,    0,  376,  376,  376,    0,  376,
  376,  376,    0,  376,  376,    0,  346,  376,  376,  376,
  376,    0,  346,    0,  376,  376,    0,    0,    0,  376,
  376,  376,  376,  376,  376,  376,  376,    0,   28,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  376,    0,
    0,  376,    0,  376,  346,    0,    0,    0,  346,    0,
    0,    0,    0,    0,  376,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  346,
    0,   36,    0,    0,  346,    0,  346,  346,  346,  346,
  346,  346,  346,  346,  346,  346,  346,  346,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  346,  346,  346,
  346,  346,  346,  346,  346,  346,  346,    0,  346,  346,
    0,    0,  346,  346,  346,  346,  346,    0,    0,  346,
  346,    0,    0,    0,  346,  346,  346,  346,  346,  346,
  346,  346,    0,    0,    0,    0,    0,    0,    0,    0,
   35,    0,    0,  346,    0,    0,  346,    0,  346,    0,
  346,    0,   49,  346,    0,    0,   49,    0,   49,  346,
   49,    0,   49,    0,    0,   49,    0,   49,   49,    0,
   49,    0,   49,    0,   49,    0,   49,   49,   49,   49,
    0,    0,   49,   49,    0,    0,    0,   34,   49,   49,
   49,   49,   49,    0,    0,   49,   49,   49,    0,   49,
    0,   49,   49,   49,   49,   49,   49,   49,   49,    0,
   49,   49,   49,   49,    0,    0,   49,   49,   49,    0,
   49,    0,    0,    0,    0,   49,   49,    0,   49,   49,
    0,   49,   49,   49,    0,    0,    0,   49,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   28,    0,    0,    0,    0,    0,    0,   49,    0,   49,
   49,    0,    0,    0,   28,   28,    0,    0,    0,   28,
    0,    0,   49,   28,    0,   28,    0,    0,   28,    0,
   28,   28,    0,   28,    0,   28,    0,   28,    0,   28,
   28,   28,   28,   33,    0,   28,   28,    0,    0,    0,
    0,   28,    0,   28,   28,   28,    0,    0,   28,   28,
   28,    0,   28,   49,    0,   28,    0,   28,   28,   28,
   28,    0,    0,    0,   28,   28,   28,    0,   36,   28,
   28,   28,   36,    0,    0,    0,    5,    0,   28,   28,
    0,   28,   28,   36,   28,   28,   28,    0,   36,    0,
   28,    0,   36,    0,    0,   36,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   36,   36,    0,
   28,    0,   36,   36,    0,    0,   28,   28,   36,  931,
   36,   36,   36,   36,    0,   28,    0,    0,   36,    0,
    0,    0,   36,    0,   36,    0,    0,   35,    0,    0,
    0,   35,    0,    0,   36,    0,   36,   36,    0,   36,
    0,    0,   35,   36,    0,    0,    0,   35,    0,    0,
    0,   35,   48,    0,   35,    0,   28,    0,    0,    0,
    0,    0,    0,   36,    0,    0,   35,   35,    0,   36,
   36,   35,   35,    0,   34,    0,    0,   35,   34,   35,
   35,   35,   35,    0,    0,    0,    0,   35,    0,   34,
    0,   35,    0,   35,   34,    7,    0,    0,   34,    0,
    0,   34,    0,   35,    0,   35,   35,    0,   35,    0,
    0,    0,   35,   34,   34,    0,    0,    0,   34,   34,
    0,    0,    0,    0,   34,    0,   34,   34,   34,   34,
    0,    0,   35,    0,   34,    0,    0,   28,   34,   35,
   34,   28,    0,    0,    0,    0,    0,    0,    0,    0,
   34,    0,   28,   34,    0,   34,    0,   28,  932,   34,
    0,   28,    0,    0,   28,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   28,   28,    0,   34,
   33,   28,   28,    0,   33,   34,   34,   28,    0,   28,
   28,   28,   28,    0,    0,   33,    0,   28,    0,    0,
   33,   28,    0,   28,   33,    0,    0,   33,    0,    0,
    0,    0,    0,   28,    0,    0,   28,    0,   28,   33,
   33,    0,   28,    5,   33,   33,    0,   48,    0,    0,
   33,    0,   33,   33,   33,   33,    0,    0,   48,    0,
   33,    0,   28,   48,   33,    0,   33,   48,   28,   28,
   48,    0,    0,    0,    0,    0,   33,    0,    0,   33,
    0,   33,   48,   48,    0,   33,  931,   48,   48,    0,
   48,    0,    0,   48,    0,   48,   48,   48,   48,    0,
    0,   48,    0,   48,    0,   33,   48,   48,    0,   48,
   48,    0,   33,   48,    0,    0,    0,    0,    0,   48,
    0,    0,   48,    0,   48,   48,   48,    0,   48,   48,
   48,   48,    0,   48,    0,    0,   48,    0,   48,   48,
   48,   48,    0,    0,   48,    0,   48,    0,   48,   48,
   48,    0,   48,   48,    0,    0,   48,    0,    0,    0,
    0,    0,   48,    0,    0,   48,    0,   48,   48,   48,
    0,   48,    7,   48,   48,    0,   49,    0,    0,   48,
    0,   48,   48,   48,   48,    0,    0,   49,    0,   48,
    0,   48,   49,   48,    0,   48,   49,    0,    0,   49,
    0,    0,    0,    0,    0,   48,    0,    0,   48,    0,
   48,   49,   49,    0,   48,    0,   49,   49,    0,    0,
    0,    0,   49,    0,   49,   49,   49,   49,    0,    0,
    0,    0,   49,    0,   48,  932,   49,    0,   49,   48,
    0,    0,    0,    0,    0,    0,    0,    0,   49,    0,
   48,   49,    0,   49,    0,   48,    0,   49,    0,   48,
    0,    0,   48,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   48,   48,    0,   49,    0,   48,
   48,    0,    0,    0,    0,   48,    0,   48,   48,   48,
   48,    0,    0,    0,    0,   48,    0,    0,    0,   48,
    0,   48,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   48,    0,   56,   48,    0,   48,    0,    0,    0,
   48,   57,   25,   58,   26,    0,    0,   27,   59,    0,
   60,   61,   28,   62,   63,   64,   29,    0,    0,    0,
   48,    0,   65,    0,   66,   31,   67,   68,   69,   70,
    0,    0,   33,    0,    0,    0,   71,   34,    0,   72,
   73,   35,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   74,    0,   37,    0,   38,   75,    0,    0,   39,
    0,   76,   77,   78,   79,   80,   81,   40,   41,   82,
   83,   42,   84,    0,   85,    0,    0,   86,   87,    0,
  346,   88,   89,    0,    0,    0,  346,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   90,   91,   92,   93,
   94,    0,    0,    0,   95,    0,    0,    0,   96,    0,
    0,    0,    0,   97,   98,   99,  100,  101,    0,    0,
    0,  102,  346,  103,    0,    0,    0,    0,    0,  104,
  105,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  346,    0,    0,    0,
    0,    0,  346,    0,  106,  107,  108,  109,    0,    0,
    0,    0,    0,  346,    0,    0,  199,    0,  346,    0,
  346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
  346,  346,    0,    0,    0,    0,    0,    0,  346,    0,
    0,    0,  346,  346,  346,  346,  346,  346,  346,  346,
  346,    0,  346,  346,    0,  346,  346,  346,  346,  346,
  346,  346,  346,  346,  346,    0,  346,  346,  346,  346,
  346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
  346,  346,  346,  346,  346,  346,  346,  346,    0,  515,
    0,    0,  346,    0,  346,  515,    0,  346,    0,    0,
    0,    0,    0,  346,    0,    0,    0,    0,  346,    0,
    0,  346,    0,  346,  346,    0,    0,    0,  346,  346,
    0,    0,  346,  346,  346,  346,  346,  346,  346,  346,
  346,  515,  346,  346,  346,  346,  346,  346,  346,  346,
  346,  346,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  346,  346,    0,    0,    0,    0,    0,    0,
  346,  346,    0,  346,    0,    0,    0,    0,    0,  346,
    0,    0,  515,    0,    0,    0,    0,  515,    0,  515,
  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
    0,    0,    0,    0,    0,    0,    0,  346,    0,    0,
  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
    0,  515,  515,    0,  515,  515,  515,  515,  515,  515,
  515,  515,  515,  515,    0,  515,  515,  515,  515,  515,
  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
  515,  515,  515,  515,  515,  515,  515,    0,  511,    0,
    0,    0,    0,  515,  511,    0,  346,    0,    0,    0,
    0,    0,  515,    0,    0,    0,    0,    0,  346,    0,
  346,    0,  346,    0,    0,  346,    0,  346,  346,    0,
  346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
  511,  346,  346,  346,  346,  346,  346,  346,  346,  346,
  346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
  346,  346,  346,    0,    0,    0,    0,  346,    0,  346,
  403,    0,  346,    0,    0,    0,    0,    0,  346,    0,
    0,  511,    0,    0,    0,    0,  511,    0,  511,  511,
  511,  511,  511,  511,  511,  511,  511,  511,  511,    0,
    0,    0,    0,    0,    0,    0,  403,    0,    0,  511,
  511,    0,  511,  511,  511,  511,  511,  511,  511,    0,
  511,  511,    0,  511,  511,  511,  511,  511,  511,  511,
  511,  511,  511,    0,  511,  511,  511,  511,  511,  511,
  511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
  511,  511,  511,  511,  511,  511,    0,  519,    0,    0,
    0,    0,  511,  519,    0,  511,    0,    0,    0,    0,
    0,  511,    0,    0,    0,    0,    0,  339,    0,  403,
  403,  403,  403,    0,  403,    0,  403,  403,    0,  403,
  403,  403,  403,  403,    0,  403,  403,  403,  403,  519,
  403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
  403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
  403,  403,    0,    0,    0,    0,  339,    0,  403,  346,
    0,  403,    0,    0,    0,    0,    0,  403,    0,    0,
  519,    0,    0,    0,    0,  519,    0,  519,  519,  519,
  519,  519,  519,  519,  519,  519,  519,  519,    0,    0,
    0,    0,    0,    0,    0,  346,    0,    0,    0,  519,
    0,  519,  519,  519,  519,  519,  519,  519,    0,  519,
  519,    0,  519,  519,  519,  519,  519,  519,  519,  519,
  519,  519,    0,  519,  519,  519,  519,  519,  519,  519,
  519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
  519,  519,  519,  519,  519,    0,  346,    0,    0,    0,
    0,  519,  346,    0,  519,    0,    0,    0,    0,    0,
  519,    0,    0,    0,    0,    0,    0,  346,  346,  346,
  346,  346,    0,    0,    0,  346,  346,    0,  346,  346,
  346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
  346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
  346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
  346,    0,    0,    0,    0,    0,    0,  346,    0,    0,
  346,    0,    0,    0,    0,    0,  346,    0,    0,  346,
    0,    0,    0,    0,  346,    0,  346,  346,  346,  346,
  346,  346,  346,  346,  346,  346,  346,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  346,    0,
  346,  346,  346,  346,  346,  346,  346,    0,  346,  346,
    0,  346,  346,  346,  346,  346,  346,  346,  346,  346,
  346,    0,  346,  346,  346,  346,  346,  346,  346,  346,
  346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
  346,  346,  346,  346,    0,  446,  738,    0,    0,    0,
  346,  446,    0,  346,    0,   25,    0,   26,    0,  346,
   27,    0,    0,    0,    0,   28,    0,    0,    0,   29,
    0,    0,    0,    0,    0,    0,    0,    0,   31,    0,
    0,    0,    0,    0,    0,   33,    0,  446,    0,    0,
   34,    0,    0,    0,   35,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   37,    0,   38,    0,
    0,    0,   39,    0,    0,    0,    0,    0,    0,    0,
   40,   41,    0,    0,   42,    0,    0,  739,  446,    0,
    0,    0,    0,  446,    0,  446,  446,  446,  446,  446,
  446,  446,  446,  446,  446,  446,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  446,    0,  446,
  446,  446,  446,  446,  446,  446,    0,  446,  446,    0,
  446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
    0,  446,  446,  446,  446,  446,  446,  446,  446,  446,
  446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
  446,  446,  446,    0,  406,  876,    0,    0,  740,  446,
  406,    0,  446,    0,   25,    0,   26,    0,  446,   27,
    0,    0,    0,    0,   28,    0,    0,    0,   29,    0,
    0,    0,    0,    0,    0,    0,    0,   31,    0,    0,
    0,    0,    0,    0,   33,    0,  406,    0,    0,   34,
    0,    0,    0,   35,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   37,    0,   38,    0,    0,
    0,   39,    0,    0,    0,    0,    0,    0,    0,   40,
   41,    0,    0,   42,    0,    0,  319,  406,    0,    0,
    0,    0,  406,    0,  406,  406,  406,  406,  406,  406,
  406,  406,  406,  406,  406,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  406,    0,  406,  406,
  406,  406,  406,  406,  406,    0,  406,    0,    0,  406,
  406,  406,  406,  406,  406,  406,  406,  406,  406,    0,
  406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
  406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
  406,  406,    0,  550,    0,  492,    0,  354,  406,  550,
    0,  406,    0,   57,   25,    0,   26,  406,    0,   27,
  256,    0,    0,    0,   28,   62,   63,    0,   29,    0,
    0,    0,    0,    0,   65,    0,    0,   31,    0,    0,
    0,    0,    0,    0,   33,  550,    0,    0,    0,   34,
    0,   72,   73,   35,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   37,    0,   38,   75,    0,
    0,   39,    0,    0,   77,    0,   79,    0,   81,   40,
   41,  257,    0,   42,    0,    0,  550,    0,    0,    0,
    0,  550,    0,  550,  550,  550,  550,  550,  550,  550,
  550,  550,  550,  550,    0,    0,    0,    0,   90,   91,
   92,  258,    0,    0,    0,  550,    0,  550,    0,  550,
   96,  550,  550,  550,    0,  550,  550,    0,  550,  550,
  550,  550,  550,  550,  550,  550,  550,  550,  368,    0,
    0,  550,  550,  550,  550,  550,  550,  550,  550,  550,
  550,  550,  550,  550,  550,  550,  550,  550,  550,  564,
  550,  368,    0,    0,    0,  564,  106,  493,    0,    0,
    0,    0,    0,    0,  368,    0,  550,    0,    0,  368,
    0,    0,  245,    0,  368,    0,  368,  368,  368,  368,
    0,    0,    0,    0,  368,    0,    0,    0,  368,    0,
    0,  564,  368,    0,    0,    0,    0,    0,    0,    0,
  368,    0,    0,  368,    0,  368,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  568,    0,    0,
    0,    0,    0,  568,    0,    0,    0,    0,    0,  368,
    0,    0,  564,    0,    0,    0,    0,  564,    0,  564,
  564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  568,
    0,  564,    0,  564,    0,  564,    0,  564,  564,  564,
    0,  564,  564,    0,    0,  564,  564,  564,  564,  564,
  564,  564,  564,  564,    0,  368,    0,  564,  564,  564,
  564,  564,  564,  564,  564,    0,    0,    0,    0,    0,
  568,    0,    0,    0,    0,  568,  564,  568,  568,  568,
  568,  568,  568,  568,  568,  568,  568,  568,    0,    0,
    0,  571,  564,    0,    0,    0,    0,  571,    0,  568,
    0,  568,    0,  568,    0,  568,  568,  568,    0,  568,
  568,    0,    0,  568,  568,  568,  568,    0,    0,    0,
  568,  568,    0,    0,    0,  568,  568,  568,  568,  568,
  568,  568,  568,  571,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  568,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  569,
  568,    0,    0,    0,    0,  569,    0,    0,    0,    0,
    0,    0,    0,    0,  571,    0,    0,    0,    0,  571,
    0,  571,  571,  571,  571,  571,  571,  571,  571,  571,
  571,  571,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  569,    0,  571,    0,  571,    0,  571,    0,  571,
  571,  571,    0,  571,  571,    0,    0,  571,  571,  571,
  571,    0,    0,    0,  571,  571,    0,    0,    0,  571,
  571,  571,  571,  571,  571,  571,  571,    0,    0,    0,
    0,    0,  569,    0,    0,    0,    0,  569,  571,  569,
  569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
    0,    0,    0,  570,  571,    0,    0,    0,    0,  570,
    0,  569,    0,  569,    0,  569,    0,  569,  569,  569,
    0,  569,  569,    0,    0,  569,  569,  569,  569,    0,
    0,    0,  569,  569,    0,    0,    0,  569,  569,  569,
  569,  569,  569,  569,  569,  570,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  569,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  574,  569,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  570,    0,    0,    0,
    0,  570,    0,  570,  570,  570,  570,  570,  570,  570,
  570,  570,  570,  570,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  570,    0,  570,    0,  570,
    0,  570,  570,  570,    0,  570,  570,    0,    0,  570,
  570,  570,  570,    0,    0,    0,  570,  570,    0,  575,
    0,  570,  570,  570,  570,  570,  570,  570,  570,    0,
    0,    0,    0,    0,  574,    0,    0,    0,    0,  574,
  570,  574,  574,  574,  574,  574,  574,  574,  574,  574,
  574,  574,    0,    0,    0,    0,  570,    0,    0,    0,
    0,    0,    0,  574,    0,  574,    0,  574,    0,  574,
  574,  574,    0,    0,    0,    0,    0,  574,  574,  574,
  574,    0,    0,    0,  574,  574,    0,  576,    0,  574,
  574,  574,  574,  574,  574,  574,  574,    0,    0,    0,
    0,    0,  575,    0,    0,    0,    0,  575,  574,  575,
  575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
    0,    0,    0,    0,  574,    0,    0,    0,    0,    0,
    0,  575,    0,  575,    0,  575,    0,  575,  575,  575,
    0,    0,    0,    0,    0,  575,  575,  575,  575,    0,
    0,    0,  575,  575,    0,  577,    0,  575,  575,  575,
  575,  575,  575,  575,  575,    0,    0,    0,    0,    0,
  576,    0,    0,    0,    0,  576,  575,  576,  576,  576,
  576,  576,  576,  576,  576,  576,  576,  576,    0,    0,
    0,    0,  575,    0,    0,    0,    0,    0,    0,  576,
    0,  576,    0,  576,    0,  576,  576,  576,    0,    0,
    0,    0,    0,  576,  576,  576,  576,    0,    0,    0,
  576,  576,    0,  578,    0,  576,  576,  576,  576,  576,
  576,  576,  576,    0,    0,    0,    0,    0,  577,    0,
    0,    0,    0,  577,  576,  577,  577,  577,  577,  577,
  577,  577,  577,  577,  577,  577,    0,    0,    0,    0,
  576,    0,    0,    0,    0,    0,    0,  577,    0,  577,
    0,  577,    0,  577,  577,  577,    0,    0,    0,    0,
    0,  577,  577,  577,  577,    0,    0,    0,  577,  577,
    0,  579,    0,    0,    0,  577,  577,  577,  577,  577,
  577,    0,    0,    0,    0,    0,  578,    0,    0,    0,
    0,  578,  577,  578,  578,  578,  578,  578,  578,  578,
  578,  578,  578,  578,    0,    0,    0,    0,  577,    0,
    0,    0,    0,    0,    0,  578,    0,  578,    0,  578,
    0,  578,  578,  578,    0,    0,    0,    0,    0,  578,
  578,  578,  578,    0,    0,    0,  578,  578,    0,  580,
    0,    0,    0,  578,  578,  578,  578,  578,  578,    0,
    0,    0,    0,    0,  579,    0,    0,    0,    0,  579,
  578,  579,  579,  579,  579,  579,  579,  579,  579,  579,
  579,  579,    0,    0,    0,    0,  578,    0,    0,    0,
    0,    0,    0,  579,    0,  579,    0,  579,    0,  579,
  579,  579,    0,    0,    0,    0,    0,  579,  579,  579,
  579,    0,    0,    0,  579,  579,    0,  581,    0,    0,
    0,  579,  579,  579,  579,  579,  579,    0,    0,    0,
    0,    0,  580,    0,    0,    0,    0,  580,  579,  580,
  580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
    0,    0,    0,    0,  579,    0,    0,    0,    0,    0,
    0,  580,    0,  580,    0,  580,    0,  580,  580,  580,
    0,    0,    0,    0,    0,  580,  580,  580,  580,    0,
    0,    0,  580,  580,    0,  582,    0,    0,    0,  580,
  580,  580,  580,  580,  580,    0,    0,    0,    0,    0,
  581,    0,    0,    0,    0,  581,  580,  581,  581,  581,
  581,  581,  581,  581,  581,  581,  581,  581,    0,    0,
    0,    0,  580,    0,    0,    0,    0,    0,    0,  581,
    0,  581,    0,  581,    0,  581,  581,  581,    0,    0,
    0,    0,    0,  581,  581,  581,  581,    0,    0,    0,
  581,  581,    0,  583,    0,    0,    0,  581,  581,  581,
  581,  581,  581,    0,    0,    0,    0,    0,  582,    0,
    0,    0,    0,  582,  581,  582,  582,  582,  582,  582,
  582,  582,  582,  582,  582,  582,    0,    0,    0,    0,
  581,    0,    0,    0,    0,    0,    0,  582,    0,  582,
    0,  582,    0,  582,  582,  582,    0,    0,    0,    0,
    0,    0,    0,  582,  582,    0,    0,    0,  582,  582,
    0,  584,    0,    0,    0,    0,    0,  582,  582,  582,
  582,    0,    0,    0,    0,    0,  583,    0,    0,    0,
    0,  583,  582,  583,  583,  583,  583,  583,  583,  583,
  583,  583,  583,  583,    0,    0,    0,    0,  582,    0,
    0,    0,    0,    0,    0,  583,    0,  583,    0,  583,
    0,  583,  583,  583,    0,    0,    0,    0,    0,    0,
    0,  583,  583,    0,    0,    0,  583,  583,    0,  586,
    0,    0,    0,    0,    0,  583,  583,  583,  583,    0,
    0,    0,    0,    0,  584,    0,    0,    0,    0,  584,
  583,  584,  584,  584,  584,  584,  584,  584,  584,  584,
  584,  584,    0,    0,    0,    0,  583,    0,    0,    0,
    0,    0,    0,  584,    0,  584,    0,  584,    0,  584,
  584,  584,    0,    0,    0,    0,    0,    0,    0,  584,
  584,    0,    0,    0,  584,  584,    0,  587,    0,    0,
    0,    0,    0,  584,  584,  584,  584,    0,    0,    0,
    0,    0,  586,    0,    0,    0,    0,  586,  584,  586,
  586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
    0,    0,    0,    0,  584,    0,    0,    0,    0,    0,
    0,  586,    0,  586,    0,  586,    0,  586,  586,  586,
    0,    0,    0,    0,    0,    0,    0,  586,  586,    0,
    0,    0,  586,  586,    0,  588,    0,    0,    0,    0,
    0,    0,    0,  586,  586,    0,    0,    0,    0,    0,
  587,    0,    0,    0,    0,  587,  586,  587,  587,  587,
  587,  587,  587,  587,  587,  587,  587,  587,    0,    0,
    0,    0,  586,    0,    0,    0,    0,    0,    0,  587,
    0,  587,    0,  587,    0,  587,  587,  587,    0,    0,
    0,    0,    0,    0,    0,    0,  587,    0,    0,    0,
  587,  587,    0,  589,    0,    0,    0,    0,    0,    0,
    0,  587,  587,    0,    0,    0,    0,    0,  588,    0,
    0,    0,    0,  588,  587,  588,  588,  588,  588,  588,
  588,  588,  588,  588,  588,  588,    0,    0,    0,    0,
  587,    0,    0,    0,    0,    0,    0,  588,    0,  588,
    0,  588,    0,  588,  588,  588,    0,    0,    0,    0,
    0,    0,    0,    0,  588,    0,    0,    0,  588,  588,
    0,  590,    0,    0,    0,    0,    0,    0,    0,  588,
  588,    0,    0,    0,    0,    0,  589,    0,    0,    0,
    0,  589,  588,  589,  589,  589,  589,  589,  589,  589,
  589,  589,  589,  589,    0,    0,    0,    0,  588,    0,
    0,    0,    0,    0,    0,  589,    0,  589,    0,  589,
    0,  589,  589,  589,    0,    0,    0,    0,    0,    0,
    0,    0,  589,    0,    0,    0,    0,  589,    0,  591,
    0,    0,    0,    0,    0,    0,    0,  589,  589,    0,
    0,    0,    0,    0,  590,    0,    0,    0,    0,  590,
  589,  590,  590,  590,  590,  590,  590,  590,  590,  590,
  590,  590,    0,    0,    0,    0,  589,    0,    0,    0,
    0,    0,    0,  590,    0,  590,    0,  590,    0,  590,
  590,  590,    0,    0,    0,    0,    0,    0,    0,    0,
  590,    0,    0,    0,    0,  590,    0,  592,    0,    0,
    0,    0,    0,    0,    0,  590,  590,    0,    0,    0,
    0,    0,  591,    0,    0,    0,    0,  591,  590,  591,
  591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
    0,    0,    0,    0,  590,    0,    0,    0,    0,    0,
    0,  591,    0,  591,    0,  591,    0,  591,  591,  591,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  591,    0,  593,    0,    0,    0,    0,
    0,    0,    0,  591,  591,    0,    0,    0,    0,    0,
  592,    0,    0,    0,    0,  592,  591,  592,  592,  592,
  592,  592,  592,  592,  592,  592,  592,  592,    0,    0,
    0,    0,  591,    0,    0,    0,    0,    0,    0,  592,
    0,  592,    0,  592,    0,  592,  592,  592,    0,    0,
    0,  594,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  592,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  592,  592,    0,    0,    0,    0,    0,  593,    0,
    0,    0,    0,  593,  592,  593,  593,  593,  593,  593,
  593,  593,  593,  593,  593,  593,    0,    0,    0,    0,
  592,    0,    0,    0,    0,    0,    0,  593,    0,  593,
    0,  593,    0,  593,  593,  593,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  593,
    0,    0,    0,    0,  594,    0,    0,    0,    0,  594,
  593,  594,  594,  594,  594,  594,  594,  594,  594,  594,
  594,  594,  593,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  594,    0,  594,    0,  594,  593,  594,
  594,  594,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   56,    0,  594,    0,    0,    0,    0,
    0,   57,   25,   58,   26,    0,  594,   27,   59,    0,
   60,   61,   28,   62,   63,   64,   29,    0,  594,    0,
    0,    0,   65,    0,   66,   31,   67,   68,   69,   70,
    0,    0,   33,    0,  594,    0,   71,   34,    0,   72,
   73,   35,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   74,    0,   37,    0,   38,   75,    0,    0,   39,
    0,   76,   77,   78,   79,   80,   81,   40,   41,   82,
   83,   42,   84,    0,   85,    0,    0,   86,   87,    0,
    0,   88,   89,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   90,   91,   92,   93,
   94,    0,    0,    0,   95,    0,    0,    0,   96,    0,
    0,    0,    0,   97,   98,   99,  100,  101,    0,    0,
    0,  102,    0,  103,    0,    0,    0,    0,    0,  104,
  105,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  268,    0,    0,    0,  106,  107,  108,  109,   57,   25,
   58,   26,    0,    0,   27,   59,    0,   60,   61,   28,
   62,   63,   64,   29,    0,    0,    0,    0,    0,   65,
    0,   66,   31,   67,   68,   69,   70,    0,    0,   33,
    0,    0,    0,   71,   34,    0,   72,   73,   35,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   74,    0,
   37,    0,   38,   75,    0,    0,   39,    0,   76,   77,
   78,   79,   80,   81,   40,   41,   82,   83,   42,   84,
    0,   85,    0,    0,   86,   87,    0,    0,   88,   89,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   90,   91,   92,   93,   94,    0,    0,
    0,   95,    0,    0,    0,   96,    0,    0,    0,    0,
   97,   98,   99,  100,  101,    0,    0,    0,  102,    0,
  103,    0,    0,    0,    0,    0,  104,  105,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  547,    0,    0,
    0,  106,  107,  108,  109,   57,   25,   58,   26,    0,
    0,   27,   59,    0,   60,   61,   28,   62,   63,   64,
   29,    0,    0,    0,    0,    0,   65,    0,   66,   31,
   67,   68,   69,   70,    0,    0,   33,    0,    0,    0,
   71,   34,    0,   72,   73,   35,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   74,    0,   37,    0,   38,
   75,    0,    0,   39,    0,   76,   77,   78,   79,   80,
   81,   40,   41,   82,   83,   42,   84,    0,   85,    0,
    0,   86,   87,    0,    0,   88,   89,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   90,   91,   92,   93,   94,    0,    0,    0,   95,    0,
    0,    0,   96,    0,    0,    0,    0,   97,   98,   99,
  100,  101,    0,    0,    0,  102,    0,  103,    0,    0,
    0,    0,    0,  104,  105,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  928,    0,    0,    0,  106,  107,
  108,  109,  928,  928,  928,  928,    0,    0,  928,  928,
    0,  928,  928,  928,  928,  928,  928,  928,    0,    0,
    0,    0,    0,  928,    0,  928,  928,  928,  928,  928,
  928,    0,    0,  928,    0,    0,    0,  928,  928,    0,
  928,  928,  928,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  928,    0,  928,    0,  928,  928,    0,    0,
  928,    0,  928,  928,  928,  928,  928,  928,  928,  928,
  928,  928,  928,  928,    0,  928,    0,    0,  928,  928,
    0,    0,  928,  928,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  928,  928,  928,
  928,  928,    0,    0,    0,  928,    0,    0,    0,  928,
    0,    0,    0,    0,  928,  928,  928,  928,  928,    0,
    0,    0,  928,    0,  928,    0,    0,    0,    0,    0,
  928,  928,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  792,    0,    0,    0,  928,  928,  928,  928,  792,
  792,  792,  792,    0,    0,  792,  792,    0,  792,  792,
  792,  792,  792,  792,  792,    0,    0,    0,    0,    0,
  792,    0,  792,  792,  792,  792,  792,  792,    0,    0,
  792,    0,    0,    0,  792,  792,    0,  792,  792,  792,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  792,
    0,  792,    0,  792,  792,    0,    0,  792,    0,  792,
  792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
  792,    0,  792,    0,    0,  792,  792,    0,    0,  792,
  792,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  792,  792,  792,  792,  792,    0,
    0,    0,  792,    0,    0,    0,  792,    0,    0,    0,
    0,  792,  792,  792,  792,  792,    0,    0,    0,  792,
    0,  792,    0,    0,    0,    0,    0,  792,  792,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  725,    0,
    0,    0,  792,  792,  792,  792,   57,   25,    0,   26,
    0,    0,   27,  256,    0, 1018,    0,   28,   62,   63,
    0,   29,    0,    0,   25,    0,   26,   65,    0,   27,
   31,    0,    0,    0,   28,    0,    0,   33,   29,    0,
    0,    0,   34,    0,   72,   73,   35,   31,    0,    0,
    0,    0,    0,    0,   33,    0,    0,    0,   37,   34,
   38,   75,    0,   35,   39,    0,    0,   77,    0,   79,
    0,   81,   40,   41,  257,   37,   42,   38,    0,    0,
    0,   39,    0,   87,    0,    0,   88,   89,    0,   40,
   41,    0,    0,   42,    0,    0,  319,    0,    0,    0,
    0,   90,   91,   92,   93,   94,    0,    0,    0,  509,
  726,    0,    0,   96,    0,    0,    0,    0,    0,   98,
   99,  100,  101,    0,    0,    0,  102,    0,  103,    0,
    0,    0,    0,    0,  104,  105,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  725,    0,    0,    0,  106,
  301,  108,  109,   57,   25,    0,   26,    0,    0,   27,
  256,    0, 1139,    0,   28,   62,   63,  354,   29,    0,
    0,   25,    0,   26,   65,    0,   27,   31,    0,    0,
    0,   28,    0,    0,   33,   29,    0,    0,    0,   34,
    0,   72,   73,   35,   31,    0,    0,    0,    0,    0,
    0,   33,    0,    0,    0,   37,   34,   38,   75,  906,
   35,   39,    0,    0,   77,    0,   79,    0,   81,   40,
   41,  257,   37,   42,   38,    0,    0,    0,   39,    0,
   87,    0,    0,   88,   89,    0,   40,   41,    0,    0,
   42,    0,    0,  319,    0,    0,    0,    0,   90,   91,
   92,   93,   94,    0,    0,    0,  509,    0,    0,    0,
   96,    0,    0,    0,    0,    0,   98,   99,  100,  101,
    0,    0,    0,  102,    0,  103,    0,    0,    0,    0,
    0,  104,  105,    0,    0,    0,    0,    0,    0,   57,
   25,    0,   26,    0,    0,   27,  256,    0,    0,    0,
   28,   62,   63,    0,   29,    0,  106,  301,  108,  109,
   65,    0,    0,   31,    0,    0,    0,    0,    0,    0,
   33,    0,    0,    0,  354,   34,    0,   72,   73,   35,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   37,    0,   38,   75,    0,    0,   39,    0,    0,
   77,    0,   79,    0,   81,   40,   41,  257,    0,   42,
    0,    0,    0,    0,    0,    0,   87,    0,    0,   88,
   89,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   90,   91,   92,   93,   94,    0,
    0,    0,  712,  975,    0,    0,   96,    0,    0,    0,
    0,    0,   98,   99,  100,  101,    0,    0,    0,  102,
    0,  103,    0,    0,    0,    0,    0,  104,  105,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  695,    0,  106,  713,  108,  109,    0,    0,   57,   25,
    0,   26,    0,  714,   27,  256,    0,    0,    0,   28,
   62,   63,    0,   29,    0,    0,  187,    0,  187,   65,
    0,  187,   31,    0,    0,    0,  187,    0,    0,   33,
  187,    0,    0,    0,   34,    0,   72,   73,   35,  187,
    0,    0,    0,    0,    0,    0,  187,    0,    0,    0,
   37,  187,   38,   75,    0,  187,   39,    0,    0,   77,
    0,   79,    0,   81,   40,   41,  257,  187,   42,  187,
    0,   85,    0,  187,    0,   87,    0,    0,   88,   89,
    0,  187,  187,    0,    0,  187,    0,    0,  187,    0,
    0,    0,    0,   90,   91,   92,   93,   94,    0,    0,
    0,    0,    0,    0,    0,   96,    0,    0,    0,    0,
    0,   98,   99,  100,  101,    0,    0,    0,  102,    0,
  103,    0,    0,  952,    0,    0,  104,  105,    0,    0,
    0,    0,    0,    0,   57,   25,    0,   26,    0,    0,
   27,  256,    0,    0,    0,   28,   62,   63,    0,   29,
    0,  106,  301,  108,  109,   65,    0,    0,   31,    0,
    0,    0,    0,    0,    0,   33,    0,    0,    0,  187,
   34,    0,   72,   73,   35,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   37,    0,   38,   75,
    0,    0,   39,    0,    0,   77,    0,   79,    0,   81,
   40,   41,  257,    0,   42,    0,    0,    0,    0,    0,
    0,   87,    0,    0,   88,   89,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   90,
   91,   92,   93,   94,    0,    0,    0,  712,    0,    0,
    0,   96,    0,    0,    0,    0,    0,   98,   99,  100,
  101,    0,    0,    0,  102,    0,  103,    0,    0,    0,
    0,    0,  104,  105,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  725,    0,  106,  713,  108,
  109,    0,    0,   57,   25,    0,   26,    0,  714,   27,
  256,    0,    0,    0,   28,   62,   63,    0,   29,    0,
    0,  187,    0,  187,   65,    0,  187,   31,    0,    0,
    0,  187,    0,    0,   33,  187,    0,    0,    0,   34,
    0,   72,   73,   35,  187,    0,    0,    0,    0,    0,
    0,  187,    0,    0,    0,   37,  187,   38,   75,    0,
  187,   39,    0,    0,   77,    0,   79,    0,   81,   40,
   41,  257,  187,   42,  187,    0,    0,    0,  187,    0,
   87,    0,    0,   88,   89,    0,  187,  187,    0,    0,
  187,    0,    0,  187,    0,    0,    0,    0,   90,   91,
   92,   93,   94,    0,    0,    0,  509,    0,    0,    0,
   96,    0,    0,    0,    0,    0,   98,   99,  100,  101,
    0,    0,    0,  102,    0,  103,  952,    0,    0,    0,
    0,  104,  105,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  894,    0,    0,    0,  106,  301,  108,  109,
   57,   25,    0,   26,    0,    0,   27,  256,    0,    0,
    0,   28,   62,   63,  187,   29,    0,    0,   25,    0,
   26,   65,    0,   27,   31,    0,    0,    0,   28,    0,
    0,   33,   29,    0,    0,    0,   34,    0,   72,   73,
   35,   31,    0,    0,    0,    0,    0,    0,   33,    0,
    0,    0,   37,   34,   38,   75,    0,   35,   39,    0,
    0,   77,    0,   79,    0,   81,   40,   41,  257,   37,
   42,   38,    0,    0,    0,   39,    0,   87,    0,    0,
   88,   89,    0,   40,   41,    0,    0,   42,    0,    0,
  319,    0,    0,    0,    0,   90,   91,   92,   93,   94,
    0,    0,    0,    0,    0,    0,    0,   96,    0,    0,
    0,    0,    0,   98,   99,  100,  101,    0,    0,    0,
  102,    0,  103,    0,    0,    0,    0,    0,  104,  105,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  619,
    0,    0,    0,  106,  301,  108,  109,  619,  619,    0,
  619,    0,    0,  619,  619,    0,    0,    0,  619,  619,
  619,  320,  619,    0,    0,    0,    0,    0,  619,    0,
    0,  619,    0,    0,    0,    0,    0,    0,  619,    0,
    0,    0,    0,  619,    0,  619,  619,  619,    0,    0,
    0,    0,    0,    0,    0,  346,    0,    0,    0,  619,
    0,  619,  619,    0,    0,  619,    0,    0,  619,    0,
  619,    0,  619,  619,  619,  619,    0,  619,    0,    0,
    0,    0,    0,    0,  619,    0,    0,  619,  619,    0,
    0,  346,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  619,  619,  619,  619,  619,    0,    0,    0,
    0,    0,    0,    0,  619,    0,    0,    0,    0,    0,
  619,  619,  619,  619,    0,    0,    0,  619,    0,  619,
    0,    0,    0,    0,    0,  619,  619,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  619,  619,  619,  619,  346,  346,  346,  346,    0,    0,
    0,  346,  346,    0,    0,  346,  346,  346,  346,  346,
  346,  346,  346,  346,    0,  346,  346,  346,  346,  346,
  346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
  346,  346,  346,  346,  346,  346,  346,    0,   48,    0,
    0,    0,   48,  346,   48,    0,  346,   48,    0,   48,
   48,    0,   48,    0,   48,    0,   48,    0,   48,   48,
   48,   48,    0,    0,   48,   48,    0,    0,    0,    0,
   48,    0,   48,   48,   48,    0,    0,   48,    0,   48,
    0,   48,    0,    0,   48,    0,   48,   48,   48,   48,
    0,    0,    0,   48,   48,   48,    0,    0,   48,   48,
   48,    0,    0,    0,    0,    0,    0,   48,   48,    0,
   48,   48,    0,   48,   48,   48,    0,    0,    0,   48,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   48,    0,   48,
    0,   48,    0,   48,    0,   81,   48,    0,   48,   48,
    0,   48,    0,   48,   48,   48,    0,   48,   48,   48,
   48,    0,    0,   48,   48,    0,    0,    0,    0,   48,
    0,   48,   48,   48,    0,    0,   48,    0,   48,    0,
   48,    0,    0,   48,    0,   48,   48,   48,   48,    0,
    0,    0,   48,   48,   48,   48,    0,   48,   48,   48,
    0,    0,    0,    0,    0,    0,   48,   48,    0,   48,
   48,    0,   48,   48,   48,    0,    0,    0,   48,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   48,    0,   48,    0,
   48,    0,   48,    0,   82,   48,    0,   48,   48,    0,
   48,    0,   48,   48,   48,    0,   48,   48,   48,   48,
    0,    0,   48,   48,    0,    0,    0,    0,   48,    0,
   48,   48,   48,    0,    0,   48,    0,   48,    0,   48,
    0,    0,   48,    0,   48,   48,   48,   48,    0,    0,
    0,   48,   48,   48,   48,    0,   48,   48,   48,    0,
    0,    0,    0,    0,    0,   48,   48,    0,   48,   48,
    0,   48,   48,   48,    0,    0,    0,   48,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   48,    0,   48,    0,   48,
    0,   48,    0,  104,   48,    0,   48,   48,    0,   48,
    0,   48,   48,   48,    0,   48,   48,   48,   48,    0,
    0,   48,   48,    0,    0,    0,    0,   48,    0,   48,
   48,   48,    0,    0,   48,    0,   48,    0,   48,    0,
    0,   48,    0,   48,   48,   48,   48,    0,    0,    0,
   48,   48,   48,   48,    0,   48,   48,   48,    0,    0,
    0,    0,    0,    0,   48,   48,    0,   48,   48,    0,
   48,   48,   48,    0,    0,    0,   48,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   48,    0,   48,    0,   48,    0,
   48,    0,  105,   48,    0,   48,   48,    0,   48,    0,
   48,   48,   48,    0,   48,   48,   48,   48,    0,    0,
   48,   48,    0,    0,    0,    0,   48,    0,   48,   48,
   48,    0,    0,   48,    0,   48,    0,   48,    0,    0,
   48,    0,   48,   48,   48,   48,    0,    0,    0,   48,
   48,   48,   48,    0,   48,   48,   48,    0,    0,    0,
    0,    0,    0,   48,   48,    0,   48,   48,    0,   48,
   48,   48,    0,    0,    0,   48,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   48,    0,
    0,    0,   48,    0,   48,   48,    0,   48,    0,   48,
   48,  227,   48,    0,   48,    0,   48,    0,   48,   48,
   48,   48,    0,    0,   48,   48,    0,    0,    0,    0,
   48,    0,   48,   48,   48,    0,    0,   48,    0,   48,
  346,   48,    0,    0,   48,    0,   48,   48,   48,   48,
    0,    0,    0,   48,   48,   48,    0,    0,   48,   48,
   48,   48,    0,  346,    0,    0,    0,   48,   48,    0,
   48,   48,  447,   48,   48,   48,  346,    0,    0,   48,
    0,  346,    0,    0,  346,    0,  346,    0,  346,  346,
  346,  346,    0,    0,    0,  448,  346,    0,    0,   48,
  346,    0,    0,    0,  346,  228,    0,    0,  449,    0,
  367,    0,  346,  451,    0,  346,    0,  346,  452,    0,
  453,  454,  455,  456,    0,    0,    0,    0,  457,    0,
    0,    0,  458,  367,    0,    0,  346,    0,    0,    0,
    0,  346,    0,    0,  459,    0,  367,  460,  346,  461,
  278,  367,  346,    0,  244,   48,  367,    0,  367,  367,
  367,  367,    0,    0,    0,  346,  367,    0,    0,    0,
  367,    0,    0,  462,  367,    0,    0,    0,    0,    0,
    0,    0,  367,   57,   25,  367,   26,  367,    0,   27,
  256,    0,    0,    0,   28,   62,   63,  346,   29,    0,
    0,    0,    0,    0,   65,    0,    0,   31,    0,    0,
    0,  367,    0,    0,   33,    0,    0,    0,    0,   34,
    0,   72,   73,   35,    0,  582,    0,    0,    0, 1308,
    0,    0,  583,    0,    0,   37,    0,   38,   75,    0,
    0,   39,    0,    0,   77,    0,   79,    0,   81,   40,
   41,  257,    0,   42,    0,    0,    0,    0,    0,    0,
  584,    0,    0,   88,   89,    0,    0,  367,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   90,   91,
   92,   93,   94,    0,    0,    0,    0,    0,    0,    0,
   96,  901,    0,  585,    0,    0,   98,   99,  100,  101,
    0,    0,    0,  102,    0,  103,    0,    0,    0,    0,
    0,  104,  105,    0,    0,    0,    0,    0,    0,   57,
   25,    0,   26,    0,    0,   27,  256,    0,    0,    0,
   28,   62,   63,    0,   29,    0,  106,  469,  108,  109,
   65,    0,    0,   31,    0,    0,    0,    0,    0,    0,
   33,    0,    0,    0,    0,   34,    0,   72,   73,   35,
    0,  582,    0,    0,    0,    0,    0,    0,  583,    0,
    0,   37,    0,   38,   75,    0,    0,   39,    0,    0,
   77,    0,   79,    0,   81,   40,   41,  257,    0,   42,
    0,    0,    0,    0,    0,    0,  584,    0,    0,   88,
   89,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   90,   91,   92,   93,   94,    0,
    0,    0,    0,    0,    0,    0,   96,    0,    0,  585,
    0,    0,   98,   99,  100,  101,    0,    0,    0,  102,
    0,  103,    0,    0,    0,    0,    0,  104,  105,    0,
    0,    0,    0,    0,    0,   57,   25,    0,   26,    0,
    0,   27,  256,    0,    0,    0,   28,   62,   63,    0,
   29,    0,  106,  469,  108,  109,   65,    0,    0,   31,
    0,    0,    0,    0,    0,    0,   33,    0,    0,    0,
    0,   34,    0,   72,   73,   35,    0,  582,    0,    0,
    0,    0,    0,    0,  583,    0,    0,   37,    0,   38,
   75,    0,    0,   39,    0,    0,   77,    0,   79,    0,
   81,   40,   41,  257,    0,   42,    0,    0,    0,    0,
    0,    0,  584,    0,    0,   88,   89,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   90,   91,   92,   93,   94,    0,    0,    0,    0,    0,
    0,    0,   96,    0,    0,    0,    0,    0,   98,   99,
  100,  101,    0,    0,    0,  102,    0,  103,    0,    0,
    0,    0,    0,  104,  105,    0,    0,    0,    0,    0,
    0,   57,   25,    0,   26,    0,    0,   27,  256,    0,
    0,    0,   28,   62,   63,    0,   29,    0,  106,  469,
  108,  109,   65,    0,    0,   31,    0,    0,    0,    0,
    0,    0,   33,    0,    0,    0,    0,   34,    0,   72,
   73,   35,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   37,    0,   38,   75,    0,    0,   39,
    0,    0,   77,    0,   79,    0,   81,   40,   41,  257,
    0,   42,    0,    0,   85,    0,    0,    0,   87,    0,
    0,   88,   89,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   90,   91,   92,   93,
   94,    0,    0,    0,    0,    0,    0,    0,   96,    0,
    0,    0,    0,    0,   98,   99,  100,  101,    0,    0,
    0,  102,    0,  103,    0,    0,    0,    0,    0,  104,
  105,    0,    0,    0,    0,    0,    0,   57,   25,    0,
   26,    0,    0,   27,  256,    0,    0,    0,   28,   62,
   63,    0,   29,    0,  106,  301,  108,  109,   65,    0,
    0,   31,    0,    0,    0,    0,    0,    0,   33,    0,
    0,    0,    0,   34,    0,   72,   73,   35,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   37,
    0,   38,   75,    0,    0,   39,    0,    0,   77,    0,
   79,    0,   81,   40,   41,  257,    0,   42,    0,    0,
    0,    0,    0,    0,   87,    0,    0,   88,   89,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   90,   91,   92,   93,   94,    0,    0,    0,
    0,  859,    0,    0,   96,    0,    0,    0,    0,    0,
   98,   99,  100,  101,    0,    0,    0,  102,    0,  103,
    0,    0,    0,    0,    0,  104,  105,    0,    0,    0,
    0,    0,    0,   57,   25,    0,   26,    0,    0,   27,
  256,    0,    0,    0,   28,   62,   63,    0,   29,    0,
  106,  301,  108,  109,   65,    0,    0,   31,    0,    0,
    0,    0,    0,    0,   33,    0,    0,    0,    0,   34,
    0,   72,   73,   35,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   37,    0,   38,   75,    0,
    0,   39,    0,    0,   77,    0,   79,    0,   81,   40,
   41,  257,    0,   42,    0,    0,    0,    0,    0,    0,
   87,    0,    0,   88,   89,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   90,   91,
   92,   93,   94,    0,    0,    0,  509,    0,    0,    0,
   96,    0,    0,    0,    0,    0,   98,   99,  100,  101,
    0,    0,    0,  102,    0,  103,    0,    0,    0,    0,
    0,  104,  105,    0,    0,    0,    0,    0,    0,   57,
   25,    0,   26,    0,    0,   27,  256,    0,    0,    0,
   28,   62,   63,    0,   29,    0,  106,  301,  108,  109,
   65,    0,    0,   31,    0,    0,    0,    0,    0,    0,
   33,    0,    0,    0,    0,   34,    0,   72,   73,   35,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   37,    0,   38,   75,    0,    0,   39,    0,    0,
   77,    0,   79,    0,   81,   40,   41,  257,    0,   42,
    0,    0,    0,    0,    0,    0,   87,    0,    0,   88,
   89,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   90,   91,   92,   93,   94,    0,
    0,    0,  503,    0,    0,    0,   96,    0,    0,    0,
    0,    0,   98,   99,  100,  101,    0,    0,    0,  102,
    0,  103,    0,    0,    0,    0,    0,  104,  105,    0,
    0,    0,    0,    0,    0,   57,   25,    0,   26,    0,
    0,   27,  256,    0,    0,    0,   28,   62,   63,    0,
   29,    0,  106,  301,  108,  109,   65,    0,    0,   31,
    0,    0,    0,    0,    0,    0,   33,    0,    0,    0,
    0,   34,    0,   72,   73,   35,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   37,    0,   38,
   75,    0,    0,   39,    0,    0,   77,    0,   79,    0,
   81,   40,   41,  257,    0,   42,    0,    0,    0,    0,
    0,    0,   87,    0,    0,   88,   89,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   90,   91,   92,   93,   94,    0,    0,    0,    0,    0,
    0,    0,   96,    0,    0,    0,    0,    0,   98,   99,
  100,  101,    0,    0,    0,  102,    0,  103,    0,    0,
    0,    0,    0,  104,  105,    0,    0,    0,    0,    0,
    0,   57,   25,    0,   26,    0,    0,   27,  256,    0,
    0,    0,   28,   62,   63,    0,   29,    0,  106,  301,
  108,  109,   65,    0,    0,   31,    0,    0,    0,    0,
    0,    0,   33,    0,    0,    0,    0,   34,    0,   72,
   73,   35,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   37,    0,   38,   75,    0,    0,   39,
    0,    0,   77,    0,   79,    0,   81,   40,   41,  257,
    0,   42,    0,    0,    0,    0,    0,    0,   87,    0,
    0,   88,   89,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   90,   91,   92,   93,
   94,    0,    0,    0,    0,    0,    0,    0,   96,    0,
    0,    0,    0,    0,   98,   99,  100,  101,    0,    0,
    0,  102,    0,  103,    0,    0,    0,    0,    0,  104,
  105,    0,    0,    0,    0,    0,    0,   57,   25,    0,
   26,    0,    0,   27,  256,    0,    0,    0,   28,   62,
   63,    0,   29,    0,  106,  469,  108,  109,   65,    0,
    0,   31,    0,    0,    0,    0,    0,    0,   33,    0,
    0,    0,    0,   34,    0,   72,   73,   35,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   37,
    0,   38,   75,    0,    0,   39,    0,    0,   77,    0,
   79,    0,   81,   40,   41,  257,    0,   42,    0,    0,
    0,    0,    0,    0,   87,    0,    0,   88,   89,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   90,   91,   92,   93,   94,    0,    0,    0,
    0,    0,    0,    0,   96,    0,    0,    0,    0,    0,
   98,   99,  100,  101,    0,    0,    0,  102,    0,  103,
    0,    0,    0,    0,    0,  104,  105,    0,    0,    0,
    0,    0,    0,   78,   78,    0,   78,    0,    0,   78,
   78,    0,    0,    0,   78,   78,   78,    0,   78,    0,
  106, 1010,  108,  109,   78,    0,    0,   78,    0,    0,
    0,    0,    0,    0,   78,    0,    0,    0,    0,   78,
    0,   78,   78,   78,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   78,    0,   78,   78,    0,
    0,   78,    0,    0,   78,    0,   78,    0,   78,   78,
   78,   78,    0,   78,    0,    0,    0,    0,    0,    0,
   78,    0,    0,   78,   78,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   78,   78,
   78,   78,   78,    0,    0,    0,    0,    0,    0,    0,
   78,    0,    0,    0,    0,    0,   78,   78,   78,   78,
    0,    0,    0,   78,    0,   78,    0,    0,    0,    0,
    0,   78,   78,    0,    0,    0,    0,    0,    0,  150,
  150,    0,  150,    0,    0,  150,  150,    0,    0,    0,
  150,  150,  150,    0,  150,    0,   78,   78,   78,   78,
  150,    0,    0,  150,    0,    0,    0,    0,    0,    0,
  150,    0,    0,    0,    0,  150,    0,  150,  150,  150,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  150,    0,  150,  150,    0,    0,  150,    0,    0,
  150,    0,  150,    0,  150,  150,  150,  150,    0,  150,
    0,    0,    0,    0,    0,    0,  150,    0,    0,  150,
  150,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  150,  150,  150,  150,  150,    0,
    0,    0,    0,    0,    0,    0,  150,    0,    0,    0,
    0,    0,  150,  150,  150,  150,    0,    0,    0,  150,
    0,  150,    0,    0,    0,    0,    0,  150,  150,    0,
    0,    0,    0,    0,    0,   57,   25,    0,   26,    0,
    0,   27,  256,    0,    0,    0,   28,   62,   63,    0,
   29,    0,  150,  150,  150,  150,   65,    0,    0,   31,
    0,    0,    0,    0,    0,    0,   33,    0,   28,    0,
    0,   34,    0,   72,   73,   35,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   37,    0,   38,
   75,   28,    0,   39,    0,    0,   77,    0,   79,    0,
   81,   40,   41,  257,   28,   42,    0,    0,    0,   28,
    0,    0,    0,    0,   28,    0,   28,   28,   28,   28,
    0,    0,   28,    0,   28,    0,    0,    0,   28,    0,
   90,   91,   92,  258,   94,    0,    0,    0,    0,    0,
   28,    0,   96,   28,    0,   28,    0,    0,   98,   99,
  100,  101,    0,    0,    0,  102,    0,  103,    0,   57,
   25,    0,   26,  104,  105,   27,  256,    0,    0,   28,
   28,   62,   63,    0,   29,   28,   28,    0,    0,    0,
   65,    0,    0,   31,    0,    0,    0,   48,  106,  259,
   33,  109,    0,    0,    0,   34,    0,   72,   73,   35,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   48,   37,    0,   38,   75,    0,    0,   39,    0,    0,
   77,    0,   79,   48,   81,   40,   41,  257,   48,   42,
    0,    0,    0,   48,    0,   48,   48,   48,   48,    0,
    0,   48,    0,   48,    0,    0,    0,   48,    0,    0,
    0,    0,    0,    0,   90,   91,   92,  258,   94,   48,
    0,    0,   48,    0,   48,    0,   96,  652,    0,  652,
    0,  652,   98,    0,  652,  101,  652,  652,    0,  652,
    0,  652,    0,  652,    0,  652,  652,  652,   48,    0,
    0,  652,  652,    0,  311,    0,    0,  652,    0,  652,
  652,    0,    0,    0,  652,    0,    0,    0,  652,    0,
    0,    0,  106,  259,    0,  109,    0,    0,    0,  652,
  652,    0,  652,    0,    0,    0,  652,  652,    0,    0,
    0,    0,    0,    0,  652,  652,   57,   25,  652,   26,
    0,  652,   27,  256,    0,    0,  652,   28,   62,   63,
    0,   29,    0,    0,    0,    0,    0,   65,    0,    0,
   31,    0,    0,    0,    0,    0,    0,   33,  652,  652,
    0,    0,   34,    0,   72,   73,   35,    0,    0,    0,
    0,  652,    0,    0,    0,    0,    0,    0,   37,    0,
   38,   75,    0,    0,   39,    0,    0,   77,    0,   79,
    0,   81,   40,   41,  257,    0,   42,    0,    0,   85,
    0,    0,    0,    0,    0,    0,   25,    0,   26,    0,
    0,   27,  652, 1190,    0,    0,   28,    0,    0,    0,
   29,   90,   91,   92,  258,    0,    0,    0,    0,   31,
  651,    0,  651,   96,    0,  651,   33,  651,  651,    0,
  651,   34,  651, 1191,  651,   35,  651,  651,  651,    0,
    0,    0,  651,  651,    0,    0,    0,   37,  651,   38,
  651,  651,    0,   39, 1192,  651,    0,    0,    0,  651,
    0,   40,   41,    0,    0,   42,    0,    0,  319,  106,
  259,  651,    0,  651,    0,    0,    0,  651,  651,    0,
    0,    0,    0,    0,    0,  651,  651,    0,  651,  651,
  651,    0,  651,  651,    0,  651,  651,  651,  651,    0,
  651,    0,  651,    0,  651,  651,  651,    0,    0,    0,
  651,  651,    0,    0,    0,    0,  651,    0,  651,  651,
    0,    0,    0,  651,    0,    0,    0,  651,    0,    0,
    0,    0,  651,    0,    0,    0,    0,    0,    0,  651,
    0,  651,    0,    0,    0,  651,  651,    0,    0,  354,
    0,    0,    0,  651,  651,    0,    0,  651,    0,    0,
  651,    0,   25,    0,   26,  651,    0,   27,    0,    0,
 1263,    0,   28,  651,  671,    0,   29,    0,  672, 1264,
 1265,    0,    0,    0, 1266,   31,    0,    0,    0,    0,
 1267,    0,   33,    0,   25,    0,   26,   34,    0,   27,
    0,   35, 1263,    0,   28,    0,  671,    0,   29,    0,
  672, 1264, 1265,   37,    0,   38, 1266,   31,    0,   39,
    0,    0, 1267,    0,   33,    0,    0,   40,   41,   34,
    0,   42,    0,   35, 1268,    0,    0,    0,   48, 1269,
   48,  651,    0,   48,    0,   37,    0,   38,   48,    0,
    0,   39,   48,    0,    0,    0,    0,    0,    0,   40,
   41,   48,    0,   42,    0,    0, 1268,    0,   48,    0,
   48, 1269,   48,   48, 1270,   48,    0,   48,    0,   48,
   48,   48,    0,    0,   48,    0,   48,    0,    0,   48,
    0,   48,    0,   48,    0,   48,    0,    0,   48,    0,
   48,    0,    0,   48,   48,   48,    0,   48,    0,   48,
   48,   48,    0,   48,   48, 1271,   48,    0,   48,   48,
    0,   48,    0,   48,   48,    0,    0,   48,   48,    0,
   48,    0,    0,    0,    0,   48,   48,   48,    0,   48,
    0,    0,   48,    0,   48,  168,   25, 1271,   26,   48,
    0,   27,    0,   48,    0,   48,   28,   48,    0,    0,
   29,    0,   48,    0,    0,   48,    0,   48,    0,   31,
    0,   48,    0,    0,   48,  168,   33,    0,    0,   48,
   48,   34,    0,   48,    0,   35,   48,  563,    0,    0,
    0,   48,    0,    0,  564,    0,    0,   37,    0,   38,
    0,    0,    0,   39,    0,    0,  565,    0,    0,    0,
    0,   40,   41,    0,    0,   42,    0,   25,  566,   26,
    0,    0,   27,   48,    0,    0,    0,   28,    0,    0,
    0,   29,    0,    0,    0,   30,   25,    0,   26,    0,
   31,   27,    0,    0,    0,   32,   28,   33,    0,    0,
   29,    0,   34,    0,    0,    0,   35,   36,    0,   31,
    0,    0,    0,    0,    0,    0,   33,   48,   37,    0,
   38,   34,    0,    0,   39,   35,    0,    0,    0,    0,
    0,    0,   40,   41,    0,    0,   42,   37,    0,   38,
   25,    0,   26,   39,    0,   27,    0,    0,    0,  567,
   28,   40,   41,    0,   29,   42,    0,   25,  319,   26,
    0,    0,   27,   31,    0,    0,    0,   28,    0,    0,
   33,   29,    0,    0,    0,   34,    0,    0,    0,   35,
   31,    0,    0,    0,    0,    0,    0,   33,    0,    0,
    0,   37,   34,   38,    0,    0,   35,   39,    0,    0,
    0,    0,    0,    0,    0,   40,   41,    0,   37,   42,
   38,   25,  319,   26,   39,    0,   27,    0,    0,    0,
   43,   28,   40,   41,    0,   29,   42,    0,    0,  511,
    0,    0,    0,    0,   31,   25,    0,   26,    0,  326,
   27,   33,    0,    0,    0,   28,   34,    0,    0,   29,
   35,    0,    0,    0,    0,    0,    0,    0,   31,    0,
    0,    0,   37,    0,   38,   33,    0,    0,   39,    0,
   34,    0,    0,    0,   35,    0,   40,   41,    0,    0,
   42,    0,    0,  319,    0,   25,   37,   26,   38,    0,
   27,    0,   39,  354,    0,   28,    0,    0,    0,   29,
   40,   41,    0,    0,   42,    0,    0,  319,   31,   25,
  354,   26,    0,    0,   27,   33,    0,    0,    0,   28,
   34,    0,    0,   29,   35,    0,    0,    0,    0,    0,
    0,    0,   31,    0,    0,    0,   37,    0,   38,   33,
    0,    0,   39,    0,   34,    0,    0,    0,   35,    0,
   40,   41,    0,    0,   42,    0,    0,  566,    0,    0,
   37,    0,   38,  498,  630,  498,   39,    0,  498,    0,
    0,    0,    0,  498,   40,   41,    0,  498,   42,    0,
  188,  739,  188,    0,    0,  188,  498,    0,  632,    0,
  188,    0,    0,  498,  188,    0,    0,    0,  498,    0,
    0,    0,  498,  188,    0,    0,    0,    0,    0,    0,
  188,    0,    0,    0,  498,  188,  498,    0,    0,  188,
  498,    0,    0,    0,    0,    0,    0,    0,  498,  498,
    0,  188,  498,  188,  187,  498,  187,  188,  354,  187,
    0,    0,    0,    0,  187,  188,  188,    0,  187,  188,
    0,    0,  188,    0,    0,    0,    0,  187,  197,    0,
  197,    0,  354,  197,  187,    0,    0,    0,  197,  187,
    0,    0,  197,  187,    0,    0,    0,    0,    0,    0,
    0,  197,    0,    0,    0,  187,    0,  187,  197,    0,
    0,  187,    0,  197,    0,    0,    0,  197,    0,  187,
  187,    0,   35,  187,    0,    0,  187,    0,    0,  197,
    0,  197,    0,   35,    0,  197,  498,    0,   35,    0,
    0,    0,   35,  197,  197,   35,    0,  197,    0,    0,
  197,    0,    0,  188,    0,    0,    0,   35,   35,    0,
    0,    0,   35,   35,    0,   33,    0,    0,   35,    0,
   35,   35,   35,   35,    0,    0,   33,    0,   35,    0,
    0,   33,   35,    0,   35,   33,    0,    0,   33,    0,
    0,    0,    0,    0,   35,    0,   35,   35,    0,   35,
   33,   33,    0,   35,    0,   33,   33,  187,    0,    0,
    0,   33,    0,   33,   33,   33,   33,    0,    0,    0,
    0,   33,    0,   35,    0,   33,    0,   33,    0,   35,
   35,  197,    0,   28,    0,   28,    0,   33,    0,    0,
   33,    0,   33,    0,    0,    0,   33,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   28,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   33,    0,    0,   28,
    0,    0,   33,   33,   28,    0,   48,    0,    0,   28,
    0,   28,   28,   28,   28,    0,    0,   48,    0,   28,
    0,    0,   48,   28,    0,    0,   48,    0,    0,   48,
    0,    0,    0,    0,    0,   28,    0,    0,   28,    0,
   28,   48,   48,    0,    0,    0,   48,   48,    0,   48,
    0,    0,   48,    0,   48,   48,   48,   48,    0,    0,
   48,    0,   48,    0,   28,   48,   48,    0,   48,   48,
   28,   28,   48,    0,    0,    0,    0,    0,   48,    0,
    0,   48,    0,   48,   48,   48,    0,   48,    0,   48,
   48,   48,    0,    0,    0,   48,    0,   48,   48,   48,
   48,    0,    0,    0,    0,   48,    0,   48,    0,   48,
    0,   48,    0,   37,   48,    0,    0,    0,    0,    0,
    0,   48,    0,    0,   48,    0,   48,   48,    0,   48,
   48,    0,   48,    0,    0,    0,    0,   48,    0,   48,
   48,   48,   48,    0,    0,    0,    0,   48,    0,    0,
   48,   48,   48,    0,    0,    0,   38,    0,    0,    0,
    0,    0,    0,   48,    0,   48,   48,   48,   48,   48,
   48,    0,    0,    0,    0,   48,    0,   48,   48,   48,
   48,    0,    0,    0,    0,   48,    0,    0,    0,   48,
   48,    0,   48,    0,   48,   48,    0,    0,  209,    0,
    0,   48,    0,   48,   48,   48,   48,    0,   48,    0,
    0,    0,    0,   48,    0,   48,   48,   48,   48,    0,
    0,    0,    0,   48,    0,    0,    0,   48,   48,    0,
   48,    0,   48,   48,    0,  447,  211,    0,    0,   48,
    0,   48,   48,    0,   48,    0,   48,    0,    0,    0,
    0,   48,    0,   48,   48,   48,   48,    0,  448,    0,
    0,   48,    0,    0,    0,   48,    0,    0,   48,    0,
    0,  449,    0,    0,  312,  450,  451,   48,  447,    0,
   48,  452,   48,  453,  454,  455,  456,    0,    0,    0,
    0,  457,    0,    0,    0,  458,    0,    0,    0,    0,
    0,  448,    0,    0,    0,    0,   48,  459,   48,   48,
  460,    0,  461,    0,  449,    0,    0,    0,    0,  451,
    0,    0,    0,    0,  452,    0,  453,  454,  455,  456,
    0,    0,    0,    0,  457,    0,  462,    0,  458,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  459,    0,    0,  460,    0,  461,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  462,
  };
  protected static readonly short [] yyCheck = {            17,
   17,    4,  507,   17,   20,  299,    6,   18,  300,   52,
  235,  191,  353,   20,  291,  107,  509,  464,   85,  250,
  190,   60,  549,  298,  159,  483,  296,  335,   17,  328,
  318,  353,  559,   48,   60,  730, 1076,  705,  706, 1113,
 1114,    0,  906,  237,    0,   59,  113,  569,  115,  324,
  759,   78,  256,  113,  256,  115,   74,  256,  256,  256,
   78,  256, 1181,  256,  268, 1197,   80,  256,   82,  256,
  256,  256,   88,   89,  256,  325,  268,  368,   96,  368,
  748, 1213,  750,  282,   17, 1159,  368,  374,  294,  268,
  376,  256,  268,  109,  339, 1285,  357,  335,  256,  306,
  276,  391,   17,   21,  367, 1224,  313, 1226, 1298, 1226,
  368,  367,  373,  376,  277,  314,  374,   17,  325,  257,
  376,   17,  367,  381,  414,  386, 1316,  418,  650,  416,
   17,  376,  407,   17,  365,   53, 1071, 1256,   17, 1256,
  429,  159,  159,  429,  339,  159,  294,  429,  191,  344,
  256,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,  266,   17,   17,   17,   17,  259,  418,  256,
  159,  294,  370,  368,  372,  370,  374,  372,  256,  374,
  375,  376,  523,  306,  370,  391,  202,  203,  374,  368,
  256,  429,  235,   62,  381,  390,  381,   66,   67,   68,
  358,   70,   71,  428,  503,  546,   75,   76,  414,  301,
  314,  226,  506,   82,  707,   84,  418,   86,  422,  418,
  418,  418,   91,   92,  546,  418,  159,    0,  569,  418,
  422,  231,  250,  339,  429,  429,  418,  255,  344,  343,
  346,  549,  418,  422,  159,  114,  352,  353,  264,  288,
  317,  559, 1384,  418,  321,  418,  419,  296,  325,  159,
   88,   89,  288,  159,  356,  325,  424,  425,  426,  427,
  418,  375,  159,  291,  290,  159,  294,  295,  325, 1411,
  159,  109,  369,  264,  300,  994,  256,  391,  314,  307,
  306, 1423,  294, 1425,  312,  418,  314,  375,  257,  313,
  318,  257,  970,  369,  256,  159,  159,  159,  159,  650,
  414,  329,  330,  256, 1009,  372,  272,  256,  335,  346,
  842,  277,  256,  429,  428,  281,  256,  262,  346,  651,
  671, 1158,  256,  418,  350,  372,  372,  353, 1378,  358,
  296,  371,  434,  428,  325, 1054,  335,  365,  366, 1176,
  256,  372,  370,  371,  372,  373,  374,  375,  376,  377,
  378,  379,  380,  298,  256,  256,  882,  323,  384,  385,
 1444,  418,  429,  294,  202,  203,  468,  469,  335,  256,
  873,  349,  350, 1318,  402,  428,  342,  963,  257,  391,
  420,  260,  429,  429,  852,  438,  412,  413,  368, 1473,
 1227,  493, 1266,  305,  374,  693,  294,  341,  429,  339,
 1345, 1346,  414, 1348,  430,  991,  368, 1413, 1414, 1087,
  435,  436,  374,  430, 1359,  256,  441, 1362,  444,  298,
  369,  374,  368,  339,  775,  369,  264,  444,  344,  709,
  346,  310, 1377,  378,  379,  369,  352,  353,  679,  376,
 1277, 1119, 1120,  775, 1281,  369,    6,  483, 1126,  373,
 1036,  429,  290,  371,  478,  373, 1401,   17,  341,  962,
  391,  256,  988, 1469,  990,  367,  367,  369,  306,  371,
  256,  263,  418,  256,  576,  376,  578,  505,  580,  507,
  367,  509,  369,  414,  371,  372,  369,  374,  372,  376,
  374,  842,  429,  391,  257,  519,  520,  523,  339,  423,
   60,  277,  368,  531,   64,  281,  523,  349,  350,  841,
  538,  418,  350,  429,  349,  350,  414,  305,  420,  305,
  546,  423,  549,  315,   17,  269,  367,  401,   88,   89,
  861,  418,  559,  420,  558,  839,  423,  263,  256,  413,
  642,  872,  286,  569,  339,  429,  384,  385,  368,  109,
  549,  792, 1181,  851,  582,  583,  339,  866,  368,  368,
  559,  256,  373,  429,  369,  376,  342,   60,  343, 1037,
  343,   64,  367,  718,  412,  413,   98,   99,  100,  101,
  102,  103,  104,  105,  367,  870, 1123,  429,  371,  315,
  373,  374,  375,  376,  429, 1224,  343, 1226,  381,  159,
  479,  629,  375,  256,  906,  374,  381,  635,  381,  429,
  305,  713,  372,  418,  374,  372,  391,  369,  391,  429,
  429,  339,  272,  376,  650,  272,  344, 1256,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,  414,
  519,  414,  202,  203,  391,  671,  296,  416,  357,  296,
  368,  679,  370,  428,  372,  428,  374,  375,  376,  376,
  709,  418,  672,  272,  741,  693,  159,  414,  277,  429,
  418,  369,  281,  323,  702,  979,  323,  386,  414,  707,
  428,  428, 1181,  376,  712,  370,  339,  296,  371,  374,
  931,  344,  428,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,  264,  386,  256,  367,  734,  367,
 1181,  429,  736,  371,  323,  368,  376,  370,  272,  372,
  418,  374,  375,  376,  752, 1224,  754, 1226,  288,  755,
  290,  384,  385,  342,  758,  759,  389,  390, 1180, 1181,
  300,  769,  296, 1181,  367,  771,  306,  400,  401,  775,
  371,  343,  414, 1224,  314, 1226, 1043, 1256, 1200,  787,
  413,  256,  420,  816,  792,  793,  428,  795,  367,  323,
  418,  381, 1076, 1091,  269,  335,  429,  376,  806,  807,
  882,  391, 1224,  375, 1226, 1256, 1224,  381, 1226,  339,
  350,  286, 1079,  353,  344,  288,  346,  391,  824,  391,
  294,  367,  352,  353,  414, 1123,  328,  824,  391,  837,
  376,  839,  306, 1181, 1256,  379,  842,  843, 1256,  829,
  414,  314,  414,  851,  384,  385,  854, 1007, 1069,  384,
 1117,  414,  369,  861,  428, 1153,  428,  306,  421,  369,
  389, 1298,  335,  871,  313,  873,  367,  369,  367,  386,
  387,  381,  412,  413,  385,  376, 1224,  376, 1226,  381,
  382,  383, 1181, 1366,  386,  387,  388,  389,  390,  391,
  392,  393,  394,  395,  396,  397,  398,  399,  400,  401,
  906,  394,  395,  357, 1235,  913,  988,  915, 1256,  917,
  261, 1242,  391,  357,  400,  369,  734, 1132,  372,  373,
  374, 1188,  928,  931,  371, 1224,  373, 1226, 1010,  373,
  936,  928,  386,  284,  374,  414,  376,  755, 1108,  357,
  370,  381,  386,  483,  374, 1428,  297,  390,  938,  428,
  940,  302,  942,  771,  962,  373,  307, 1256,  309,  310,
  311,  312,  339,  367,  418,  369,  317,  344,  386,  346,
  321, 1181,  349,  350,  325,  352,  353,  373,  369,  414,
  376, 1464,  333,  523, 1266,  336,  421,  338,  373,  339,
  994, 1486, 1487, 1001,  344, 1003,  346, 1005,  418,  349,
  350,  503,  352,  353,  398,  399,  546,  382,  383,  549,
  483,  362,  376,  372, 1224,  374, 1226,  376,  372,  559,
  374,  396,  397, 1016,  374,  843,  306,  339,  308,  569,
  354,  355,  344,  313,  346, 1043,  369,  349,  350,  372,
  352,  353,  418,  370,  371,  325, 1256,  374, 1056, 1057,
 1054,  372,  429,  374,  371,  376, 1064,  415,  357,  370,
  370, 1069,  374,  374,  374,  354,  355,  418, 1076, 1070,
  369, 1079,  574,  418,  373, 1108,  549, 1110,  339,  429,
  386,  387,  388,  344, 1091,  346,  559,  386,  349,  350,
 1098,  352,  353,  339, 1378,  256,   60, 1105,  344, 1132,
  346,  414,  415,  349,  350, 1111,  352,  353,  368, 1117,
  650,  371, 1091,  373,  374,  418, 1123,  429,  936,  418,
  277, 1129, 1130,  370,  371,  418,  373,  374,  375, 1162,
   94,  671,  392,  393,   98,   99,  100,  101,  102,  103,
  104,  105,  376,  372, 1123,  374, 1153, 1180, 1181,  370,
  340,  372,  412,  374,  370,  367,  372, 1163,  374,    0,
  420,  376, 1170,  423,  373,  705,  706, 1200,  429,  374,
  357,  376,  370, 1179, 1153,  371,  374,  373, 1186,  370,
 1188,  372,  369,  429,  370,  372,  373,  370,  374,  372,
  374, 1224,  376, 1226,  734,  368,  392,  393,  371,  386,
  373,  374,  372,  370,  339,  372,  376,  376,  748,  344,
  750,  346,  370, 1295,  372,  755,  412,  352,  353,  392,
  393,  364,  365, 1256,  420,  376, 1308,  423, 1234, 1235,
  418,  771,  705,  706, 1238,  775, 1242,  418,  372,  412,
  374,  372,  367, 1325,  343, 1327,  371,  420,  373,  374,
  423,  376,  372,  256,  374,  376,  381, 1263, 1264,  370,
 1266,  372,  414,  370,  367,  372, 1272,  372,  371,  418,
  373,  374,  374,  376,  376,  748,  418,  750,  381, 1285,
  418, 1287,  367,  374, 1290,  376,  371,  369,  373,  374,
  415,  376, 1298,  374,  418,  376,  381,  349,  350, 1303,
  285,  372,  842,  843,  390,  391,  392,  393,  418,  374,
 1316,  376,  415,  372,  373,  364,  365, 1074, 1075,  388,
  389,  394,  395, 1356,  288,  376,  372,  372,  368,  372,
  374,  372,  296,  372,  372,  418,  339,  372,  294,  294,
 1373,  344,  327,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355, 1386, 1387,  374,  372,  372, 1366,  376,
 1364, 1179,  418,  374,  866,  368,  906,  370,  372,  372,
 1378,  374,  375,  376,  371,  256,  374,  356,  372,  375,
 1413, 1414,  418,  374,  418,  375,  381, 1395,  374,  373,
  418,  372,  377,  378,  379,  380,  936,  382,  383,  384,
  385,  386,  387,  388,  389,  369,  381,  392,  393,  394,
  395,  396,  397,  398,  399,  256, 1234,  381,  382,  383,
 1428,  262,  386,  387,  374,  374,  429,  374,  376,  418,
  970,    0,  374,  294,  372,  423, 1469,  429,  374,  367,
  418,  372,  418,  373,  343, 1263, 1264,  372,  374,  294,
  294,  374,  418,  294,  370,  418, 1464,  298,  371,  381,
  418,  367,  256,  375,  256,  374, 1470, 1471,  256, 1287,
  256,  372, 1290, 1477, 1478,  372,  381,  280, 1486, 1487,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  256,  367,  372,  368,  418,  343,  374,  970,  339,  418,
  418,  418,  376,  344,  370,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,  371,  376,  418,  376,
  374,  372,  372,  376,  370,  421,  367,  368,  423,  370,
  371,  372,  381,  374,  375,  376,  347,  378,  379,  351,
  367,  382,  383,  384,  385,  381,  381, 1087,  389,  390,
  256, 1091,  256,  394,  395,  396,  397,  398,  399,  400,
  401,  368,  372,  372,  347,  370,  374,  367,  370,  375,
  348, 1111,  413,  372,  375,  416,  372,  418,  368, 1119,
 1120,  370,  339, 1123,  418,  418, 1126,  374,  429,  256,
  374,  376,  348,  368,  375,  367,  367,  367,  265,    0,
  267,  368,  381,  270,  356,  418,  371,  376,  275,  368,
  574,  374,  279, 1153, 1087,  368,  337,  372, 1091,  368,
  305,  288,  376, 1163,  371,  418,  371,  418,  295,  369,
  367,  381,  371,  300,  367,  371,  418,  304,  418, 1179,
  371,  418,  371,  373,  371,  369, 1119, 1120,  371,  316,
 1123,  318,  372, 1126,  372,  322,  381,  374,  373,  373,
  261,  374,  263,  330,  331,  374,  256,  334,  376,  374,
  337,  372,  418,  372,  370,  418,  376,  418,  376,  372,
 1153,  376,  372,  284,  418,  367,  372,  256,  368,  381,
  381,  370,  261,  262, 1234, 1235,  297,  372,  368,  315,
  263,  302, 1242,  371,  368,  371,  307,  372,  309,  310,
  311,  312,  372,    0,  315,  284,  317,    0,  367,  376,
  321,  418,  376, 1263, 1264,  294, 1266,  368,  297,  298,
  372,    0,  333,  302,  368,  336,  305,  338,  307,  376,
  309,  310,  311,  312,  372,  709,  372, 1287,  317,  418,
 1290,  418,  321,  370,  367,  376,  325,  368,  368,  367,
  372,  362,  376,  370,  333,  418,    0,  336,  418,  338,
  339,  376,  376,  368,  372,  344,  376,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,  372,  368,
  372,  368,  372,  362,  367,  376,  368,  368,  367,  368,
  367,  370,  371,  372,  373,  374,  375,  376,  373,  378,
  379,  315,  381,  382,  383,  384,  385,  386,  387,  388,
  389,  390,  376,  392,  393,  394,  395,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,  376,  376,  416,  376,  418,
  376,  420,  376,  376,  423,  256,  257,  376,  263,   51,
  429,   52,   12,  264,  265,  266,  267,  268,    5,  270,
  271,  928,  273,  274,  275,  276,  277,  278,  279,  280,
  824, 1200, 1256, 1381,  285, 1418,  287,  288,  289,  290,
  291,  292, 1069, 1069,  295,    0, 1434,  671,  299,  300,
 1369,  302,  303,  304, 1398, 1364, 1272, 1285,  845,  685,
  845,  845,  841,  314, 1478,  316, 1224,  318,  319, 1472,
 1304,  322, 1212,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335, 1391,  337, 1387, 1386,  340,
  341, 1327, 1162,  344,  345, 1471, 1272,  816,  523, 1163,
  712,  866,  792,  583,  365,  787,  979,  679,  359,  360,
  361,  362,  363,   72,  331,  709,  367,  368,   94,  396,
  371,  397,  400,  398, 1146,  376,  377,  378,  379,  380,
  399,  401,  546,  384, 1234,  386,  159, 1153,  949, 1057,
 1091,  392,  393,  964, 1048, 1037, 1046,  911,  886,  521,
 1230, 1130,  775,  420,  822,  821,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  417,  418,  419,  420,
   -1,  422,  256,  257,   -1,   -1,   -1,   -1,  429,   -1,
  264,  265,  266,  267,  268,   -1,  270,  271,   -1,  273,
  274,  275,  276,  277,  278,  279,   -1,   -1,    0,   -1,
   -1,  285,   -1,  287,  288,  289,  290,  291,  292,   -1,
   -1,  295,   -1,   -1,   -1,  299,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  314,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,   -1,  337,   -1,   -1,  340,  341,   -1,   -1,
  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,
   -1,   -1,   -1,  367,  368,   -1,   -1,  371,   -1,   -1,
   -1,   -1,  376,  377,  378,  379,  380,   -1,   -1,   -1,
  384,  256,  386,   -1,   -1,   -1,  261,  262,  392,  393,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,  284,
   -1,   -1,   -1,  417,  418,  419,  420,   -1,  422,  294,
   -1,   -1,  297,  298,   -1,  429,   -1,  302,   -1,   -1,
  305,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,
  325,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,
   -1,  336,   -1,  338,  339,   -1,   -1,   -1,   -1,  344,
   -1,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,  357,   -1,   -1,   -1,   -1,  362,   -1,   -1,
   -1,   -1,  367,  368,  369,  370,  371,  372,  373,  374,
  375,  376,   -1,  378,  379,   -1,   -1,  382,  383,  384,
  385,  386,   -1,   -1,  389,  390,   -1,   -1,   -1,  394,
  395,  396,  397,  398,  399,  400,  401,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  413,  261,
  262,  416,   -1,  418,   -1,  420,   -1,   -1,  423,   -1,
   -1,   -1,   -1,   -1,  429,    0,   -1,   -1,   -1,   -1,
   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  294,   -1,   -1,  297,  298,   -1,   -1,   -1,
  302,   -1,   -1,  305,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,
   -1,   -1,   -1,  325,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  333,   -1,   -1,  336,   -1,  338,  339,   -1,   -1,
   -1,   -1,  344,   -1,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,
  362,   -1,   -1,   -1,   -1,  367,  368,  369,  370,  371,
  372,   -1,  374,  375,  376,   -1,  378,  379,   -1,   -1,
  382,  383,  384,  385,  256,   -1,   -1,  389,  390,  261,
  262,   -1,  394,  395,  396,  397,  398,  399,  400,  401,
    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  413,  284,   -1,  416,   -1,  418,   -1,  420,   -1,
   -1,  423,  294,   -1,   -1,  297,  298,  429,   -1,   -1,
  302,   -1,   -1,  305,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,
   -1,   -1,   -1,  325,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  333,   -1,   -1,  336,   -1,  338,  339,   -1,   -1,
   -1,   -1,  344,   -1,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,
  362,   -1,   -1,   -1,   -1,  367,  368,  369,  370,  371,
  372,   -1,  374,  375,  376,   -1,  378,  379,   -1,   -1,
  382,  383,  384,  385,   -1,   -1,   -1,  389,  390,   -1,
   -1,   -1,  394,  395,  396,  397,  398,  399,  400,  401,
   -1,  256,   -1,   -1,   -1,   -1,  261,  262,   -1,   -1,
   -1,  413,   -1,   -1,  416,   -1,  418,   -1,  420,   -1,
   -1,  423,   -1,   -1,   -1,   -1,   -1,  429,   -1,  284,
   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,  294,
   -1,   -1,  297,  298,   -1,   -1,   -1,  302,   -1,   -1,
  305,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,
  325,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,
   -1,  336,   -1,  338,  339,   -1,   -1,   -1,   -1,  344,
   -1,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,   -1,   -1,   -1,   -1,  362,   -1,   -1,
   -1,   -1,  367,  368,   -1,  370,  371,  372,   -1,  374,
  375,  376,   -1,  378,  379,   -1,  256,  382,  383,  384,
  385,   -1,  262,   -1,  389,  390,   -1,   -1,   -1,  394,
  395,  396,  397,  398,  399,  400,  401,   -1,    0,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  413,   -1,
   -1,  416,   -1,  418,  294,   -1,   -1,   -1,  298,   -1,
   -1,   -1,   -1,   -1,  429,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  339,
   -1,    0,   -1,   -1,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,  357,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,  368,  369,
  370,  371,  372,  373,  374,  375,  376,   -1,  378,  379,
   -1,   -1,  382,  383,  384,  385,  386,   -1,   -1,  389,
  390,   -1,   -1,   -1,  394,  395,  396,  397,  398,  399,
  400,  401,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    0,   -1,   -1,  413,   -1,   -1,  416,   -1,  418,   -1,
  420,   -1,  257,  423,   -1,   -1,  261,   -1,  263,  429,
  265,   -1,  267,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,   -1,  277,   -1,  279,   -1,  281,  282,  283,  284,
   -1,   -1,  287,  288,   -1,   -1,   -1,    0,  293,  294,
  295,  296,  297,   -1,   -1,  300,  301,  302,   -1,  304,
   -1,  306,  307,  308,  309,  310,  311,  312,  313,   -1,
  315,  316,  317,  318,   -1,   -1,  321,  322,  323,   -1,
  325,   -1,   -1,   -1,   -1,  330,  331,   -1,  333,  334,
   -1,  336,  337,  338,   -1,   -1,   -1,  342,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    0,   -1,   -1,   -1,   -1,   -1,   -1,  362,   -1,  364,
  365,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,
   -1,   -1,  377,  265,   -1,  267,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,   -1,  277,   -1,  279,   -1,  281,
  282,  283,  284,    0,   -1,  287,  288,   -1,   -1,   -1,
   -1,  293,   -1,  295,  296,  297,   -1,   -1,  300,  301,
  302,   -1,  304,  418,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,   -1,  316,  317,  318,   -1,  257,  321,
  322,  323,  261,   -1,   -1,   -1,    0,   -1,  330,  331,
   -1,  333,  334,  272,  336,  337,  338,   -1,  277,   -1,
  342,   -1,  281,   -1,   -1,  284,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,
  362,   -1,  301,  302,   -1,   -1,  368,  369,  307,    0,
  309,  310,  311,  312,   -1,  377,   -1,   -1,  317,   -1,
   -1,   -1,  321,   -1,  323,   -1,   -1,  257,   -1,   -1,
   -1,  261,   -1,   -1,  333,   -1,  335,  336,   -1,  338,
   -1,   -1,  272,  342,   -1,   -1,   -1,  277,   -1,   -1,
   -1,  281,    0,   -1,  284,   -1,  418,   -1,   -1,   -1,
   -1,   -1,   -1,  362,   -1,   -1,  296,  297,   -1,  368,
  369,  301,  302,   -1,  257,   -1,   -1,  307,  261,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,  272,
   -1,  321,   -1,  323,  277,    0,   -1,   -1,  281,   -1,
   -1,  284,   -1,  333,   -1,  335,  336,   -1,  338,   -1,
   -1,   -1,  342,  296,  297,   -1,   -1,   -1,  301,  302,
   -1,   -1,   -1,   -1,  307,   -1,  309,  310,  311,  312,
   -1,   -1,  362,   -1,  317,   -1,   -1,  257,  321,  369,
  323,  261,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  333,   -1,  272,  336,   -1,  338,   -1,  277,    0,  342,
   -1,  281,   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,  362,
  257,  301,  302,   -1,  261,  368,  369,  307,   -1,  309,
  310,  311,  312,   -1,   -1,  272,   -1,  317,   -1,   -1,
  277,  321,   -1,  323,  281,   -1,   -1,  284,   -1,   -1,
   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,  296,
  297,   -1,  342,  257,  301,  302,   -1,  261,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,  272,   -1,
  317,   -1,  362,  277,  321,   -1,  323,  281,  368,  369,
  284,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,
   -1,  338,  296,  297,   -1,  342,  257,  301,  302,   -1,
  261,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,  272,   -1,  317,   -1,  362,  277,  321,   -1,  323,
  281,   -1,  369,  284,   -1,   -1,   -1,   -1,   -1,  333,
   -1,   -1,  336,   -1,  338,  296,  297,   -1,  342,  257,
  301,  302,   -1,  261,   -1,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,  272,   -1,  317,   -1,  362,  277,
  321,   -1,  323,  281,   -1,   -1,  284,   -1,   -1,   -1,
   -1,   -1,  333,   -1,   -1,  336,   -1,  338,  296,  297,
   -1,  342,  257,  301,  302,   -1,  261,   -1,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,  272,   -1,  317,
   -1,  362,  277,  321,   -1,  323,  281,   -1,   -1,  284,
   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,
  338,  296,  297,   -1,  342,   -1,  301,  302,   -1,   -1,
   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
   -1,   -1,  317,   -1,  362,  257,  321,   -1,  323,  261,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,
  272,  336,   -1,  338,   -1,  277,   -1,  342,   -1,  281,
   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  296,  297,   -1,  362,   -1,  301,
  302,   -1,   -1,   -1,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,
   -1,  323,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  333,   -1,  256,  336,   -1,  338,   -1,   -1,   -1,
  342,  264,  265,  266,  267,   -1,   -1,  270,  271,   -1,
  273,  274,  275,  276,  277,  278,  279,   -1,   -1,   -1,
  362,   -1,  285,   -1,  287,  288,  289,  290,  291,  292,
   -1,   -1,  295,   -1,   -1,   -1,  299,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  314,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,  324,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,  335,   -1,  337,   -1,   -1,  340,  341,   -1,
  256,  344,  345,   -1,   -1,   -1,  262,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,
   -1,   -1,   -1,  376,  377,  378,  379,  380,   -1,   -1,
   -1,  384,  298,  386,   -1,   -1,   -1,   -1,   -1,  392,
  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,
   -1,   -1,  262,   -1,  417,  418,  419,  420,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,  429,   -1,  344,   -1,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,  357,   -1,   -1,   -1,   -1,   -1,   -1,  298,   -1,
   -1,   -1,  368,  369,  370,  371,  372,  373,  374,  375,
  376,   -1,  378,  379,   -1,  381,  382,  383,  384,  385,
  386,  387,  388,  389,  390,   -1,  392,  393,  394,  395,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,  413,   -1,  256,
   -1,   -1,  418,   -1,  420,  262,   -1,  423,   -1,   -1,
   -1,   -1,   -1,  429,   -1,   -1,   -1,   -1,  368,   -1,
   -1,  371,   -1,  373,  374,   -1,   -1,   -1,  378,  379,
   -1,   -1,  382,  383,  384,  385,  386,  387,  388,  389,
  390,  298,  392,  393,  394,  395,  396,  397,  398,  399,
  400,  401,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  412,  413,   -1,   -1,   -1,   -1,   -1,   -1,
  420,  262,   -1,  423,   -1,   -1,   -1,   -1,   -1,  429,
   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,   -1,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  298,   -1,   -1,
  367,  368,  369,  370,  371,  372,  373,  374,  375,  376,
   -1,  378,  379,   -1,  381,  382,  383,  384,  385,  386,
  387,  388,  389,  390,   -1,  392,  393,  394,  395,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,  411,  412,  413,   -1,  256,   -1,
   -1,   -1,   -1,  420,  262,   -1,  357,   -1,   -1,   -1,
   -1,   -1,  429,   -1,   -1,   -1,   -1,   -1,  369,   -1,
  371,   -1,  373,   -1,   -1,  376,   -1,  378,  379,   -1,
  381,  382,  383,  384,  385,  386,  387,  388,  389,  390,
  298,  392,  393,  394,  395,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,  413,   -1,   -1,   -1,   -1,  418,   -1,  420,
  262,   -1,  423,   -1,   -1,   -1,   -1,   -1,  429,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,   -1,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  298,   -1,   -1,  367,
  368,   -1,  370,  371,  372,  373,  374,  375,  376,   -1,
  378,  379,   -1,  381,  382,  383,  384,  385,  386,  387,
  388,  389,  390,   -1,  392,  393,  394,  395,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,   -1,  256,   -1,   -1,
   -1,   -1,  420,  262,   -1,  423,   -1,   -1,   -1,   -1,
   -1,  429,   -1,   -1,   -1,   -1,   -1,  369,   -1,  371,
  372,  373,  374,   -1,  376,   -1,  378,  379,   -1,  381,
  382,  383,  384,  385,   -1,  387,  388,  389,  390,  298,
  392,  393,  394,  395,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,   -1,   -1,   -1,   -1,  418,   -1,  420,  262,
   -1,  423,   -1,   -1,   -1,   -1,   -1,  429,   -1,   -1,
  339,   -1,   -1,   -1,   -1,  344,   -1,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  298,   -1,   -1,   -1,  368,
   -1,  370,  371,  372,  373,  374,  375,  376,   -1,  378,
  379,   -1,  381,  382,  383,  384,  385,  386,  387,  388,
  389,  390,   -1,  392,  393,  394,  395,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,   -1,  256,   -1,   -1,   -1,
   -1,  420,  262,   -1,  423,   -1,   -1,   -1,   -1,   -1,
  429,   -1,   -1,   -1,   -1,   -1,   -1,  370,  371,  372,
  373,  374,   -1,   -1,   -1,  378,  379,   -1,  381,  382,
  383,  384,  385,  386,  387,  388,  389,  390,  298,  392,
  393,  394,  395,  396,  397,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,  408,  409,  410,  411,  412,
  413,   -1,   -1,   -1,   -1,   -1,   -1,  420,   -1,   -1,
  423,   -1,   -1,   -1,   -1,   -1,  429,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,
  370,  371,  372,  373,  374,  375,  376,   -1,  378,  379,
   -1,  381,  382,  383,  384,  385,  386,  387,  388,  389,
  390,   -1,  392,  393,  394,  395,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
  410,  411,  412,  413,   -1,  256,  256,   -1,   -1,   -1,
  420,  262,   -1,  423,   -1,  265,   -1,  267,   -1,  429,
  270,   -1,   -1,   -1,   -1,  275,   -1,   -1,   -1,  279,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,  298,   -1,   -1,
  300,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,   -1,
   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  330,  331,   -1,   -1,  334,   -1,   -1,  337,  339,   -1,
   -1,   -1,   -1,  344,   -1,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,
  371,  372,  373,  374,  375,  376,   -1,  378,  379,   -1,
  381,  382,  383,  384,  385,  386,  387,  388,  389,  390,
   -1,  392,  393,  394,  395,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,  413,   -1,  256,  256,   -1,   -1,  418,  420,
  262,   -1,  423,   -1,  265,   -1,  267,   -1,  429,  270,
   -1,   -1,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,  298,   -1,   -1,  300,
   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,   -1,   -1,
   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  330,
  331,   -1,   -1,  334,   -1,   -1,  337,  339,   -1,   -1,
   -1,   -1,  344,   -1,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,  371,
  372,  373,  374,  375,  376,   -1,  378,   -1,   -1,  381,
  382,  383,  384,  385,  386,  387,  388,  389,  390,   -1,
  392,  393,  394,  395,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,   -1,  256,   -1,  256,   -1,  418,  420,  262,
   -1,  423,   -1,  264,  265,   -1,  267,  429,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,  298,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,   -1,  339,   -1,   -1,   -1,
   -1,  344,   -1,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,   -1,   -1,   -1,  368,   -1,  370,   -1,  372,
  371,  374,  375,  376,   -1,  378,  379,   -1,  381,  382,
  383,  384,  385,  386,  387,  388,  389,  390,  261,   -1,
   -1,  394,  395,  396,  397,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,  408,  409,  410,  411,  256,
  413,  284,   -1,   -1,   -1,  262,  417,  418,   -1,   -1,
   -1,   -1,   -1,   -1,  297,   -1,  429,   -1,   -1,  302,
   -1,   -1,  305,   -1,  307,   -1,  309,  310,  311,  312,
   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,
   -1,  298,  325,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  333,   -1,   -1,  336,   -1,  338,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,  362,
   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,   -1,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  298,
   -1,  368,   -1,  370,   -1,  372,   -1,  374,  375,  376,
   -1,  378,  379,   -1,   -1,  382,  383,  384,  385,  386,
  387,  388,  389,  390,   -1,  418,   -1,  394,  395,  396,
  397,  398,  399,  400,  401,   -1,   -1,   -1,   -1,   -1,
  339,   -1,   -1,   -1,   -1,  344,  413,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,  256,  429,   -1,   -1,   -1,   -1,  262,   -1,  368,
   -1,  370,   -1,  372,   -1,  374,  375,  376,   -1,  378,
  379,   -1,   -1,  382,  383,  384,  385,   -1,   -1,   -1,
  389,  390,   -1,   -1,   -1,  394,  395,  396,  397,  398,
  399,  400,  401,  298,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  413,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
  429,   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,
   -1,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  298,   -1,  368,   -1,  370,   -1,  372,   -1,  374,
  375,  376,   -1,  378,  379,   -1,   -1,  382,  383,  384,
  385,   -1,   -1,   -1,  389,  390,   -1,   -1,   -1,  394,
  395,  396,  397,  398,  399,  400,  401,   -1,   -1,   -1,
   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  413,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,   -1,   -1,  256,  429,   -1,   -1,   -1,   -1,  262,
   -1,  368,   -1,  370,   -1,  372,   -1,  374,  375,  376,
   -1,  378,  379,   -1,   -1,  382,  383,  384,  385,   -1,
   -1,   -1,  389,  390,   -1,   -1,   -1,  394,  395,  396,
  397,  398,  399,  400,  401,  298,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  413,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,  429,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,
   -1,  344,   -1,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,  372,
   -1,  374,  375,  376,   -1,  378,  379,   -1,   -1,  382,
  383,  384,  385,   -1,   -1,   -1,  389,  390,   -1,  256,
   -1,  394,  395,  396,  397,  398,  399,  400,  401,   -1,
   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,
  413,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,   -1,   -1,   -1,  429,   -1,   -1,   -1,
   -1,   -1,   -1,  368,   -1,  370,   -1,  372,   -1,  374,
  375,  376,   -1,   -1,   -1,   -1,   -1,  382,  383,  384,
  385,   -1,   -1,   -1,  389,  390,   -1,  256,   -1,  394,
  395,  396,  397,  398,  399,  400,  401,   -1,   -1,   -1,
   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  413,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,   -1,   -1,   -1,  429,   -1,   -1,   -1,   -1,   -1,
   -1,  368,   -1,  370,   -1,  372,   -1,  374,  375,  376,
   -1,   -1,   -1,   -1,   -1,  382,  383,  384,  385,   -1,
   -1,   -1,  389,  390,   -1,  256,   -1,  394,  395,  396,
  397,  398,  399,  400,  401,   -1,   -1,   -1,   -1,   -1,
  339,   -1,   -1,   -1,   -1,  344,  413,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,   -1,  429,   -1,   -1,   -1,   -1,   -1,   -1,  368,
   -1,  370,   -1,  372,   -1,  374,  375,  376,   -1,   -1,
   -1,   -1,   -1,  382,  383,  384,  385,   -1,   -1,   -1,
  389,  390,   -1,  256,   -1,  394,  395,  396,  397,  398,
  399,  400,  401,   -1,   -1,   -1,   -1,   -1,  339,   -1,
   -1,   -1,   -1,  344,  413,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,
  429,   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,
   -1,  372,   -1,  374,  375,  376,   -1,   -1,   -1,   -1,
   -1,  382,  383,  384,  385,   -1,   -1,   -1,  389,  390,
   -1,  256,   -1,   -1,   -1,  396,  397,  398,  399,  400,
  401,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,
   -1,  344,  413,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,   -1,   -1,   -1,   -1,  429,   -1,
   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,  372,
   -1,  374,  375,  376,   -1,   -1,   -1,   -1,   -1,  382,
  383,  384,  385,   -1,   -1,   -1,  389,  390,   -1,  256,
   -1,   -1,   -1,  396,  397,  398,  399,  400,  401,   -1,
   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,
  413,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,   -1,   -1,   -1,  429,   -1,   -1,   -1,
   -1,   -1,   -1,  368,   -1,  370,   -1,  372,   -1,  374,
  375,  376,   -1,   -1,   -1,   -1,   -1,  382,  383,  384,
  385,   -1,   -1,   -1,  389,  390,   -1,  256,   -1,   -1,
   -1,  396,  397,  398,  399,  400,  401,   -1,   -1,   -1,
   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  413,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,   -1,   -1,   -1,  429,   -1,   -1,   -1,   -1,   -1,
   -1,  368,   -1,  370,   -1,  372,   -1,  374,  375,  376,
   -1,   -1,   -1,   -1,   -1,  382,  383,  384,  385,   -1,
   -1,   -1,  389,  390,   -1,  256,   -1,   -1,   -1,  396,
  397,  398,  399,  400,  401,   -1,   -1,   -1,   -1,   -1,
  339,   -1,   -1,   -1,   -1,  344,  413,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,   -1,  429,   -1,   -1,   -1,   -1,   -1,   -1,  368,
   -1,  370,   -1,  372,   -1,  374,  375,  376,   -1,   -1,
   -1,   -1,   -1,  382,  383,  384,  385,   -1,   -1,   -1,
  389,  390,   -1,  256,   -1,   -1,   -1,  396,  397,  398,
  399,  400,  401,   -1,   -1,   -1,   -1,   -1,  339,   -1,
   -1,   -1,   -1,  344,  413,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,
  429,   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,
   -1,  372,   -1,  374,  375,  376,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  384,  385,   -1,   -1,   -1,  389,  390,
   -1,  256,   -1,   -1,   -1,   -1,   -1,  398,  399,  400,
  401,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,
   -1,  344,  413,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,   -1,   -1,   -1,   -1,  429,   -1,
   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,  372,
   -1,  374,  375,  376,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  384,  385,   -1,   -1,   -1,  389,  390,   -1,  256,
   -1,   -1,   -1,   -1,   -1,  398,  399,  400,  401,   -1,
   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,
  413,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,   -1,   -1,   -1,  429,   -1,   -1,   -1,
   -1,   -1,   -1,  368,   -1,  370,   -1,  372,   -1,  374,
  375,  376,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,
  385,   -1,   -1,   -1,  389,  390,   -1,  256,   -1,   -1,
   -1,   -1,   -1,  398,  399,  400,  401,   -1,   -1,   -1,
   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  413,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,   -1,   -1,   -1,  429,   -1,   -1,   -1,   -1,   -1,
   -1,  368,   -1,  370,   -1,  372,   -1,  374,  375,  376,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,  385,   -1,
   -1,   -1,  389,  390,   -1,  256,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  400,  401,   -1,   -1,   -1,   -1,   -1,
  339,   -1,   -1,   -1,   -1,  344,  413,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,   -1,  429,   -1,   -1,   -1,   -1,   -1,   -1,  368,
   -1,  370,   -1,  372,   -1,  374,  375,  376,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  385,   -1,   -1,   -1,
  389,  390,   -1,  256,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  400,  401,   -1,   -1,   -1,   -1,   -1,  339,   -1,
   -1,   -1,   -1,  344,  413,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,
  429,   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,
   -1,  372,   -1,  374,  375,  376,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  385,   -1,   -1,   -1,  389,  390,
   -1,  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  400,
  401,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,
   -1,  344,  413,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,   -1,   -1,   -1,   -1,  429,   -1,
   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,  372,
   -1,  374,  375,  376,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  385,   -1,   -1,   -1,   -1,  390,   -1,  256,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  400,  401,   -1,
   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,
  413,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,   -1,   -1,   -1,  429,   -1,   -1,   -1,
   -1,   -1,   -1,  368,   -1,  370,   -1,  372,   -1,  374,
  375,  376,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  385,   -1,   -1,   -1,   -1,  390,   -1,  256,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  400,  401,   -1,   -1,   -1,
   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  413,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,   -1,   -1,   -1,  429,   -1,   -1,   -1,   -1,   -1,
   -1,  368,   -1,  370,   -1,  372,   -1,  374,  375,  376,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  390,   -1,  256,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  400,  401,   -1,   -1,   -1,   -1,   -1,
  339,   -1,   -1,   -1,   -1,  344,  413,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,   -1,  429,   -1,   -1,   -1,   -1,   -1,   -1,  368,
   -1,  370,   -1,  372,   -1,  374,  375,  376,   -1,   -1,
   -1,  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  390,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  400,  401,   -1,   -1,   -1,   -1,   -1,  339,   -1,
   -1,   -1,   -1,  344,  413,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,
  429,   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,
   -1,  372,   -1,  374,  375,  376,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  390,
   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,
  401,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,  413,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  368,   -1,  370,   -1,  372,  429,  374,
  375,  376,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,  390,   -1,   -1,   -1,   -1,
   -1,  264,  265,  266,  267,   -1,  401,  270,  271,   -1,
  273,  274,  275,  276,  277,  278,  279,   -1,  413,   -1,
   -1,   -1,  285,   -1,  287,  288,  289,  290,  291,  292,
   -1,   -1,  295,   -1,  429,   -1,  299,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  314,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,  324,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,  335,   -1,  337,   -1,   -1,  340,  341,   -1,
   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,
   -1,   -1,   -1,  376,  377,  378,  379,  380,   -1,   -1,
   -1,  384,   -1,  386,   -1,   -1,   -1,   -1,   -1,  392,
  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,   -1,   -1,   -1,  417,  418,  419,  420,  264,  265,
  266,  267,   -1,   -1,  270,  271,   -1,  273,  274,  275,
  276,  277,  278,  279,   -1,   -1,   -1,   -1,   -1,  285,
   -1,  287,  288,  289,  290,  291,  292,   -1,   -1,  295,
   -1,   -1,   -1,  299,  300,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,
  316,   -1,  318,  319,   -1,   -1,  322,   -1,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
   -1,  337,   -1,   -1,  340,  341,   -1,   -1,  344,  345,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,
   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,
  376,  377,  378,  379,  380,   -1,   -1,   -1,  384,   -1,
  386,   -1,   -1,   -1,   -1,   -1,  392,  393,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
   -1,  417,  418,  419,  420,  264,  265,  266,  267,   -1,
   -1,  270,  271,   -1,  273,  274,  275,  276,  277,  278,
  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,  287,  288,
  289,  290,  291,  292,   -1,   -1,  295,   -1,   -1,   -1,
  299,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,   -1,  337,   -1,
   -1,  340,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  359,  360,  361,  362,  363,   -1,   -1,   -1,  367,   -1,
   -1,   -1,  371,   -1,   -1,   -1,   -1,  376,  377,  378,
  379,  380,   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,
   -1,   -1,   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  417,  418,
  419,  420,  264,  265,  266,  267,   -1,   -1,  270,  271,
   -1,  273,  274,  275,  276,  277,  278,  279,   -1,   -1,
   -1,   -1,   -1,  285,   -1,  287,  288,  289,  290,  291,
  292,   -1,   -1,  295,   -1,   -1,   -1,  299,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  314,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,   -1,  337,   -1,   -1,  340,  341,
   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,
   -1,   -1,   -1,   -1,  376,  377,  378,  379,  380,   -1,
   -1,   -1,  384,   -1,  386,   -1,   -1,   -1,   -1,   -1,
  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,   -1,   -1,  417,  418,  419,  420,  264,
  265,  266,  267,   -1,   -1,  270,  271,   -1,  273,  274,
  275,  276,  277,  278,  279,   -1,   -1,   -1,   -1,   -1,
  285,   -1,  287,  288,  289,  290,  291,  292,   -1,   -1,
  295,   -1,   -1,   -1,  299,  300,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,   -1,  337,   -1,   -1,  340,  341,   -1,   -1,  344,
  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,
   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,
   -1,  376,  377,  378,  379,  380,   -1,   -1,   -1,  384,
   -1,  386,   -1,   -1,   -1,   -1,   -1,  392,  393,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,   -1,  417,  418,  419,  420,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,  256,   -1,  275,  276,  277,
   -1,  279,   -1,   -1,  265,   -1,  267,  285,   -1,  270,
  288,   -1,   -1,   -1,  275,   -1,   -1,  295,  279,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,  316,  300,
  318,  319,   -1,  304,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,  316,  334,  318,   -1,   -1,
   -1,  322,   -1,  341,   -1,   -1,  344,  345,   -1,  330,
  331,   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,  367,
  368,   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,  377,
  378,  379,  380,   -1,   -1,   -1,  384,   -1,  386,   -1,
   -1,   -1,   -1,   -1,  392,  393,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  417,
  418,  419,  420,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,  256,   -1,  275,  276,  277,  418,  279,   -1,
   -1,  265,   -1,  267,  285,   -1,  270,  288,   -1,   -1,
   -1,  275,   -1,   -1,  295,  279,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,  316,  300,  318,  319,  320,
  304,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,  316,  334,  318,   -1,   -1,   -1,  322,   -1,
  341,   -1,   -1,  344,  345,   -1,  330,  331,   -1,   -1,
  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,  367,   -1,   -1,   -1,
  371,   -1,   -1,   -1,   -1,   -1,  377,  378,  379,  380,
   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,   -1,   -1,
   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,  417,  418,  419,  420,
  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,  418,  300,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,
  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,
   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,
  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,
   -1,   -1,  367,  368,   -1,   -1,  371,   -1,   -1,   -1,
   -1,   -1,  377,  378,  379,  380,   -1,   -1,   -1,  384,
   -1,  386,   -1,   -1,   -1,   -1,   -1,  392,  393,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,   -1,  417,  418,  419,  420,   -1,   -1,  264,  265,
   -1,  267,   -1,  428,  270,  271,   -1,   -1,   -1,  275,
  276,  277,   -1,  279,   -1,   -1,  265,   -1,  267,  285,
   -1,  270,  288,   -1,   -1,   -1,  275,   -1,   -1,  295,
  279,   -1,   -1,   -1,  300,   -1,  302,  303,  304,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
  316,  300,  318,  319,   -1,  304,  322,   -1,   -1,  325,
   -1,  327,   -1,  329,  330,  331,  332,  316,  334,  318,
   -1,  337,   -1,  322,   -1,  341,   -1,   -1,  344,  345,
   -1,  330,  331,   -1,   -1,  334,   -1,   -1,  337,   -1,
   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,
   -1,  377,  378,  379,  380,   -1,   -1,   -1,  384,   -1,
  386,   -1,   -1,  372,   -1,   -1,  392,  393,   -1,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,  417,  418,  419,  420,  285,   -1,   -1,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,  418,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,
   -1,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,
  360,  361,  362,  363,   -1,   -1,   -1,  367,   -1,   -1,
   -1,  371,   -1,   -1,   -1,   -1,   -1,  377,  378,  379,
  380,   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,   -1,
   -1,   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,  417,  418,  419,
  420,   -1,   -1,  264,  265,   -1,  267,   -1,  428,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
   -1,  265,   -1,  267,  285,   -1,  270,  288,   -1,   -1,
   -1,  275,   -1,   -1,  295,  279,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,  316,  300,  318,  319,   -1,
  304,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,  316,  334,  318,   -1,   -1,   -1,  322,   -1,
  341,   -1,   -1,  344,  345,   -1,  330,  331,   -1,   -1,
  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,  367,   -1,   -1,   -1,
  371,   -1,   -1,   -1,   -1,   -1,  377,  378,  379,  380,
   -1,   -1,   -1,  384,   -1,  386,  370,   -1,   -1,   -1,
   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,   -1,   -1,   -1,  417,  418,  419,  420,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,  418,  279,   -1,   -1,  265,   -1,
  267,  285,   -1,  270,  288,   -1,   -1,   -1,  275,   -1,
   -1,  295,  279,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,  316,  300,  318,  319,   -1,  304,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,  316,
  334,  318,   -1,   -1,   -1,  322,   -1,  341,   -1,   -1,
  344,  345,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,
  337,   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  371,   -1,   -1,
   -1,   -1,   -1,  377,  378,  379,  380,   -1,   -1,   -1,
  384,   -1,  386,   -1,   -1,   -1,   -1,   -1,  392,  393,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,   -1,  417,  418,  419,  420,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,  418,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,
   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,
   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,  345,   -1,
   -1,  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,
  377,  378,  379,  380,   -1,   -1,   -1,  384,   -1,  386,
   -1,   -1,   -1,   -1,   -1,  392,  393,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  417,  418,  419,  420,  371,  372,  373,  374,   -1,   -1,
   -1,  378,  379,   -1,   -1,  382,  383,  384,  385,  386,
  387,  388,  389,  390,   -1,  392,  393,  394,  395,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,  411,  412,  413,   -1,  261,   -1,
   -1,   -1,  265,  420,  267,   -1,  423,  270,   -1,  272,
  273,   -1,  275,   -1,  277,   -1,  279,   -1,  281,  282,
  283,  284,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,
  293,   -1,  295,  296,  297,   -1,   -1,  300,   -1,  302,
   -1,  304,   -1,   -1,  307,   -1,  309,  310,  311,  312,
   -1,   -1,   -1,  316,  317,  318,   -1,   -1,  321,  322,
  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,
  333,  334,   -1,  336,  337,  338,   -1,   -1,   -1,  342,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  261,   -1,  362,
   -1,  265,   -1,  267,   -1,  368,  270,   -1,  272,  273,
   -1,  275,   -1,  277,  377,  279,   -1,  281,  282,  283,
  284,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,  293,
   -1,  295,  296,  297,   -1,   -1,  300,   -1,  302,   -1,
  304,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,  316,  317,  318,  418,   -1,  321,  322,  323,
   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,  333,
  334,   -1,  336,  337,  338,   -1,   -1,   -1,  342,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  261,   -1,  362,   -1,
  265,   -1,  267,   -1,  368,  270,   -1,  272,  273,   -1,
  275,   -1,  277,  377,  279,   -1,  281,  282,  283,  284,
   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,  293,   -1,
  295,  296,  297,   -1,   -1,  300,   -1,  302,   -1,  304,
   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
   -1,  316,  317,  318,  418,   -1,  321,  322,  323,   -1,
   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,  333,  334,
   -1,  336,  337,  338,   -1,   -1,   -1,  342,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  261,   -1,  362,   -1,  265,
   -1,  267,   -1,  368,  270,   -1,  272,  273,   -1,  275,
   -1,  277,  377,  279,   -1,  281,  282,  283,  284,   -1,
   -1,  287,  288,   -1,   -1,   -1,   -1,  293,   -1,  295,
  296,  297,   -1,   -1,  300,   -1,  302,   -1,  304,   -1,
   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,
  316,  317,  318,  418,   -1,  321,  322,  323,   -1,   -1,
   -1,   -1,   -1,   -1,  330,  331,   -1,  333,  334,   -1,
  336,  337,  338,   -1,   -1,   -1,  342,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  261,   -1,  362,   -1,  265,   -1,
  267,   -1,  368,  270,   -1,  272,  273,   -1,  275,   -1,
  277,  377,  279,   -1,  281,  282,  283,  284,   -1,   -1,
  287,  288,   -1,   -1,   -1,   -1,  293,   -1,  295,  296,
  297,   -1,   -1,  300,   -1,  302,   -1,  304,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,  316,
  317,  318,  418,   -1,  321,  322,  323,   -1,   -1,   -1,
   -1,   -1,   -1,  330,  331,   -1,  333,  334,   -1,  336,
  337,  338,   -1,   -1,   -1,  342,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  261,   -1,
   -1,   -1,  265,   -1,  267,  362,   -1,  270,   -1,  272,
  273,  368,  275,   -1,  277,   -1,  279,   -1,  281,  282,
  283,  284,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,
  293,   -1,  295,  296,  297,   -1,   -1,  300,   -1,  302,
  261,  304,   -1,   -1,  307,   -1,  309,  310,  311,  312,
   -1,   -1,   -1,  316,  317,  318,   -1,   -1,  321,  322,
  323,  418,   -1,  284,   -1,   -1,   -1,  330,  331,   -1,
  333,  334,  261,  336,  337,  338,  297,   -1,   -1,  342,
   -1,  302,   -1,   -1,  305,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,   -1,  284,  317,   -1,   -1,  362,
  321,   -1,   -1,   -1,  325,  368,   -1,   -1,  297,   -1,
  261,   -1,  333,  302,   -1,  336,   -1,  338,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,
   -1,   -1,  321,  284,   -1,   -1,  357,   -1,   -1,   -1,
   -1,  362,   -1,   -1,  333,   -1,  297,  336,  369,  338,
  371,  302,  373,   -1,  305,  418,  307,   -1,  309,  310,
  311,  312,   -1,   -1,   -1,  386,  317,   -1,   -1,   -1,
  321,   -1,   -1,  362,  325,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  333,  264,  265,  336,  267,  338,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,  418,  279,   -1,
   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,
   -1,  362,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,  306,   -1,   -1,   -1,  418,
   -1,   -1,  313,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,
  341,   -1,   -1,  344,  345,   -1,   -1,  418,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  371,  372,   -1,  374,   -1,   -1,  377,  378,  379,  380,
   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,   -1,   -1,
   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,  417,  418,  419,  420,
  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,
   -1,  306,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,
  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,
   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,
  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  371,   -1,   -1,  374,
   -1,   -1,  377,  378,  379,  380,   -1,   -1,   -1,  384,
   -1,  386,   -1,   -1,   -1,   -1,   -1,  392,  393,   -1,
   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,
  279,   -1,  417,  418,  419,  420,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
   -1,  300,   -1,  302,  303,  304,   -1,  306,   -1,   -1,
   -1,   -1,   -1,   -1,  313,   -1,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,
  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,
   -1,   -1,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  359,  360,  361,  362,  363,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,  377,  378,
  379,  380,   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,
   -1,   -1,   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,  417,  418,
  419,  420,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,  341,   -1,
   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  371,   -1,
   -1,   -1,   -1,   -1,  377,  378,  379,  380,   -1,   -1,
   -1,  384,   -1,  386,   -1,   -1,   -1,   -1,   -1,  392,
  393,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,   -1,  279,   -1,  417,  418,  419,  420,  285,   -1,
   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,
   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,  345,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,
   -1,  368,   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,
  377,  378,  379,  380,   -1,   -1,   -1,  384,   -1,  386,
   -1,   -1,   -1,   -1,   -1,  392,  393,   -1,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
  417,  418,  419,  420,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,
  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,  367,   -1,   -1,   -1,
  371,   -1,   -1,   -1,   -1,   -1,  377,  378,  379,  380,
   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,   -1,   -1,
   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,  417,  418,  419,  420,
  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,
  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,
   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,
  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,
   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,
   -1,   -1,  377,  378,  379,  380,   -1,   -1,   -1,  384,
   -1,  386,   -1,   -1,   -1,   -1,   -1,  392,  393,   -1,
   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,
  279,   -1,  417,  418,  419,  420,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,
  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,
   -1,   -1,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  359,  360,  361,  362,  363,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,  377,  378,
  379,  380,   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,
   -1,   -1,   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,  417,  418,
  419,  420,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,
   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  371,   -1,
   -1,   -1,   -1,   -1,  377,  378,  379,  380,   -1,   -1,
   -1,  384,   -1,  386,   -1,   -1,   -1,   -1,   -1,  392,
  393,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,   -1,  279,   -1,  417,  418,  419,  420,  285,   -1,
   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,
   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,  345,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,
  377,  378,  379,  380,   -1,   -1,   -1,  384,   -1,  386,
   -1,   -1,   -1,   -1,   -1,  392,  393,   -1,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
  417,  418,  419,  420,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,
  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  371,   -1,   -1,   -1,   -1,   -1,  377,  378,  379,  380,
   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,   -1,   -1,
   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,  417,  418,  419,  420,
  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,
  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,
   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,
  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  371,   -1,   -1,   -1,
   -1,   -1,  377,  378,  379,  380,   -1,   -1,   -1,  384,
   -1,  386,   -1,   -1,   -1,   -1,   -1,  392,  393,   -1,
   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,
  279,   -1,  417,  418,  419,  420,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,  261,   -1,
   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,
  319,  284,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,
  329,  330,  331,  332,  297,  334,   -1,   -1,   -1,  302,
   -1,   -1,   -1,   -1,  307,   -1,  309,  310,  311,  312,
   -1,   -1,  315,   -1,  317,   -1,   -1,   -1,  321,   -1,
  359,  360,  361,  362,  363,   -1,   -1,   -1,   -1,   -1,
  333,   -1,  371,  336,   -1,  338,   -1,   -1,  377,  378,
  379,  380,   -1,   -1,   -1,  384,   -1,  386,   -1,  264,
  265,   -1,  267,  392,  393,  270,  271,   -1,   -1,  362,
  275,  276,  277,   -1,  279,  368,  369,   -1,   -1,   -1,
  285,   -1,   -1,  288,   -1,   -1,   -1,  261,  417,  418,
  295,  420,   -1,   -1,   -1,  300,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  284,  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,
  325,   -1,  327,  297,  329,  330,  331,  332,  302,  334,
   -1,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,  315,   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,
   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,  333,
   -1,   -1,  336,   -1,  338,   -1,  371,  263,   -1,  265,
   -1,  267,  377,   -1,  270,  380,  272,  273,   -1,  275,
   -1,  277,   -1,  279,   -1,  281,  282,  283,  362,   -1,
   -1,  287,  288,   -1,  368,   -1,   -1,  293,   -1,  295,
  296,   -1,   -1,   -1,  300,   -1,   -1,   -1,  304,   -1,
   -1,   -1,  417,  418,   -1,  420,   -1,   -1,   -1,  315,
  316,   -1,  318,   -1,   -1,   -1,  322,  323,   -1,   -1,
   -1,   -1,   -1,   -1,  330,  331,  264,  265,  334,  267,
   -1,  337,  270,  271,   -1,   -1,  342,  275,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,  364,  365,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,  377,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,  337,
   -1,   -1,   -1,   -1,   -1,   -1,  265,   -1,  267,   -1,
   -1,  270,  418,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,  359,  360,  361,  362,   -1,   -1,   -1,   -1,  288,
  265,   -1,  267,  371,   -1,  270,  295,  272,  273,   -1,
  275,  300,  277,  302,  279,  304,  281,  282,  283,   -1,
   -1,   -1,  287,  288,   -1,   -1,   -1,  316,  293,  318,
  295,  296,   -1,  322,  323,  300,   -1,   -1,   -1,  304,
   -1,  330,  331,   -1,   -1,  334,   -1,   -1,  337,  417,
  418,  316,   -1,  318,   -1,   -1,   -1,  322,  323,   -1,
   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,  265,  334,
  267,   -1,  337,  270,   -1,  272,  273,  342,  275,   -1,
  277,   -1,  279,   -1,  281,  282,  283,   -1,   -1,   -1,
  287,  288,   -1,   -1,   -1,   -1,  293,   -1,  295,  296,
   -1,   -1,   -1,  300,   -1,   -1,   -1,  304,   -1,   -1,
   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,   -1,   -1,   -1,  322,  323,   -1,   -1,  418,
   -1,   -1,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,
  337,   -1,  265,   -1,  267,  342,   -1,  270,   -1,   -1,
  273,   -1,  275,  418,  277,   -1,  279,   -1,  281,  282,
  283,   -1,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,
  293,   -1,  295,   -1,  265,   -1,  267,  300,   -1,  270,
   -1,  304,  273,   -1,  275,   -1,  277,   -1,  279,   -1,
  281,  282,  283,  316,   -1,  318,  287,  288,   -1,  322,
   -1,   -1,  293,   -1,  295,   -1,   -1,  330,  331,  300,
   -1,  334,   -1,  304,  337,   -1,   -1,   -1,  265,  342,
  267,  418,   -1,  270,   -1,  316,   -1,  318,  275,   -1,
   -1,  322,  279,   -1,   -1,   -1,   -1,   -1,   -1,  330,
  331,  288,   -1,  334,   -1,   -1,  337,   -1,  295,   -1,
  265,  342,  267,  300,  377,  270,   -1,  304,   -1,  306,
  275,  308,   -1,   -1,  279,   -1,  313,   -1,   -1,  316,
   -1,  318,   -1,  288,   -1,  322,   -1,   -1,  325,   -1,
  295,   -1,   -1,  330,  331,  300,   -1,  334,   -1,  304,
  337,  306,   -1,  308,  265,  418,  267,   -1,  313,  270,
   -1,  316,   -1,  318,  275,   -1,   -1,  322,  279,   -1,
  325,   -1,   -1,   -1,   -1,  330,  331,  288,   -1,  334,
   -1,   -1,  337,   -1,  295,  372,  265,  418,  267,  300,
   -1,  270,   -1,  304,   -1,  306,  275,  308,   -1,   -1,
  279,   -1,  313,   -1,   -1,  316,   -1,  318,   -1,  288,
   -1,  322,   -1,   -1,  325,  370,  295,   -1,   -1,  330,
  331,  300,   -1,  334,   -1,  304,  337,  306,   -1,   -1,
   -1,  418,   -1,   -1,  313,   -1,   -1,  316,   -1,  318,
   -1,   -1,   -1,  322,   -1,   -1,  325,   -1,   -1,   -1,
   -1,  330,  331,   -1,   -1,  334,   -1,  265,  337,  267,
   -1,   -1,  270,  418,   -1,   -1,   -1,  275,   -1,   -1,
   -1,  279,   -1,   -1,   -1,  283,  265,   -1,  267,   -1,
  288,  270,   -1,   -1,   -1,  293,  275,  295,   -1,   -1,
  279,   -1,  300,   -1,   -1,   -1,  304,  305,   -1,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,  418,  316,   -1,
  318,  300,   -1,   -1,  322,  304,   -1,   -1,   -1,   -1,
   -1,   -1,  330,  331,   -1,   -1,  334,  316,   -1,  318,
  265,   -1,  267,  322,   -1,  270,   -1,   -1,   -1,  418,
  275,  330,  331,   -1,  279,  334,   -1,  265,  337,  267,
   -1,   -1,  270,  288,   -1,   -1,   -1,  275,   -1,   -1,
  295,  279,   -1,   -1,   -1,  300,   -1,   -1,   -1,  304,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,  316,  300,  318,   -1,   -1,  304,  322,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,  316,  334,
  318,  265,  337,  267,  322,   -1,  270,   -1,   -1,   -1,
  418,  275,  330,  331,   -1,  279,  334,   -1,   -1,  337,
   -1,   -1,   -1,   -1,  288,  265,   -1,  267,   -1,  418,
  270,  295,   -1,   -1,   -1,  275,  300,   -1,   -1,  279,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,   -1,
   -1,   -1,  316,   -1,  318,  295,   -1,   -1,  322,   -1,
  300,   -1,   -1,   -1,  304,   -1,  330,  331,   -1,   -1,
  334,   -1,   -1,  337,   -1,  265,  316,  267,  318,   -1,
  270,   -1,  322,  418,   -1,  275,   -1,   -1,   -1,  279,
  330,  331,   -1,   -1,  334,   -1,   -1,  337,  288,  265,
  418,  267,   -1,   -1,  270,  295,   -1,   -1,   -1,  275,
  300,   -1,   -1,  279,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  288,   -1,   -1,   -1,  316,   -1,  318,  295,
   -1,   -1,  322,   -1,  300,   -1,   -1,   -1,  304,   -1,
  330,  331,   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,
  316,   -1,  318,  265,  418,  267,  322,   -1,  270,   -1,
   -1,   -1,   -1,  275,  330,  331,   -1,  279,  334,   -1,
  265,  337,  267,   -1,   -1,  270,  288,   -1,  418,   -1,
  275,   -1,   -1,  295,  279,   -1,   -1,   -1,  300,   -1,
   -1,   -1,  304,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,  316,  300,  318,   -1,   -1,  304,
  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,
   -1,  316,  334,  318,  265,  337,  267,  322,  418,  270,
   -1,   -1,   -1,   -1,  275,  330,  331,   -1,  279,  334,
   -1,   -1,  337,   -1,   -1,   -1,   -1,  288,  265,   -1,
  267,   -1,  418,  270,  295,   -1,   -1,   -1,  275,  300,
   -1,   -1,  279,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  288,   -1,   -1,   -1,  316,   -1,  318,  295,   -1,
   -1,  322,   -1,  300,   -1,   -1,   -1,  304,   -1,  330,
  331,   -1,  261,  334,   -1,   -1,  337,   -1,   -1,  316,
   -1,  318,   -1,  272,   -1,  322,  418,   -1,  277,   -1,
   -1,   -1,  281,  330,  331,  284,   -1,  334,   -1,   -1,
  337,   -1,   -1,  418,   -1,   -1,   -1,  296,  297,   -1,
   -1,   -1,  301,  302,   -1,  261,   -1,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,  272,   -1,  317,   -1,
   -1,  277,  321,   -1,  323,  281,   -1,   -1,  284,   -1,
   -1,   -1,   -1,   -1,  333,   -1,  335,  336,   -1,  338,
  296,  297,   -1,  342,   -1,  301,  302,  418,   -1,   -1,
   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,
   -1,  317,   -1,  362,   -1,  321,   -1,  323,   -1,  368,
  369,  418,   -1,  261,   -1,  263,   -1,  333,   -1,   -1,
  336,   -1,  338,   -1,   -1,   -1,  342,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  284,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  362,   -1,   -1,  297,
   -1,   -1,  368,  369,  302,   -1,  261,   -1,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,  272,   -1,  317,
   -1,   -1,  277,  321,   -1,   -1,  281,   -1,   -1,  284,
   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,
  338,  296,  297,   -1,   -1,   -1,  301,  302,   -1,  261,
   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
  272,   -1,  317,   -1,  362,  277,  321,   -1,  323,  281,
  368,  369,  284,   -1,   -1,   -1,   -1,   -1,  333,   -1,
   -1,  336,   -1,  338,  296,  297,   -1,  342,   -1,  301,
  302,  261,   -1,   -1,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,   -1,   -1,  317,   -1,  362,   -1,  321,
   -1,  323,   -1,  368,  284,   -1,   -1,   -1,   -1,   -1,
   -1,  333,   -1,   -1,  336,   -1,  338,  297,   -1,  261,
  342,   -1,  302,   -1,   -1,   -1,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,
  362,  321,  284,   -1,   -1,   -1,  368,   -1,   -1,   -1,
   -1,   -1,   -1,  333,   -1,  297,  336,  261,  338,  263,
  302,   -1,   -1,   -1,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,
  284,   -1,  362,   -1,  364,  365,   -1,   -1,  368,   -1,
   -1,  333,   -1,  297,  336,  261,  338,   -1,  302,   -1,
   -1,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,  284,   -1,
  362,   -1,  364,  365,   -1,  261,  368,   -1,   -1,  333,
   -1,  297,  336,   -1,  338,   -1,  302,   -1,   -1,   -1,
   -1,  307,   -1,  309,  310,  311,  312,   -1,  284,   -1,
   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,  362,   -1,
   -1,  297,   -1,   -1,  368,  301,  302,  333,  261,   -1,
  336,  307,  338,  309,  310,  311,  312,   -1,   -1,   -1,
   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,   -1,
   -1,  284,   -1,   -1,   -1,   -1,  362,  333,  364,  365,
  336,   -1,  338,   -1,  297,   -1,   -1,   -1,   -1,  302,
   -1,   -1,   -1,   -1,  307,   -1,  309,  310,  311,  312,
   -1,   -1,   -1,   -1,  317,   -1,  362,   -1,  321,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  333,   -1,   -1,  336,   -1,  338,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,
  };

#line 6263 "cs-parser.jay"

// <summary>
//  A class used to hold info about an operator declarator
// </summary>
class OperatorDeclaration {
	public readonly Operator.OpType optype;
	public readonly FullNamedExpression ret_type;
	public readonly Location location;

	public OperatorDeclaration (Operator.OpType op, FullNamedExpression ret_type, Location location)
	{
		optype = op;
		this.ret_type = ret_type;
		this.location = location;
	}
}

void Error_ExpectingTypeName (Expression expr)
{
	if (expr is Invocation){
		report.Error (1002, expr.Location, "Expecting `;'");
	} else {
		Expression.Error_InvalidExpressionStatement (report, expr.Location);
	}
}

void Error_ParameterModifierNotValid (string modifier, Location loc)
{
	report.Error (631, loc, "The parameter modifier `{0}' is not valid in this context",
			              modifier);
}

void Error_DuplicateParameterModifier (Location loc, Parameter.Modifier mod)
{
	report.Error (1107, loc, "Duplicate parameter modifier `{0}'",
  		Parameter.GetModifierSignature (mod));
}

void Error_TypeExpected (Location loc)
{
	report.Error (1031, loc, "Type expected");
}

void Error_UnsafeCodeNotAllowed (Location loc)
{
	report.Error (227, loc, "Unsafe code requires the `unsafe' command line option to be specified");
}

void Warning_EmptyStatement (Location loc)
{
	report.Warning (642, 3, loc, "Possible mistaken empty statement");
}

void Error_NamedArgumentExpected (NamedArgument a)
{
	report.Error (1738, a.Location, "Named arguments must appear after the positional arguments");
}

void push_current_class (TypeContainer tc, object partial_token)
{
	if (module.Evaluator != null && current_container is ModuleContainer){
		tc.Definition.Modifiers = tc.ModFlags = (tc.ModFlags & ~Modifiers.AccessibilityMask) | Modifiers.PUBLIC;
		if (undo == null)
			undo = new Undo ();
		undo.AddTypeContainer (current_container, tc);
	}

	if (partial_token != null)
		current_container = current_container.AddPartial (tc);
	else
		current_container = current_container.AddTypeContainer (tc);

	++lexer.parsing_declaration;
	current_class = tc;
	ubag.PushTypeDeclaration (tc);
}

DeclSpace pop_current_class ()
{
	DeclSpace retval = current_class;

	current_class = current_class.Parent;
	current_container = current_class.PartialContainer;
	ubag.PopTypeDeclaration ();
	
	return retval;
}

// <summary>
//   Given the @class_name name, it creates a fully qualified name
//   based on the containing declaration space
// </summary>
MemberName
MakeName (MemberName class_name)
{
	Namespace ns = current_namespace.NS;

	if (current_container == module) {
		if (ns.Name.Length != 0)
			return new MemberName (ns.MemberName, class_name);
		else
			return class_name;
	} else {
		return new MemberName (current_container.MemberName, class_name);
	}
}

[System.Diagnostics.Conditional ("FULL_AST")]
void StoreModifierLocation (object token, Location loc)
{
	if (lbag == null)
		return;

	if (mod_locations == null)
  		mod_locations = new List<Tuple<Modifiers, Location>> ();

	mod_locations.Add (Tuple.Create ((Modifiers) token, loc));
}

List<Tuple<Modifiers, Location>> GetModifierLocations ()
{
	var result = mod_locations;
	mod_locations = null;
	return result;
}

string CheckAttributeTarget (string a, Location l)
{
	switch (a) {
	case "assembly" : case "module" : case "field" : case "method" : case "param" : case "property" : case "type" :
			return a;
	}

	report.Warning (658, 1, l,
		 "`{0}' is invalid attribute target. All attributes in this attribute section will be ignored", a);
	return string.Empty;
}

static bool IsUnaryOperator (Operator.OpType op)
{
	switch (op) {
		
	case Operator.OpType.LogicalNot: 
	case Operator.OpType.OnesComplement: 
	case Operator.OpType.Increment:
	case Operator.OpType.Decrement:
	case Operator.OpType.True: 
	case Operator.OpType.False: 
	case Operator.OpType.UnaryPlus: 
	case Operator.OpType.UnaryNegation:
		return true;
	}
	return false;
}

void syntax_error (Location l, string msg)
{
	report.Error (1003, l, "Syntax error, " + msg);
}

Tokenizer lexer;

public Tokenizer Lexer {
	get {
		return lexer;
	}
}		   

static CSharpParser ()
{
	oob_stack = new Stack<object> ();
}

public CSharpParser (SeekableStreamReader reader, CompilationSourceFile file)
	: this (reader, file, file.NamespaceContainer.Module.Compiler.Report)
{
}

public CSharpParser (SeekableStreamReader reader, CompilationSourceFile file, Report report)
{
	this.file = file;
	current_namespace = file.NamespaceContainer;
	
	this.module = current_namespace.Module;
	this.compiler = module.Compiler;
	this.settings = compiler.Settings;
	this.report = report;
	
	lang_version = settings.Version;
	doc_support = settings.DocumentationFile != null;
	current_class = current_namespace.SlaveDeclSpace;
	current_container = current_class.PartialContainer; // == RootContest.ToplevelTypes
	oob_stack.Clear ();
	lexer = new Tokenizer (reader, file, compiler);
	
	use_global_stacks = true;
}

public void parse ()
{
	eof_token = Token.EOF;
	Tokenizer.LocatedToken.Initialize ();
	
	try {
		if (yacc_verbose_flag > 1)
			yyparse (lexer, new yydebug.yyDebugSimple ());
		else
			yyparse (lexer);
			
		Tokenizer tokenizer = lexer as Tokenizer;
		tokenizer.cleanup ();		
	} catch (Exception e){
	  	if (e is yyParser.yyUnexpectedEof) {
			Error_SyntaxError (yyToken);
			UnexpectedEOF = true;
			return;
		}
			
		if (e is yyParser.yyException) {
			report.Error (-25, lexer.Location, "Parsing error");
		} else {
			// Used by compiler-tester to test internal errors
			if (yacc_verbose_flag > 0)
				throw;
		
			report.Error (589, lexer.Location, "Internal compiler error during parsing");
		}
	}
}

void CheckToken (int error, int yyToken, string msg, Location loc)
{
	if (yyToken >= Token.FIRST_KEYWORD && yyToken <= Token.LAST_KEYWORD)
		report.Error (error, loc, "{0}: `{1}' is a keyword", msg, GetTokenName (yyToken));
	else
		report.Error (error, loc, msg);
}

string ConsumeStoredComment ()
{
	string s = tmpComment;
	tmpComment = null;
	Lexer.doc_state = XmlCommentState.Allowed;
	return s;
}

void FeatureIsNotAvailable (Location loc, string feature)
{
	report.FeatureIsNotAvailable (compiler, loc, feature);
}

Location GetLocation (object obj)
{
	var lt = obj as Tokenizer.LocatedToken;
	if (lt != null)
		return lt.Location;
		
	var mn = obj as MemberName;
	if (mn != null)
		return mn.Location;
		
	var expr = obj as Expression;
	if (expr != null)
		return expr.Location;

	return lexer.Location;
}

public LocationsBag LocationsBag {
	get {
		return lbag;
	}
	set {
		lbag = value;
	}
}

public UsingsBag UsingsBag {
	get {
		return ubag;
	}
	set {
		ubag = value;
	}
}

void start_block (Location loc)
{
	if (current_block == null) {
		current_block = new ToplevelBlock (compiler, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else if (parsing_anonymous_method) {
		current_block = new ParametersBlock (current_block, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else {
		current_block = new ExplicitBlock (current_block, loc, Location.Null);
	}
}

Block
end_block (Location loc)
{
	Block retval = current_block.Explicit;
	retval.SetEndLocation (loc);
	current_block = retval.Parent;
	return retval;
}

void start_anonymous (bool isLambda, ParametersCompiled parameters, bool isAsync, Location loc)
{
	oob_stack.Push (current_anonymous_method);
	oob_stack.Push (current_local_parameters);
	oob_stack.Push (current_variable);

	current_local_parameters = parameters;
	if (isLambda) {
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (loc, "lambda expressions");

		current_anonymous_method = new LambdaExpression (isAsync, loc);
	} else {
		if (lang_version == LanguageVersion.ISO_1)
			FeatureIsNotAvailable (loc, "anonymous methods");
			
		current_anonymous_method = new AnonymousMethodExpression (isAsync, loc);
	}

	// Force the next block to be created as a ToplevelBlock
	parsing_anonymous_method = true;
}

/*
 * Completes the anonymous method processing, if lambda_expr is null, this
 * means that we have a Statement instead of an Expression embedded 
 */
AnonymousMethodExpression end_anonymous (ParametersBlock anon_block)
{
	AnonymousMethodExpression retval;

	current_anonymous_method.Block = anon_block;
	retval = current_anonymous_method;

	current_variable = (BlockVariableDeclaration) oob_stack.Pop ();
	current_local_parameters = (ParametersCompiled) oob_stack.Pop ();
	current_anonymous_method = (AnonymousMethodExpression) oob_stack.Pop ();

	return retval;
}

void Error_SyntaxError (int token)
{
	Error_SyntaxError (0, token, "Unexpected symbol");
}

void Error_SyntaxError (int error_code, int token, string msg)
{
	Lexer.CompleteOnEOF = false;

	// An error message has been reported by tokenizer
	if (token == Token.ERROR)
		return;

	string symbol = GetSymbolName (token);
	string expecting = GetExpecting ();
	var loc = lexer.Location - symbol.Length;
	
	if (error_code == 0) {
		if (expecting == "`identifier'") {
			if (token > Token.FIRST_KEYWORD && token < Token.LAST_KEYWORD) {
				report.Error (1041, loc, "Identifier expected, `{0}' is a keyword", symbol);
				return;
			}
			
			error_code = 1001;
			expecting = "identifier";
		} else if (expecting == "`)'") {
			error_code = 1026;
		} else {
			error_code = 1525;
		}
	}
	
	if (string.IsNullOrEmpty (expecting))
		report.Error (error_code, loc, "{1} `{0}'", symbol, msg);
	else
		report.Error (error_code, loc, "{2} `{0}', expecting {1}", symbol, expecting, msg);	  
}

string GetExpecting ()
{
	int [] tokens = yyExpectingTokens (yyExpectingState);
	var names = new List<string> (tokens.Length);
	bool has_type = false;
	bool has_identifier = false;
	for (int i = 0; i < tokens.Length; i++){
		int token = tokens [i];
		has_identifier |= token == Token.IDENTIFIER;
		
		string name = GetTokenName (token);
		if (name == "<internal>")
			continue;
			
		has_type |= name == "type";
		if (names.Contains (name))
			continue;
		
		names.Add (name);
	}

	//
	// Too many tokens to enumerate
	//
	if (names.Count > 8)
		return null;

	if (has_type && has_identifier)
		names.Remove ("identifier");

	if (names.Count == 1)
		return "`" + GetTokenName (tokens [0]) + "'";
	
	StringBuilder sb = new StringBuilder ();
	names.Sort ();
	int count = names.Count;
	for (int i = 0; i < count; i++){
		bool last = i + 1 == count;
		if (last)
			sb.Append ("or ");
		sb.Append ('`');
		sb.Append (names [i]);
		sb.Append (last ? "'" : count < 3 ? "' " : "', ");
	}
	return sb.ToString ();
}


string GetSymbolName (int token)
{
	switch (token){
	case Token.LITERAL:
		return ((Constant)lexer.Value).GetValue ().ToString ();
	case Token.IDENTIFIER:
		return ((Tokenizer.LocatedToken)lexer.Value).Value;

	case Token.BOOL:
		return "bool";
	case Token.BYTE:
		return "byte";
	case Token.CHAR:
		return "char";
	case Token.VOID:
		return "void";
	case Token.DECIMAL:
		return "decimal";
	case Token.DOUBLE:
		return "double";
	case Token.FLOAT:
		return "float";
	case Token.INT:
		return "int";
	case Token.LONG:
		return "long";
	case Token.SBYTE:
		return "sbyte";
	case Token.SHORT:
		return "short";
	case Token.STRING:
		return "string";
	case Token.UINT:
		return "uint";
	case Token.ULONG:
		return "ulong";
	case Token.USHORT:
		return "ushort";
	case Token.OBJECT:
		return "object";
		
	case Token.PLUS:
		return "+";
	case Token.UMINUS:
	case Token.MINUS:
		return "-";
	case Token.BANG:
		return "!";
	case Token.BITWISE_AND:
		return "&";
	case Token.BITWISE_OR:
		return "|";
	case Token.STAR:
		return "*";
	case Token.PERCENT:
		return "%";
	case Token.DIV:
		return "/";
	case Token.CARRET:
		return "^";
	case Token.OP_INC:
		return "++";
	case Token.OP_DEC:
		return "--";
	case Token.OP_SHIFT_LEFT:
		return "<<";
	case Token.OP_SHIFT_RIGHT:
		return ">>";
	case Token.OP_LT:
		return "<";
	case Token.OP_GT:
		return ">";
	case Token.OP_LE:
		return "<=";
	case Token.OP_GE:
		return ">=";
	case Token.OP_EQ:
		return "==";
	case Token.OP_NE:
		return "!=";
	case Token.OP_AND:
		return "&&";
	case Token.OP_OR:
		return "||";
	case Token.OP_PTR:
		return "->";
	case Token.OP_COALESCING:	
		return "??";
	case Token.OP_MULT_ASSIGN:
		return "*=";
	case Token.OP_DIV_ASSIGN:
		return "/=";
	case Token.OP_MOD_ASSIGN:
		return "%=";
	case Token.OP_ADD_ASSIGN:
		return "+=";
	case Token.OP_SUB_ASSIGN:
		return "-=";
	case Token.OP_SHIFT_LEFT_ASSIGN:
		return "<<=";
	case Token.OP_SHIFT_RIGHT_ASSIGN:
		return ">>=";
	case Token.OP_AND_ASSIGN:
		return "&=";
	case Token.OP_XOR_ASSIGN:
		return "^=";
	case Token.OP_OR_ASSIGN:
		return "|=";
	}

	return GetTokenName (token);
}

static string GetTokenName (int token)
{
	switch (token){
	case Token.ABSTRACT:
		return "abstract";
	case Token.AS:
		return "as";
	case Token.ADD:
		return "add";
	case Token.ASYNC:
		return "async";
	case Token.BASE:
		return "base";
	case Token.BREAK:
		return "break";
	case Token.CASE:
		return "case";
	case Token.CATCH:
		return "catch";
	case Token.CHECKED:
		return "checked";
	case Token.CLASS:
		return "class";
	case Token.CONST:
		return "const";
	case Token.CONTINUE:
		return "continue";
	case Token.DEFAULT:
		return "default";
	case Token.DELEGATE:
		return "delegate";
	case Token.DO:
		return "do";
	case Token.ELSE:
		return "else";
	case Token.ENUM:
		return "enum";
	case Token.EVENT:
		return "event";
	case Token.EXPLICIT:
		return "explicit";
	case Token.EXTERN:
	case Token.EXTERN_ALIAS:
		return "extern";
	case Token.FALSE:
		return "false";
	case Token.FINALLY:
		return "finally";
	case Token.FIXED:
		return "fixed";
	case Token.FOR:
		return "for";
	case Token.FOREACH:
		return "foreach";
	case Token.GOTO:
		return "goto";
	case Token.IF:
		return "if";
	case Token.IMPLICIT:
		return "implicit";
	case Token.IN:
		return "in";
	case Token.INTERFACE:
		return "interface";
	case Token.INTERNAL:
		return "internal";
	case Token.IS:
		return "is";
	case Token.LOCK:
		return "lock";
	case Token.NAMESPACE:
		return "namespace";
	case Token.NEW:
		return "new";
	case Token.NULL:
		return "null";
	case Token.OPERATOR:
		return "operator";
	case Token.OUT:
		return "out";
	case Token.OVERRIDE:
		return "override";
	case Token.PARAMS:
		return "params";
	case Token.PRIVATE:
		return "private";
	case Token.PROTECTED:
		return "protected";
	case Token.PUBLIC:
		return "public";
	case Token.READONLY:
		return "readonly";
	case Token.REF:
		return "ref";
	case Token.RETURN:
		return "return";
	case Token.REMOVE:
		return "remove";
	case Token.SEALED:
		return "sealed";
	case Token.SIZEOF:
		return "sizeof";
	case Token.STACKALLOC:
		return "stackalloc";
	case Token.STATIC:
		return "static";
	case Token.STRUCT:
		return "struct";
	case Token.SWITCH:
		return "switch";
	case Token.THIS:
		return "this";
	case Token.THROW:
		return "throw";
	case Token.TRUE:
		return "true";
	case Token.TRY:
		return "try";
	case Token.TYPEOF:
		return "typeof";
	case Token.UNCHECKED:
		return "unchecked";
	case Token.UNSAFE:
		return "unsafe";
	case Token.USING:
		return "using";
	case Token.VIRTUAL:
		return "virtual";
	case Token.VOLATILE:
		return "volatile";
	case Token.WHERE:
		return "where";
	case Token.WHILE:
		return "while";
	case Token.ARGLIST:
		return "__arglist";
	case Token.REFVALUE:
		return "__refvalue";
	case Token.REFTYPE:
		return "__reftype";
	case Token.MAKEREF:
		return "__makeref";
	case Token.PARTIAL:
		return "partial";
	case Token.ARROW:
		return "=>";
	case Token.FROM:
	case Token.FROM_FIRST:
		return "from";
	case Token.JOIN:
		return "join";
	case Token.ON:
		return "on";
	case Token.EQUALS:
		return "equals";
	case Token.SELECT:
		return "select";
	case Token.GROUP:
		return "group";
	case Token.BY:
		return "by";
	case Token.LET:
		return "let";
	case Token.ORDERBY:
		return "orderby";
	case Token.ASCENDING:
		return "ascending";
	case Token.DESCENDING:
		return "descending";
	case Token.INTO:
		return "into";
	case Token.GET:
		return "get";
	case Token.SET:
		return "set";
	case Token.OPEN_BRACE:
		return "{";
	case Token.CLOSE_BRACE:
		return "}";
	case Token.OPEN_BRACKET:
	case Token.OPEN_BRACKET_EXPR:
		return "[";
	case Token.CLOSE_BRACKET:
		return "]";
	case Token.OPEN_PARENS_CAST:
	case Token.OPEN_PARENS_LAMBDA:
	case Token.OPEN_PARENS:
		return "(";
	case Token.CLOSE_PARENS:
		return ")";
	case Token.DOT:
		return ".";
	case Token.COMMA:
		return ",";
	case Token.DEFAULT_COLON:
		return "default:";
	case Token.COLON:
		return ":";
	case Token.SEMICOLON:
		return ";";
	case Token.TILDE:
		return "~";
		
	case Token.PLUS:
	case Token.UMINUS:
	case Token.MINUS:
	case Token.BANG:
	case Token.OP_LT:
	case Token.OP_GT:
	case Token.BITWISE_AND:
	case Token.BITWISE_OR:
	case Token.STAR:
	case Token.PERCENT:
	case Token.DIV:
	case Token.CARRET:
	case Token.OP_INC:
	case Token.OP_DEC:
	case Token.OP_SHIFT_LEFT:
	case Token.OP_SHIFT_RIGHT:
	case Token.OP_LE:
	case Token.OP_GE:
	case Token.OP_EQ:
	case Token.OP_NE:
	case Token.OP_AND:
	case Token.OP_OR:
	case Token.OP_PTR:
	case Token.OP_COALESCING:	
	case Token.OP_MULT_ASSIGN:
	case Token.OP_DIV_ASSIGN:
	case Token.OP_MOD_ASSIGN:
	case Token.OP_ADD_ASSIGN:
	case Token.OP_SUB_ASSIGN:
	case Token.OP_SHIFT_LEFT_ASSIGN:
	case Token.OP_SHIFT_RIGHT_ASSIGN:
	case Token.OP_AND_ASSIGN:
	case Token.OP_XOR_ASSIGN:
	case Token.OP_OR_ASSIGN:
		return "<operator>";

	case Token.BOOL:
	case Token.BYTE:
	case Token.CHAR:
	case Token.VOID:
	case Token.DECIMAL:
	case Token.DOUBLE:
	case Token.FLOAT:
	case Token.INT:
	case Token.LONG:
	case Token.SBYTE:
	case Token.SHORT:
	case Token.STRING:
	case Token.UINT:
	case Token.ULONG:
	case Token.USHORT:
	case Token.OBJECT:
		return "type";
	
	case Token.ASSIGN:
		return "=";
	case Token.OP_GENERICS_LT:
	case Token.GENERIC_DIMENSION:
		return "<";
	case Token.OP_GENERICS_GT:
		return ">";
	case Token.INTERR:
	case Token.INTERR_NULLABLE:
		return "?";
	case Token.DOUBLE_COLON:
		return "::";
	case Token.LITERAL:
		return "value";
	case Token.IDENTIFIER:
		return "identifier";

	case Token.EOF:
		return "end-of-file";

		// All of these are internal.
	case Token.NONE:
	case Token.ERROR:
	case Token.FIRST_KEYWORD:
	case Token.EVAL_COMPILATION_UNIT_PARSER:
	case Token.EVAL_USING_DECLARATIONS_UNIT_PARSER:
	case Token.EVAL_STATEMENT_PARSER:
	case Token.LAST_KEYWORD:
	case Token.GENERATE_COMPLETION:
	case Token.COMPLETE_COMPLETION:
		return "<internal>";

		// A bit more robust.
	default:
		return yyNames [token];
        }
}

/* end end end */
}
#line default
namespace yydebug {
        using System;
	 internal interface yyDebug {
		 void push (int state, Object value);
		 void lex (int state, int token, string name, Object value);
		 void shift (int from, int to, int errorFlag);
		 void pop (int state);
		 void discard (int state, int token, string name, Object value);
		 void reduce (int from, int to, int rule, string text, int len);
		 void shift (int from, int to);
		 void accept (Object value);
		 void error (string message);
		 void reject ();
	 }
	 
	 class yyDebugSimple : yyDebug {
		 void println (string s){
			 Console.Error.WriteLine (s);
		 }
		 
		 public void push (int state, Object value) {
			 println ("push\tstate "+state+"\tvalue "+value);
		 }
		 
		 public void lex (int state, int token, string name, Object value) {
			 println("lex\tstate "+state+"\treading "+name+"\tvalue "+value);
		 }
		 
		 public void shift (int from, int to, int errorFlag) {
			 switch (errorFlag) {
			 default:				// normally
				 println("shift\tfrom state "+from+" to "+to);
				 break;
			 case 0: case 1: case 2:		// in error recovery
				 println("shift\tfrom state "+from+" to "+to
					     +"\t"+errorFlag+" left to recover");
				 break;
			 case 3:				// normally
				 println("shift\tfrom state "+from+" to "+to+"\ton error");
				 break;
			 }
		 }
		 
		 public void pop (int state) {
			 println("pop\tstate "+state+"\ton error");
		 }
		 
		 public void discard (int state, int token, string name, Object value) {
			 println("discard\tstate "+state+"\ttoken "+name+"\tvalue "+value);
		 }
		 
		 public void reduce (int from, int to, int rule, string text, int len) {
			 println("reduce\tstate "+from+"\tuncover "+to
				     +"\trule ("+rule+") "+text);
		 }
		 
		 public void shift (int from, int to) {
			 println("goto\tfrom state "+from+" to "+to);
		 }
		 
		 public void accept (Object value) {
			 println("accept\tvalue "+value);
		 }
		 
		 public void error (string message) {
			 println("error\t"+message);
		 }
		 
		 public void reject () {
			 println("reject");
		 }
		 
	 }
}
// %token constants
 class Token {
  public const int EOF = 257;
  public const int NONE = 258;
  public const int ERROR = 259;
  public const int FIRST_KEYWORD = 260;
  public const int ABSTRACT = 261;
  public const int AS = 262;
  public const int ADD = 263;
  public const int BASE = 264;
  public const int BOOL = 265;
  public const int BREAK = 266;
  public const int BYTE = 267;
  public const int CASE = 268;
  public const int CATCH = 269;
  public const int CHAR = 270;
  public const int CHECKED = 271;
  public const int CLASS = 272;
  public const int CONST = 273;
  public const int CONTINUE = 274;
  public const int DECIMAL = 275;
  public const int DEFAULT = 276;
  public const int DELEGATE = 277;
  public const int DO = 278;
  public const int DOUBLE = 279;
  public const int ELSE = 280;
  public const int ENUM = 281;
  public const int EVENT = 282;
  public const int EXPLICIT = 283;
  public const int EXTERN = 284;
  public const int FALSE = 285;
  public const int FINALLY = 286;
  public const int FIXED = 287;
  public const int FLOAT = 288;
  public const int FOR = 289;
  public const int FOREACH = 290;
  public const int GOTO = 291;
  public const int IF = 292;
  public const int IMPLICIT = 293;
  public const int IN = 294;
  public const int INT = 295;
  public const int INTERFACE = 296;
  public const int INTERNAL = 297;
  public const int IS = 298;
  public const int LOCK = 299;
  public const int LONG = 300;
  public const int NAMESPACE = 301;
  public const int NEW = 302;
  public const int NULL = 303;
  public const int OBJECT = 304;
  public const int OPERATOR = 305;
  public const int OUT = 306;
  public const int OVERRIDE = 307;
  public const int PARAMS = 308;
  public const int PRIVATE = 309;
  public const int PROTECTED = 310;
  public const int PUBLIC = 311;
  public const int READONLY = 312;
  public const int REF = 313;
  public const int RETURN = 314;
  public const int REMOVE = 315;
  public const int SBYTE = 316;
  public const int SEALED = 317;
  public const int SHORT = 318;
  public const int SIZEOF = 319;
  public const int STACKALLOC = 320;
  public const int STATIC = 321;
  public const int STRING = 322;
  public const int STRUCT = 323;
  public const int SWITCH = 324;
  public const int THIS = 325;
  public const int THROW = 326;
  public const int TRUE = 327;
  public const int TRY = 328;
  public const int TYPEOF = 329;
  public const int UINT = 330;
  public const int ULONG = 331;
  public const int UNCHECKED = 332;
  public const int UNSAFE = 333;
  public const int USHORT = 334;
  public const int USING = 335;
  public const int VIRTUAL = 336;
  public const int VOID = 337;
  public const int VOLATILE = 338;
  public const int WHERE = 339;
  public const int WHILE = 340;
  public const int ARGLIST = 341;
  public const int PARTIAL = 342;
  public const int ARROW = 343;
  public const int FROM = 344;
  public const int FROM_FIRST = 345;
  public const int JOIN = 346;
  public const int ON = 347;
  public const int EQUALS = 348;
  public const int SELECT = 349;
  public const int GROUP = 350;
  public const int BY = 351;
  public const int LET = 352;
  public const int ORDERBY = 353;
  public const int ASCENDING = 354;
  public const int DESCENDING = 355;
  public const int INTO = 356;
  public const int INTERR_NULLABLE = 357;
  public const int EXTERN_ALIAS = 358;
  public const int REFVALUE = 359;
  public const int REFTYPE = 360;
  public const int MAKEREF = 361;
  public const int ASYNC = 362;
  public const int AWAIT = 363;
  public const int GET = 364;
  public const int SET = 365;
  public const int LAST_KEYWORD = 366;
  public const int OPEN_BRACE = 367;
  public const int CLOSE_BRACE = 368;
  public const int OPEN_BRACKET = 369;
  public const int CLOSE_BRACKET = 370;
  public const int OPEN_PARENS = 371;
  public const int CLOSE_PARENS = 372;
  public const int DOT = 373;
  public const int COMMA = 374;
  public const int COLON = 375;
  public const int SEMICOLON = 376;
  public const int TILDE = 377;
  public const int PLUS = 378;
  public const int MINUS = 379;
  public const int BANG = 380;
  public const int ASSIGN = 381;
  public const int OP_LT = 382;
  public const int OP_GT = 383;
  public const int BITWISE_AND = 384;
  public const int BITWISE_OR = 385;
  public const int STAR = 386;
  public const int PERCENT = 387;
  public const int DIV = 388;
  public const int CARRET = 389;
  public const int INTERR = 390;
  public const int DOUBLE_COLON = 391;
  public const int OP_INC = 392;
  public const int OP_DEC = 393;
  public const int OP_SHIFT_LEFT = 394;
  public const int OP_SHIFT_RIGHT = 395;
  public const int OP_LE = 396;
  public const int OP_GE = 397;
  public const int OP_EQ = 398;
  public const int OP_NE = 399;
  public const int OP_AND = 400;
  public const int OP_OR = 401;
  public const int OP_MULT_ASSIGN = 402;
  public const int OP_DIV_ASSIGN = 403;
  public const int OP_MOD_ASSIGN = 404;
  public const int OP_ADD_ASSIGN = 405;
  public const int OP_SUB_ASSIGN = 406;
  public const int OP_SHIFT_LEFT_ASSIGN = 407;
  public const int OP_SHIFT_RIGHT_ASSIGN = 408;
  public const int OP_AND_ASSIGN = 409;
  public const int OP_XOR_ASSIGN = 410;
  public const int OP_OR_ASSIGN = 411;
  public const int OP_PTR = 412;
  public const int OP_COALESCING = 413;
  public const int OP_GENERICS_LT = 414;
  public const int OP_GENERICS_LT_DECL = 415;
  public const int OP_GENERICS_GT = 416;
  public const int LITERAL = 417;
  public const int IDENTIFIER = 418;
  public const int OPEN_PARENS_LAMBDA = 419;
  public const int OPEN_PARENS_CAST = 420;
  public const int GENERIC_DIMENSION = 421;
  public const int DEFAULT_COLON = 422;
  public const int OPEN_BRACKET_EXPR = 423;
  public const int EVAL_STATEMENT_PARSER = 424;
  public const int EVAL_COMPILATION_UNIT_PARSER = 425;
  public const int EVAL_USING_DECLARATIONS_UNIT_PARSER = 426;
  public const int DOC_SEE = 427;
  public const int GENERATE_COMPLETION = 428;
  public const int COMPLETE_COMPLETION = 429;
  public const int UMINUS = 430;
  public const int yyErrorCode = 256;
 }
 namespace yyParser {
  using System;
  /** thrown for irrecoverable syntax errors and stack overflow.
    */
  internal class yyException : System.Exception {
    public yyException (string message) : base (message) {
    }
  }
  internal class yyUnexpectedEof : yyException {
    public yyUnexpectedEof (string message) : base (message) {
    }
    public yyUnexpectedEof () : base ("") {
    }
  }

  /** must be implemented by a scanner object to supply input to the parser.
    */
  internal interface yyInput {
    /** move on to next token.
        @return false if positioned beyond tokens.
        @throws IOException on input error.
      */
    bool advance (); // throws java.io.IOException;
    /** classifies current token.
        Should not be called if advance() returned false.
        @return current %token or single character.
      */
    int token ();
    /** associated with current token.
        Should not be called if advance() returned false.
        @return value for token().
      */
    Object value ();
  }
 }
} // close outermost namespace, that MUST HAVE BEEN opened in the prolog
